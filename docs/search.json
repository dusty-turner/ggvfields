[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney X. Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2025). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney X. Sturdivant},   year = {2025},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":"/index.html","id":"ggvfields-","dir":"","previous_headings":"","what":"Vector Field Visualizations with ggplot2","title":"Vector Field Visualizations with ggplot2","text":"ggvfields powerful package visualizing vector fields, stream plots, related visualizations. provides tools explore directional data, including options vector smoothing, gradient fields, potential visualizations, dynamic flow representations.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"Install ggvfields directly GitHub: Load package R: Generate sample wind data:","code":"remotes::install_github(\"dusty-turner/ggvfields\") library(\"ggvfields\") #> Loading required package: ggplot2 set.seed(1234) n <- 10  wind_data <- data.frame(   lon = rnorm(n),    lat = rnorm(n),    dir = runif(n, -pi/4, pi/4),   spd = rchisq(n, df = 2) ) |>    within({     dx <- spd * cos(dir) # Compute the x-component of the vector     dy <- spd * sin(dir) # Compute the y-component of the vector   })  round(wind_data, digits = 2)  #>      lon   lat   dir   spd    dy    dx #> 1  -1.21 -0.48  0.08  3.55  0.30  3.53 #> 2   0.28 -1.00  0.23  2.19  0.50  2.13 #> 3   1.08 -0.78 -0.30  2.99 -0.87  2.86 #> 4  -2.35  0.06  0.19 10.81  2.06 10.61 #> 5   0.43  0.96 -0.27  3.45 -0.91  3.33 #> 6   0.51 -0.11  0.00  3.91  0.01  3.91 #> 7  -0.57 -0.51  0.28  0.16  0.04  0.15 #> 8  -0.55 -0.91 -0.02  0.42 -0.01  0.42 #> 9  -0.56 -0.84 -0.40  0.42 -0.16  0.38 #> 10 -0.89  2.42  0.42  4.17  1.69  3.81"},{"path":[]},{"path":"/index.html","id":"geom_vector-and-geom_vector2","dir":"","previous_headings":"Core Features","what":"geom_vector and geom_vector2","title":"Vector Field Visualizations with ggplot2","text":"functions allow flexible visualizations vector data. geom_vector: default, maps norm (magnitude) vector color. helps compare relative magnitudes visually color gradients. Users need explicitly specify unless overriding default behavior.  geom_vector2: Maps norm vector directly length. provides intuitive representation magnitude. done mapping length = after_stat(norm) default.","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy)) ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, dx = dx, dy = dy))"},{"path":"/index.html","id":"why-length-mapping-matters","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Why Length Mapping Matters","title":"Vector Field Visualizations with ggplot2","text":"Mapping vector lengths norms allows viewers immediately understand magnitude differences without relying solely color. norm w = (u,v) calculated $$|\\mathbf{w}| = \\sqrt{u^2 + v^2}$$ . feature geom_vector2 enhances interpretability using actual vector lengths represent magnitude. legend reflects scaling ensures consistent interpretation.","code":""},{"path":"/index.html","id":"polar-coordinates-support","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Polar Coordinates Support","title":"Vector Field Visualizations with ggplot2","text":"geom_vector geom_vector2 also support polar coordinates, vectors specified using magnitude (distance) direction (angle). Instead providing Cartesian components (dx, dy), users can directly supply polar data. feature simplifies workflows directional data works subsequent relevant functions handle polar coordinates. Polar coordinates can visualized like :","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, distance = spd, angle = dir))"},{"path":"/index.html","id":"normalize-and-center","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Normalize and Center","title":"Vector Field Visualizations with ggplot2","text":"Two important options geom_vector subsequent functions normalize center - default TRUE. options help control visual representation vectors: normalize: set TRUE, option scales vector unit length, can help avoid overplotting dense vector fields. especially useful direction vectors important magnitude. However, ’s important note normalize different mapping norm vector length aesthetic. normalization ensures vectors visually uniform length, mapping norm length preserves relative differences magnitude varying vector lengths based actual norms. center: default, center also set TRUE, meaning midpoint vector placed corresponding (x, y) coordinate, effectively “centering” vector point. center FALSE, base vector anchored (x, y) point, vector extends outward . example turns default behavior:","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy), center = FALSE, normalize = FALSE)"},{"path":"/index.html","id":"geom_vector_field-and-geom_vector_field2","dir":"","previous_headings":"Core Features","what":"geom_vector_field and geom_vector_field2","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field: Computes vector fields user-defined function maps norm color.  geom_vector_field2: Similar geom_vector_field, maps norm vectors lengths instead color.","code":"f <- function(v) c(-v[2], v[1]) # Define a function for the vector field  ggplot() +   geom_vector_field(fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_vector_field2(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"automatic-limit-detection","dir":"","previous_headings":"Core Features > geom_vector_field and geom_vector_field2","what":"Automatic Limit Detection","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field geom_vector_field2 can automatically determine plot limits based function provided. happens data exists previous layers base ggplot object. allows limits inferred context. Customize limits xlim ylim parameters needed control.","code":"ggplot(data = wind_data, aes(x = lon, y = lat, dx = dx, dy = dy)) +   geom_vector() +    geom_vector_field(fun = f) # Automatically determines limits based on existing data"},{"path":"/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced Features","title":"Vector Field Visualizations with ggplot2","text":"section introduces tools deeper exploration vector fields, allowing users analyze properties smoothness, uncertainty, gradients, potential functions. tools provide mathematical insights structure vector fields extend visualization capabilities beyond basic representations. Key capabilities include: Smoothing Vector Fields: Approximate trends noisy vector data compute prediction intervals uncertainty visualization. Gradient Potential Analysis: Derive gradient fields study scalar variations visualize potential functions identify conservative fields. Dynamic Flow Stream Plots: Model particle trajectories visualize dynamic behavior time-dependent fields. Mathematical Feature Mapping: Display vector norms, divergence, curl highlight flow strength, expansion, rotational behavior.","code":""},{"path":"/index.html","id":"geom_vector_smooth","dir":"","previous_headings":"Advanced Features","what":"geom_vector_smooth","title":"Vector Field Visualizations with ggplot2","text":"Provides smoothed estimates vector fields applying statistical techniques observed vectors. Smoothing performed using multivariate linear model defined : $$ \\begin{pmatrix} \\hat{dx} \\\\ \\hat{dy} \\end{pmatrix} = \\beta_0 + \\beta_1 x + \\beta_2 y + \\beta_3 xy $$ β coefficients estimated ordinary least squares (OLS). approach captures linear interaction effects approximate underlying vector field. function also creates prediction interval around vector specified conf_level argument defaults .95. Evaluating Specific Points: evaluation points provided, smoothing performed locations prediction intervals can visualized using either wedges ellipses indicate uncertainty.  Using Wedges Visualize Uncertainty:  Grid-Based Smoothing:  Custom Grid Resolution:  Altering Confidence Level options, can change confidence level default another value using conf_level argument.","code":"eval_point <- data.frame(x = .5, y = .5)   ggplot(wind_data, aes(x = lon, y = lat, dx = dx, dy = dy)) +   geom_vector(aes(color = after_stat(NULL)), normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point) +    lims(x = c(-7,10), y = c(-3,3)) ggplot(wind_data, aes(x = lon, y = lat, dx = dx, dy = dy)) +   geom_vector(aes(color = after_stat(NULL)), normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\") ggplot(wind_data, aes(x = lon, y = lat, dx = dx, dy = dy)) +   geom_vector_smooth(pi_type = \"wedge\") +    geom_vector() ggplot(wind_data, aes(x = lon, y = lat, dx = dx, dy = dy)) +   geom_vector_smooth(n = 6, pi_type = \"wedge\") ggplot(wind_data, aes(x = lon, y = lat, dx = dx, dy = dy)) +   geom_vector(aes(color = after_stat(NULL)), normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\") +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\", conf_level = .7)"},{"path":"/index.html","id":"geom_gradient_field-and-geom_gradient_field2","dir":"","previous_headings":"Advanced Features","what":"geom_gradient_field and geom_gradient_field2","title":"Vector Field Visualizations with ggplot2","text":"geom_gradient_field function computes visualizes gradient fields derived scalar functions displays gradient vector field scalar function, f(x,y). gradient given : $$ \\nabla f(x, y) = \\left( \\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y} \\right) $$ vector field points direction greatest rate increase scalar function. function numerically evaluates partial derivatives visualizes resulting vectors. Gradient Field Norm Color:  Gradient Field Norm Length:  Adjusting Grid Density: n parameter adjusts density grid used evaluate gradient field. Decreasing n reduces number vectors producing coarser grid increasing n results finer grid vectors.","code":"paraboloid_field <- function(v) {   x <- v[1]   y <- v[2]   x^2 + y^2 }  ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_gradient_field2(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10), n = 5)"},{"path":"/index.html","id":"geom_potential","dir":"","previous_headings":"Advanced Features","what":"geom_potential","title":"Vector Field Visualizations with ggplot2","text":"potential function represents scalar field whose gradient produces vector field. used describe conservative vector fields exist curl vector field 0. geom_potential function computes visualizes scalar potential function given conservative vector field. input function must represent 2D vector field output corresponding potential function. input field conservative, function checks condition numerically based tolerance parameter. tolerance determines strictly field must satisfy conservation condition.  tolerance parameter can adjusted control sensitivity conservativeness check. Decreasing tolerance makes check stricter, increasing allows numerical error.  functions, can increase granulatity visualization n parameter.","code":"conservative_fun <- function(v) {  x <- v[1]  y <- v[2]  c(sin(x) + y, x - sin(y)) }  ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi)) ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi), tolerance = 1e-4) ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi), n = 50)"},{"path":"/index.html","id":"geom_streamplot","dir":"","previous_headings":"Advanced Features","what":"geom_streamplot","title":"Vector Field Visualizations with ggplot2","text":"geom_streamplot function generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.  chop parameter (defaulted TRUE) allows chop trajectories segments. can useful better visualization streamlines long complex. may useful break streamlines.  may also useful break streamlines segments. scale_stream parameter (defaults 1) adjusts segmentation streamlines specifying proportion streamline length used divide smaller segments.","code":"f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3), chop = FALSE) ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     chop = TRUE, scale_stream = .9,   )"},{"path":"/index.html","id":"geom_flow","dir":"","previous_headings":"Advanced Features","what":"geom_flow","title":"Vector Field Visualizations with ggplot2","text":"geom_flow function generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field, visualizing trajectory particles time. flow line traces “marble” move vector field dropped specific starting point, making intuitive way visualize dynamic systems. default, color flow line corresponds time (t), meaning color transitions along path represent progression time. flow line evolves, shows particle move time following vector field. can change coloring mapping aesthetics computed measures needed, time remains default. Flows computed using deSolve package’s ODE solver, rk4 method (fourth-order Runge-Kutta method) used numerical integration. solver ensures accurate efficient computation flow lines, abstracting away complex calculations user.  example, flow lines evolve according vector field defined f. color along line show particle moves time (t) within vector field.","code":"ggplot() +   geom_flow(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"adaptive-parameters","dir":"","previous_headings":"Advanced Features > geom_flow","what":"Adaptive Parameters","title":"Vector Field Visualizations with ggplot2","text":"Several parameters geom_flow() adaptive, meaning adjust automatically based characteristics vector field plot limits. adaptive parameters help optimize flow visualization without requiring manual tuning: threshold_distance: parameter controls minimum distance adjacent flow lines prevent overlapping. specified, calculated automatically half Euclidean distance adjacent grid points. ensures plot remains uncluttered, flow lines spaced appropriately based grid dimensions (n) axis limits (xlim, ylim). iterations: parameter defines number time steps ODE solver use tracing flow lines. higher number iterations results smoother detailed flows. iterations left NULL, computed adaptively based value T, ensuring longer time spans result iterations smoother paths. adaptive parameters allow geom_flow() create well-balanced plot dynamically adjusting precision spacing flow lines, based underlying vector field plot limits.","code":""},{"path":"/index.html","id":"example-with-custom-parameters","dir":"","previous_headings":"Advanced Features > geom_flow","what":"Example with Custom Parameters","title":"Vector Field Visualizations with ggplot2","text":"example customize grid size, number iterations, threshold distance flow lines:","code":"ggplot() +   geom_flow(     fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 1000, threshold_distance = 0.5   )"},{"path":"/index.html","id":"other-features","dir":"","previous_headings":"","what":"Other Features","title":"Vector Field Visualizations with ggplot2","text":"package provides tools analyze visualize mathematical properties vector fields. features allow users map various mathematical characteristics visual aesthetics like length color. already introduced mapping norm color geom_vector, geom_vector_field, geom_gradient_field mapping norm length function’s ‘2’ alternates. also provide similar ability functions curl divergence.","code":""},{"path":"/index.html","id":"divergence","dir":"","previous_headings":"Other Features","what":"Divergence","title":"Vector Field Visualizations with ggplot2","text":"Divergence operation vector field describes field behaves point—whether vectors “spread ” point “converge” toward . Locally, divergence vector field F ℝ2 particular point measures “outflowing-ness” rate expansion vector field around point. divergence scalar value can indicate sources (positive divergence) sinks (negative divergence). F = ⟨Fx(x,y), Fy(x,y)⟩ vector field, divergence defined : $$ \\text{div} \\, \\mathbf{F} = \\frac{\\partial F_x}{\\partial x} + \\frac{\\partial F_y}{\\partial y} $$ visualize divergence vector field, can map divergence color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(divergence)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"curl","dir":"","previous_headings":"Other Features","what":"Curl","title":"Vector Field Visualizations with ggplot2","text":"Curl measure rotation swirling behavior vector field given point. two dimensions, curl vector field F ℝ2 scalar value quantifies much vectors tend rotate circulate around point. Positive curl values indicate counterclockwise rotation, negative values represent clockwise rotation. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field, curl defined : $$ \\text{curl} \\, \\mathbf{F} = \\frac{\\partial F_y}{\\partial x} - \\frac{\\partial F_x}{\\partial y} $$ visualize curl vector field, can map curl color aesthetic.","code":"ggplot() +   geom_streamplot(     aes(color = after_stat(curl)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":[]},{"path":"/index.html","id":"animation-with-geom_streamplot","dir":"","previous_headings":"Features in Development","what":"Animation with geom_streamplot","title":"Vector Field Visualizations with ggplot2","text":"","code":"p <- ggplot() +  geom_streamplot(    aes(rownum = after_stat(rownum)),      fun = f, xlim = c(-3, 3), ylim = c(-3, 3),  ) +  coord_fixed() +  theme_bw()  anim <- animation_transition(plot = p) +     gganimate::transition_reveal(rownum) +  gganimate::ease_aes('linear')  gganimate::animate(   anim, nframes = 25, fps = 5, end_pause = 0, renderer = gganimate::gifski_renderer()   )"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions feedback, please open issue.","code":""},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"Vector Field Visualizations with ggplot2","text":"ggquiver: Quiver plots vector fields. ggarchery: Arrow segment visualizations.","code":""},{"path":"/reference/animation_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition a streamplot to an animation ready object — animation_transition","title":"Transition a streamplot to an animation ready object — animation_transition","text":"animation_transition() takes streamline plot alters work gganimate syntax.","code":""},{"path":"/reference/animation_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"animation_transition(plot)"},{"path":"/reference/animation_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition a streamplot to an animation ready object — animation_transition","text":"plot ggplot object data plot attributes extracted create animation transition.","code":""},{"path":"/reference/animation_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition a streamplot to an animation ready object — animation_transition","text":"ggplot object animation transition effect applied.","code":""},{"path":"/reference/animation_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"if (FALSE) {  library(gganimate)  # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the stream plot layer p <- ggplot() +   geom_streamplot(     aes(rownum = after_stat(rownum)),     fun = f, xlim = c(-3, 3), ylim = c(-3, 3)   ) +   coord_fixed() +   theme_bw()  # Create an animation transition plot anim <- animation_transition(plot = p) +   transition_reveal(rownum) +   ease_aes('linear')  # Animate the plot anim <- animate(anim, nframes = 25, fps = 20, end_pause = 0, renderer = gifski_renderer()) }"},{"path":"/reference/geom_complex_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Complex Vector Field Geom Layer — geom_complex_function","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"geom_complex_function() generates raster plot layer user-defined complex function. hue color corresponds argument (angle) complex number resulting function, indicating direction vector. lightness color reflects magnitude vector, providing visual representation direction intensity.","code":""},{"path":"/reference/geom_complex_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"fun user-defined function takes complex number input returns complex number. relim numeric vector length 2 giving real-axis limits. imlim numeric vector length 2 giving imaginary-axis limits. n integer specifying number grid points along axis.","code":""},{"path":"/reference/geom_complex_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"#library(ggvfields) # Example user-defined function f <- function(z) (z^2 + 1) / (z^2 - 1)  # Create a ggplot with the vector field layer #ggplot() +  # geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +  # labs(x = \"Real\", y = \"Imaginary\")"},{"path":"/reference/geom_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Flow Plot Geom Layer — geom_flow","title":"Create a Flow Plot Geom Layer — geom_flow","text":"geom_flow() generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"geom_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = c(21, 21),   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )  stat_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Flow Plot Geom Layer — geom_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length, representing vector field. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions starting points flows. iterations numeric value specifying number time steps ODE solver used flow generation. determines granularity flow paths; higher values result smoother, detailed flows. threshold_distance numeric value specifying minimum distance flows avoid overlap. provided, defaults half Euclidean distance adjacent grid points. arrow Arrow specification, created grid::arrow(), adding arrows flows.","code":""},{"path":"/reference/geom_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Flow Plot Geom Layer — geom_flow","text":"ggplot2 layer can added ggplot object produce flow plot.","code":""},{"path":"/reference/geom_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Flow Plot Geom Layer — geom_flow","text":"flows computed using deSolve package's ODE solver. rk4 method (fourth-order Runge-Kutta method) used default numerical integration flows.","code":""},{"path":"/reference/geom_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"# Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the flow plot layer ggplot() +   geom_flow(     fun = f, n = c(11, 11),     xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 100, threshold_distance = 0,     arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\")   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_gradient_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Gradient Field Plot Layer — geom_gradient_field","title":"Create a Gradient Field Plot Layer — geom_gradient_field","text":"geom_gradient_field generates vector field plot layer computing gradient user-defined scalar function grid point. function wraps geom_vector_field inherits features capabilities, automatically converting scalar field gradient vector field visualization.","code":""},{"path":"/reference/geom_gradient_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Gradient Field Plot Layer — geom_gradient_field","text":"","code":"geom_gradient_field(   mapping = NULL,   data = NULL,   stat = \"identity\",   geom = \"vector\",   ...,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   center = TRUE,   normalize = TRUE,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  stat_gradient_field(   mapping = NULL,   data = NULL,   geom = \"vector\",   ...,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   center = TRUE,   normalize = TRUE,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  geom_gradient_field2(   mapping = NULL,   data = NULL,   stat = \"identity\",   geom = \"vector\",   ...,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   center = FALSE,   normalize = TRUE,   arrow = NULL )  stat_gradient_field2(   mapping = NULL,   data = NULL,   geom = \"vector\",   ...,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   center = TRUE,   normalize = TRUE,   arrow = NULL )"},{"path":"/reference/geom_gradient_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Gradient Field Plot Layer — geom_gradient_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. ... arguments passed geom_vector_field geom_vector_field2. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined scalar function takes numeric vector (x, y) returns single numeric value, representing scalar field. xlim, ylim Numeric vectors length 2 specifying x/y-axis limits grid. n Integer specifying number grid points along axis (resolution grid). center Logical; TRUE, centers vectors grid points. normalize Logical; TRUE, normalizes vectors scaling. arrow Arrow specification created grid::arrow().","code":""},{"path":"/reference/geom_gradient_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Gradient Field Plot Layer — geom_gradient_field","text":"ggplot2 layer can added ggplot object create gradient field plot. geom_gradient_field geom_gradient_field2 wrap respective geom_vector_field functions, inheriting functionalities.","code":""},{"path":"/reference/geom_gradient_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Gradient Field Plot Layer — geom_gradient_field","text":"geom_gradient_field2 enhanced version geom_gradient_field works conjunction geom_vector_field2. includes additional features improvements advanced use cases, providing flexibility customization. gradient calculated using numDeriv::grad() grid points defined xlim ylim parameters, grid resolution controlled n. resulting vectors scaled, normalized, visualized arrows plot. Default Behavior: magnitude gradient vector (norm) mapped color aesthetic default. Vectors normalized unit length default. Set normalize = FALSE view original vector lengths. Arrowheads included default indicate direction.","code":""},{"path":"/reference/geom_gradient_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Gradient Field Plot Layer — geom_gradient_field","text":"","code":"paraboloid_field <- function(v) {   x <- v[1]   y <- v[2]   x^2 + y^2 }  saddle_field <- function(v) {   x <- v[1]   y <- v[2]   x^3 - 3 * x * y^2 }  # Visualizing a paraboloid scalar field with geom_gradient_field ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10))   # Visualizing a paraboloid scalar field with geom_gradient_field2 ggplot() +   geom_gradient_field2(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10))   # Visualizing a saddle scalar field with geom_gradient_field ggplot() +   geom_gradient_field(fun = saddle_field, xlim = c(-10, 10), ylim = c(-10, 10))   # Visualizing a saddle scalar field with geom_gradient_field2 ggplot() +   geom_gradient_field2(fun = saddle_field, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/reference/geom_gradient_field2.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","title":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","text":"geom_gradient_field2 stat_gradient_field2 extensions geom_gradient_field stat_gradient_field, providing identical functionality different default aesthetics. functions particularly useful gradient field visualizations vector length mapped vector's magnitude.","code":""},{"path":"/reference/geom_gradient_field2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","text":"","code":"geom_gradient_field2(   mapping = NULL,   data = NULL,   stat = \"identity\",   geom = \"vector\",   ...,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 16,   center = FALSE,   normalize = TRUE,   tail_point = TRUE,   arrow = NULL )  stat_gradient_field2(   mapping = NULL,   data = NULL,   stat = \"identity\",   geom = \"vector\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 16,   center = FALSE,   normalize = TRUE,   tail_point = TRUE,   arrow = NULL,   ... )"},{"path":"/reference/geom_gradient_field2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","text":"mapping Aesthetic mappings created aes() aes_(). functions ensure length = after_stat(norm) mapped default, color set \"black\" unless otherwise specified. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. ... arguments passed geom_gradient_field() stat_gradient_field(). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined scalar function takes numeric vector (x, y) returns single numeric value, representing scalar field. xlim, ylim Numeric vectors length 2 specifying x/y-axis limits grid. n Integer specifying number grid points along axis (resolution grid). center Logical; TRUE, centers vectors respective grid points. normalize Logical; TRUE, normalizes vectors unit length. Set FALSE view original lengths vectors. tail_point Logical; TRUE, adds small point tail vector help indicate starting point. arrow Arrow specification, created grid::arrow(), add arrowheads vectors.","code":""},{"path":"/reference/geom_gradient_field2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","text":"ggplot2 layer can added ggplot object create gradient field plot.","code":""},{"path":"/reference/geom_gradient_field2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","text":"Default Behavior: Length automatically mapped vector norm (length = after_stat(norm)), emphasizing vector magnitude length vector plot. Color set \"black\" default, ensuring uniform appearance across vectors. Users can override wish map another variable color. Additional Parameters: center set FALSE default, vectors start specified (x, y) coordinates. tail_point set TRUE default, adding small point tail vector help indicate starting point. arrow set NULL, users can specify arrow using grid::arrow() add custom arrowheads.","code":""},{"path":[]},{"path":"/reference/geom_gradient_field2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Gradient Field Plot Layer with Length Mapped to Norm — geom_gradient_field2","text":"","code":"library(ggvfields)  paraboloid_field <- function(v) {   x <- v[1]   y <- v[2]   x^2 + y^2 }  saddle_field <- function(v) {   x <- v[1]   y <- v[2]   x^3 - 3 * x * y^2 }  ggplot() +   geom_gradient_field2(fun = paraboloid_field)   ggplot() +   geom_gradient_field2(fun = saddle_field)"},{"path":"/reference/geom_potential.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"geom_potential() adds raster layer ggplot object, visualizing potential function derived conservative vector field. computes potential numerically specified grid displays heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"","code":"geom_potential(   mapping = NULL,   data = NULL,   stat = StatPotential,   geom = GeomPotential,   ...,   inherit.aes = TRUE,   show.legend = NA,   position = \"identity\",   fun,   xlim = NULL,   ylim = NULL,   n = 21,   tolerance = 1e-06 )  StatPotential  GeomPotential"},{"path":"/reference/geom_potential.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"object class StatPotential (inherits Stat, ggproto, gg) length 3. object class GeomPotential (inherits GeomRaster, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_potential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. NULL, default, data inherited plot data specified call ggplot(). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. fun function takes numeric vector length 2 (c(x, y)) returns numeric vector length 2 (c(dx, dy)), defining vector field. xlim, ylim Numeric vectors length 2 defining domain limits x/y-axis. n Integer, number grid points along axis. Defaults 21. tolerance Numeric value specifying tolerance level verifying vector field conservative. Defaults 1e-6.","code":""},{"path":"/reference/geom_potential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"ggplot2 layer can added ggplot object produce potential function heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"","code":"# Define a conservative vector field function library(ggvfields) fun <- function(v) { x <- v[1] y <- v[2] c(sin(x) + y, x - sin(y)) }  # Define domain limits xlim <- c(-pi, pi) ylim <- c(-pi, pi)  # Create the potential function heatmap ggplot() +   geom_potential(fun = fun, xlim = xlim, ylim = ylim)"},{"path":"/reference/geom_streamplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Plot Geom Layer — geom_streamplot","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"geom_streamplot() generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"geom_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1 )  stat_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1 )"},{"path":"/reference/geom_streamplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions. mask_shape_type character string specifying mask shape type: \"square\", \"diamond\", \"inset_square\", \"circle\". iterations integer specifying number steps perform numerical integration flow. stream_density numeric value controls density streamlines. Higher values produce streamlines. Default 1. arrow Arrow specification, created grid::arrow(). chop logical value indicating whether chop trajectories segments. scale_stream numeric value specifying maximum allowable segment size fraction total range chopping trajectories.","code":""},{"path":"/reference/geom_streamplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"ggplot2 layer can added ggplot object produce stream plot.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"# Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) } ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3), n = c(15, 15),     iterations = 100, chop = TRUE, scale_stream = 1,     mask_shape_type = \"square\"   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Plot Layer — geom_vector","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector() generates ggplot layer visualizes vectors line segments optional arrowheads. Vectors defined start coordinates (x, y) either directional components (dx, dy) polar coordinates (angle distance).","code":""},{"path":"/reference/geom_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"geom_vector(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2 )  stat_vector(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2 )  StatVector  GeomVector"},{"path":"/reference/geom_vector.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Vector Plot Layer — geom_vector","text":"object class StatVector (inherits Stat, ggproto, gg) length 3. object class GeomVector (inherits Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Plot Layer — geom_vector","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). arrow Arrow specification adding arrowheads vectors, created grid::arrow(). Controls arrowhead angle, length, type. center Logical; TRUE, vector centered (x, y) location. FALSE, vector originates (x, y) location. centered, midpoint vector aligns original (x, y) position. normalize Logical; TRUE, normalizes vector unit length applying scaling. can help prevent overplotting dense plots ensures consistent visual representation. tail_point Logical; TRUE, adds point tail vector mark starting position clearly. tail_point.size Numeric value indicating size tail point tail_point = TRUE. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Plot Layer — geom_vector","text":"ggplot2 layer can added ggplot object produce vector plot.","code":""},{"path":"/reference/geom_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Plot Layer — geom_vector","text":"geom designed situations vector data already available (e.g., wind directions speeds known locations). need generate vector field user-defined function specified grid (can compute divergence curl), consider using geom_vector_field().","code":""},{"path":"/reference/geom_vector.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector() understands following aesthetics (required aesthetics bold): x: x-coordinate vector's start (center) point. y: y-coordinate vector's start (center) point. dx: vector's x-component displacement. dy: vector's y-component displacement. angle (radians): angle vector, used distance. distance: magnitude vector, used angle. length: displayed length vector plot. default, vector drawn actual data-defined size. modify , can: Assign constant length: aes(length = 0.5) (example). Scale length computed statistic, aes(length = after_stat(norm)) represent vector's magnitude. color: default, color = after_stat(norm) map magnitude vector color, providing visual cue vector strength. fill: Fill color arrowheads tail points. linewidth: thickness vector line. linetype: type line (e.g., solid, dashed). alpha: transparency level vector.","code":""},{"path":"/reference/geom_vector.html","id":"key-notes","dir":"Reference","previous_headings":"","what":"Key Notes","title":"Create a Vector Plot Layer — geom_vector","text":"Default Color Mapping: default maps vector magnitude (norm) color. makes stronger (longer) vectors visually prominent. override behavior, specify aes(color = \"black\") another fixed color. Scaling Length: default, vectors drawn data-defined size. scale vector's magnitude, use aes(length = after_stat(norm)). shortcut, geom_vector2() automatically maps magnitude length.","code":""},{"path":"/reference/geom_vector.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector() computes: norm: magnitude vector, \\(\\sqrt{dx^2 + dy^2}\\).","code":""},{"path":"/reference/geom_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"set.seed(1234) n <- 10 wind_data <- data.frame(   lon = rnorm(n),   lat = rnorm(n),   wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2),   dx = rchisq(n, df = 2) * cos(runif(n, -pi, pi)),   dy = rchisq(n, df = 2) * sin(runif(n, -pi, pi)) )  # Basic vector plot using dx and dy ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy))   # Using angle and distance instead of dx, dy ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))   # To scale vector length by magnitude, use geom_vector2() ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, dx = dx, dy = dy))   # Manually map length to norm ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(norm)))"},{"path":"/reference/geom_vector2.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"geom_vector2 stat_vector2 extensions geom_vector stat_vector. functions provide identical functionality change default behavior map vector norm (magnitude) length aesthetic instead color.","code":""},{"path":"/reference/geom_vector2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"","code":"geom_vector2(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   tail_point = TRUE,   arrow = NULL )  stat_vector2(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   tail_point = TRUE,   arrow = NULL )"},{"path":"/reference/geom_vector2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"mapping Aesthetic mappings created aes() aes_(). functions ensure length = after_stat(norm) mapped default, color set NULL unless otherwise specified. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed geom_vector() stat_vector(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). center Logical; TRUE, centers vector specified (x, y) location. Default FALSE, meaning vector starts specified (x, y) point. tail_point Logical; TRUE, adds point mark tail vector. Default TRUE geom_vector2, providing small marker tail. arrow Arrow specification vector arrowheads, created grid::arrow(). Controls appearance arrowheads, including angle, length, type. Default NULL. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"ggplot2 layer can added ggplot object.","code":""},{"path":"/reference/geom_vector2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"useful want vector's magnitude visually emphasized length rather color. functions also disable default color mapping, setting vectors black unless otherwise specified. default, geom_vector2 stat_vector2 length = after_stat(norm) mapped, color set NULL, tail_point set TRUE, adds small marker tail vector. Additionally, center set FALSE, meaning vectors start specified (x, y) coordinates rather centering . arrow parameter set NULL default, allowing users specify custom arrow types desired.","code":""},{"path":[]},{"path":"/reference/geom_vector2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"","code":"set.seed(1234) n <- 10 wind_data <- data.frame(   lon = rnorm(n),   lat = rnorm(n),   wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2),   dx = rchisq(n, df = 2) * cos(runif(n, -pi, pi)),   dy = rchisq(n, df = 2) * sin(runif(n, -pi, pi)) )  ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, dx = dx, dy = dy))   # Example with Polar Coordinates ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer — geom_vector_field","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"geom_vector_field() generates vector field plot layer user-defined function fun computes vector displacements (dx, dy) specified domain.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"geom_vector_field(   mapping = NULL,   data = NULL,   stat = StatVector,   geom = GeomVector,   ...,   position = \"identity\",   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   fun = NULL,   args = list(),   xlim = NULL,   ylim = NULL,   n = NULL,   show.legend = NA,   inherit.aes = TRUE )  stat_vector_field(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun = NULL,   xlim = c(-1, 1),   ylim = c(-1, 1),   args = list(),   n = 11,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. ... Additional arguments passed layer(). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. center Logical; TRUE, centers vectors grid points. normalize Logical; TRUE, normalizes vectors scaling. tail_point Logical; TRUE, adds point tail vector. tail_point.size Numeric; size tail point tail_point = TRUE. arrow Arrow specification created grid::arrow(). fun function takes vector (x, y) returns (dx, dy), defining vector displacements. args named list additional arguments pass fun. example, function signature function(v, scale = 1), can supply args = list(scale = 2) change scale parameter. xlim, ylim Numeric vectors length 2 defining domain limits x/y-axis. n Integer, number grid points along axis. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed.","code":""},{"path":"/reference/geom_vector_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"Domain Determined: provide data aes(x, y), domain inferred data. also specify xlim ylim, override domain inferred data. provide data, supply fun, xlim, ylim, geom_vector_field() generates grid points within limits. data provided without aes(x, y) mapped, must provide xlim ylim domain can determined. Default Behavior: magnitude vector (norm) mapped color default, emphasizing vector strength. Vector lengths scaled 90% grid spacing. Vectors normalized unit length scaling. see original lengths, set normalize = FALSE. Arrowheads included default.","code":""},{"path":"/reference/geom_vector_field.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"norm \\(\\sqrt{dx^2 + dy^2}\\): Magnitude vector. divergence \\(\\frac{\\partial f_1}{\\partial x} + \\frac{\\partial f_2}{\\partial y}\\): Divergence. curl \\(\\frac{\\partial f_2}{\\partial x} - \\frac{\\partial f_1}{\\partial y}\\): Curl.","code":""},{"path":"/reference/geom_vector_field.html","id":"aesthetic-mappings","dir":"Reference","previous_headings":"","what":"Aesthetic mappings","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"norm, divergence, curl can mapped after_stat().","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"# Example user-defined vector field function with a small random error f <- function(v) {   x <- v[1]   y <- v[2]   c(x + y, y - x) }  set.seed(1234) n <- 10 wind_data <- data.frame(   lon = rnorm(n),   lat = rnorm(n) )  # Apply function f to each row to compute dx and dy with error wind_data[, c(\"dx\", \"dy\")] <- t(apply(wind_data[, c(\"lon\", \"lat\")], 1, f))  ### 1. No data provided: #    `fun`, `xlim`, and `ylim` define the domain. #    The layer generates a grid of points within (-5,5) for x and y. ggplot() +   geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5))   ### 2. With data provided: #    Create sample data and compute dx, dy using function f with error. # Plot data's own vectors and add a computed vector field ggplot(wind_data, aes(x = lon, y = lat)) +   geom_vector(aes(dx = dx, dy = dy), color = \"black\") +   geom_vector_field(fun = f)   ### 3. With data provided but overriding with xlim and ylim: #    Supply `xlim` and `ylim` so the domain is determined by these limits instead of the data. ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy), color = \"black\", normalize = FALSE) +   geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5))   ### 4. Passing additional arguments to `fun` using `args`: #    Suppose we define a rotation-like field with a tunable scale: f_scale <- function(v, scale = 1) {   x <- v[1]; y <- v[2]   scale * c(-y, x) }  #    Now we can pass 'scale' via args = list(scale = 10): ggplot() +   geom_vector_field(     fun = f_scale,     xlim = c(-5, 5), ylim = c(-5, 5),     args = list(scale = 10), # <- pass scale to fun     color = \"blue\"   ) +   coord_fixed()"},{"path":"/reference/geom_vector_field2.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"geom_vector_field2() stat_vector_field2() extensions geom_vector_field() stat_vector_field(), providing identical functionality different default aesthetics. functions particularly useful vector field visualizations vector length mapped vector's magnitude.","code":""},{"path":"/reference/geom_vector_field2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"","code":"geom_vector_field2(   mapping = NULL,   data = NULL,   stat = StatVector,   geom = GeomVector,   ...,   position = \"identity\",   center = FALSE,   normalize = TRUE,   tail_point = TRUE,   tail_point.size = 2,   arrow = NULL,   fun = NULL,   xlim = NULL,   ylim = NULL,   n = NULL,   show.legend = NA,   inherit.aes = TRUE )  stat_vector_field2(   mapping = NULL,   data = NULL,   geom = GeomVector,   stat = StatVector,   ...,   position = \"identity\",   center = FALSE,   normalize = TRUE,   tail_point = TRUE,   tail_point.size = 2,   arrow = NULL,   fun = NULL,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = 11,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_vector_field2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"mapping Aesthetic mappings created aes() aes_(). functions ensure length = after_stat(norm) mapped default leave color unset, allowing user customization. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. ... arguments passed geom_vector_field() stat_vector_field(). position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. center Logical; TRUE, centers vectors grid points. Defaults FALSE . normalize Logical; TRUE, normalizes vectors scaling. tail_point Logical; TRUE, small point added tail vector. Defaults TRUE. tail_point.size Numeric; size tail point tail_point = TRUE. arrow Arrow specification created grid::arrow(). Defaults NULL. fun function takes vector (x, y) returns (dx, dy), defining vector displacements. xlim, ylim Numeric vectors length 2 defining domain limits x/y-axis. n Integer, number grid points along axis. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_vector_field2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"ggplot2 layer can added ggplot object create vector field plot.","code":""},{"path":"/reference/geom_vector_field2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"Default Behavior: Length automatically mapped vector norm (length = after_stat(norm)) vector magnitude emphasized vector length plot. Color defaults NULL, allowing user set fixed color another aesthetic desired. leaving color unset, override geom_vector_field default maps color = after_stat(norm) unless specify . Additional Parameters: center set FALSE default, vectors start specified (x, y) coordinates rather centered. tail_point set TRUE, adding small point tail vector help indicate starting point. arrow set NULL default. Users can specify custom arrow using grid::arrow() add arrowheads.","code":""},{"path":[]},{"path":"/reference/geom_vector_field2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"","code":"# Example user-defined vector field function f <- function(v) {   x <- v[1]; y <- v[2]   c(x + y, y - x) }  # Create a vector field plot with geom_vector_field2: ggplot() +   geom_vector_field2(fun = f, xlim = c(-5, 5), ylim = c(-5, 5))"},{"path":"/reference/geom_vector_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smooth Vector Plot Layer — geom_vector_smooth","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth generates ggplot layer visualizes smooth vector field. uses raw vector data applies smoothing techniques estimate underlying vector field. functionality similar geom_smooth() ggplot2, designed specifically vector data rather scalar data.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"stat_vector_smooth(   mapping = NULL,   data = NULL,   geom = \"vector_smooth\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   method = \"lm\",   se = TRUE,   se.circle = TRUE,   conf_level = c(0.95, NA),   pi_type = \"ellipse\",   formula = cbind(dx, dy) ~ x * y,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   eval_points = NULL )  geom_vector_smooth(   mapping = NULL,   data = NULL,   stat = \"vector_smooth\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   method = \"lm\",   se = TRUE,   se.circle = TRUE,   pi_type = \"ellipse\",   conf_level = c(0.95, NA),   formula = cbind(dx, dy) ~ x * y,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   eval_points = NULL )  StatVectorSmooth  GeomVectorSmooth"},{"path":"/reference/geom_vector_smooth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"object class StatVectorSmooth (inherits Stat, ggproto, gg) length 5. object class GeomVectorSmooth (inherits GeomSegment, Geom, ggproto, gg) length 6.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). n integer vector specifying number grid points along axis smoothing. method Character; specifies smoothing method use. supported method \"lm\", fits multivariate linear model predict vector displacements dx dy based coordinates x y. se Logical; TRUE, confidence intervals plotted around smoothed vectors. se.circle Logical; TRUE, circles drawn around origin vectors represent radius confidence interval. feature useful se = TRUE. conf_level Numeric vector; specifies confidence levels prediction intervals se = TRUE. Default conf_level = 0.95. pi_type Character; determines prediction intervals displayed around smoothed vectors. Two options available: \"wedge\": Displays angular wedges indicate uncertainty direction magnitude vectors. Wedges show range possible vector orientations lengths. \"ellipse\": Uses ellipses depict prediction intervals, reflecting covariance vector components (dx dy). Ellipses provide visual representation joint uncertainty vector directions. default \"wedge\". pi_type set \"ellipse\" eval_points NULL, function switches pi_type \"wedge\" ensure proper interval representation. formula formula specifying multivariate linear model used smoothing. default formula cbind(dx, dy) ~ x * y. arrow Arrow specification created grid::arrow(). parameter controls appearance arrowheads ends vectors, including angle, length, type. eval_points Data frame evaluation points, NULL. provided, specifies grid points smoothing model evaluated. NULL, function generates grid based n. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"ggplot2 layer can added ggplot object create smooth vector field plot.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"Multivariate Linear Model: \"lm\" method fits multivariate linear model predict vector displacements dx dy based input coordinates x y. model includes interaction terms (x * y) capture complex relationships vector field. Prediction Intervals: Two types prediction intervals supported: Ellipse: Ellipses used represent covariance predicted dx dy values. size orientation ellipses illustrate uncertainty vector magnitude correlation vector components. Wedge: Wedges angular sectors indicate range possible directions lengths vectors. type prediction interval provides intuitive visualization uncertainty vector orientation. intervals computed using confidence level specified conf_level parameter.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth supports following aesthetics (required aesthetics bold): x: x-coordinate vector's starting point. y: y-coordinate vector's starting point. dx: vector's displacement along x-axis. dy: vector's displacement along y-axis. color: color vector line. linewidth: thickness vector line. linetype: type vector line (e.g., solid dashed). alpha: transparency level vector. arrow: Specifies arrowheads vectors.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"# Function to generate vectors generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(     sin(x) + sin(y) + rnorm(1, 5, 1),     sin(x) - sin(y) - rnorm(1, 5, 1)   ) }  # Set seed for reproducibility set.seed(123)  # Create sample points and compute vectors sample_points <- data.frame(   x = runif(30, 0, 10),   y = runif(30, 0, 10) )  result <- t(apply(sample_points, 1, generate_vectors))  sample_points$xend <- result[, 1] sample_points$yend <- result[, 2] sample_points$dx <- sample_points$xend - sample_points$x sample_points$dy <- sample_points$yend - sample_points$y sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2) sample_points$angle <- atan2(sample_points$dy, sample_points$dx)  # Define evaluation points eval_points <- data.frame(   x = c(0, 7.5),   y = c(10, 5) )  # Example 1: ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(dx = dx, dy = dy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(dx = dx, dy = dy), n = 5) +   ggtitle(\"Smoothed Vector Field\") #> eval_points is NULL; changing pi_type from 'ellipse' to 'wedge'.   # Example 2: Ellipse with eval_points ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(dx = dx, dy = dy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(dx = dx, dy = dy), eval_points = eval_points, conf_level = c(0.9)) +   ggtitle(\"Smoothed Vector Field with Ellipse Intervals\")   # Example 3: Wedge with eval_points ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(dx = dx, dy = dy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(dx = dx, dy = dy), eval_points = eval_points, pi_type = \"ellipse\") +   ggtitle(\"Smoothed Vector Field with Wedge Intervals\")"},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Continuous Scale for Vector Length — scale_length_continuous","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous provides continuous scale controlling length aesthetic ggplot. particularly useful working vector plots vector lengths mapped continuous scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(max_range = 0.5, ...)"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"max_range maximum value input rescaled. Numeric scalar specifying upper bound output range. 0 1. ... arguments passed continuous_scale().","code":""}]
