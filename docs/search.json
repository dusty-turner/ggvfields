[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney X. Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2025). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney X. Sturdivant},   year = {2025},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":"/index.html","id":"ggvfields-","dir":"","previous_headings":"","what":"Vector Field Visualizations with ggplot2","title":"Vector Field Visualizations with ggplot2","text":"ggvfields powerful package visualizing vector fields, stream plots, related visualizations. provides tools explore directional data, including options vector smoothing, gradient fields, potential visualizations, dynamic flow representations.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"Install ggvfields directly GitHub: Load package R: Generate sample wind data:","code":"remotes::install_github(\"dusty-turner/ggvfields\") library(\"ggvfields\") #> Loading required package: ggplot2 options(ggplot2.continuous.colour=\"viridis\") set.seed(1234) n <- 10  wind_data <- data.frame(   lon = rnorm(n),    lat = rnorm(n),    dir = runif(n, -pi/4, pi/4),   spd = rchisq(n, df = 2) ) |>    within({     fx    <- spd * cos(dir)          # Compute the x-component of the vector     fy    <- spd * sin(dir)          # Compute the y-component of the vector     xend  <- lon + fx                # Compute the end x-coordinate     yend  <- lat + fy                # Compute the end y-coordinate   })  round(wind_data, digits = 2)  #>      lon   lat   dir   spd  yend  xend    fy    fx #> 1  -1.21 -0.48  0.08  3.55 -0.18  2.33  0.30  3.53 #> 2   0.28 -1.00  0.23  2.19 -0.50  2.41  0.50  2.13 #> 3   1.08 -0.78 -0.30  2.99 -1.65  3.94 -0.87  2.86 #> 4  -2.35  0.06  0.19 10.81  2.12  8.26  2.06 10.61 #> 5   0.43  0.96 -0.27  3.45  0.05  3.75 -0.91  3.33 #> 6   0.51 -0.11  0.00  3.91 -0.10  4.41  0.01  3.91 #> 7  -0.57 -0.51  0.28  0.16 -0.47 -0.42  0.04  0.15 #> 8  -0.55 -0.91 -0.02  0.42 -0.92 -0.12 -0.01  0.42 #> 9  -0.56 -0.84 -0.40  0.42 -1.00 -0.18 -0.16  0.38 #> 10 -0.89  2.42  0.42  4.17  4.11  2.92  1.69  3.81"},{"path":[]},{"path":"/index.html","id":"geom_vector-and-geom_vector2","dir":"","previous_headings":"Core Features","what":"geom_vector and geom_vector2","title":"Vector Field Visualizations with ggplot2","text":"functions allow flexible visualizations vector data. geom_vector: default, maps norm (magnitude) vector color. helps compare relative magnitudes visually color gradients. Users need explicitly specify unless overriding default behavior.  geom_vector also supports xend/yend format well dx/dy format.  geom_vector2: Maps norm vector directly length. provides intuitive representation magnitude. done mapping length = after_stat(norm) default.","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, xend = xend, yend = yend)) ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, fx = fx, fy = fy)) ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, fx = fx, fy = fy))"},{"path":"/index.html","id":"why-length-mapping-matters","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Why Length Mapping Matters","title":"Vector Field Visualizations with ggplot2","text":"Mapping vector lengths norms allows viewers immediately understand magnitude differences without relying solely color. norm w = (u, v) calculated $$|\\mathbf{w}| = \\sqrt{u^2 + v^2}$$ . feature geom_vector2 enhances interpretability using actual vector lengths represent magnitude. legend reflects scaling ensures consistent interpretation.","code":""},{"path":"/index.html","id":"polar-coordinates-support","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Polar Coordinates Support","title":"Vector Field Visualizations with ggplot2","text":"geom_vector geom_vector2 also support polar coordinates, vectors specified using magnitude (distance) direction (angle). Instead providing Cartesian components (dx, dy xend, yend), users can directly supply polar data. feature simplifies workflows directional data works subsequent relevant functions handle polar coordinates. Polar coordinates can visualized like :","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, distance = spd, angle = dir))"},{"path":"/index.html","id":"normalize-and-center","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Normalize and Center","title":"Vector Field Visualizations with ggplot2","text":"Two important options geom_vector subsequent functions normalize center - default TRUE. options help control visual representation vectors: normalize: set TRUE, option scales vector unit length, can help avoid overplotting dense vector fields. especially useful direction vectors important magnitude. However, ’s important note normalize different mapping norm vector length aesthetic. normalization ensures vectors visually uniform length, mapping norm length preserves relative differences magnitude varying vector lengths based actual norms. center: default, center also set TRUE, meaning midpoint vector placed corresponding (x, y) coordinate, effectively “centering” vector point. center FALSE, base vector anchored (x, y) point, vector extends outward . example turns default behavior:","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, fx = fx, fy = fy), center = FALSE, normalize = FALSE)"},{"path":"/index.html","id":"geom_vector_field-and-geom_vector_field2","dir":"","previous_headings":"Core Features","what":"geom_vector_field and geom_vector_field2","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field: Computes vector fields user-defined function maps norm color.  geom_vector_field2: Similar geom_vector_field, maps norm vectors lengths instead color.","code":"f <- function(v) c(-v[2], v[1]) # Define a function for the vector field  ggplot() +   geom_vector_field(fun = f)  #> Warning: No xlim provided or inherited; defaulting to c(-1, 1). #> Warning: No ylim provided or inherited; defaulting to c(-1, 1). ggplot() +   geom_vector_field2(fun = f)  #> Warning: No xlim provided or inherited; defaulting to c(-1, 1). #> Warning: No ylim provided or inherited; defaulting to c(-1, 1)."},{"path":"/index.html","id":"automatic-limit-detection","dir":"","previous_headings":"Core Features > geom_vector_field and geom_vector_field2","what":"Automatic Limit Detection","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field geom_vector_field2 can automatically determine plot limits based function provided. happens data exists previous layers base ggplot object. allows limits inferred context. Customize limits xlim ylim parameters needed control.","code":"ggplot(data = wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector() +   geom_vector_field(fun = f) # Automatically determines limits based on existing data"},{"path":"/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced Features","title":"Vector Field Visualizations with ggplot2","text":"section introduces tools deeper exploration vector fields, allowing users analyze properties smoothness, uncertainty, gradients, potential functions. tools provide mathematical insights structure vector fields extend visualization capabilities beyond basic representations. Key capabilities include: Smoothing Vector Fields: Approximate trends noisy vector data compute prediction intervals uncertainty visualization. Gradient Potential Analysis: Derive gradient fields study scalar variations visualize potential functions identify conservative fields. Dynamic Flow Stream Plots: Model particle trajectories visualize dynamic behavior time-dependent fields. Mathematical Feature Mapping: Display vector norms, divergence, curl highlight flow strength, expansion, rotational behavior.","code":""},{"path":"/index.html","id":"geom_vector_smooth","dir":"","previous_headings":"Advanced Features","what":"geom_vector_smooth","title":"Vector Field Visualizations with ggplot2","text":"Provides smoothed estimates vector fields applying statistical techniques observed vectors. Smoothing performed using multivariate linear model defined : $$ \\begin{pmatrix} \\hat{dx} \\\\ \\hat{dy} \\end{pmatrix} = \\beta_0 + \\beta_1 x + \\beta_2 y + \\beta_3 xy $$ β coefficients estimated ordinary least squares (OLS). approach captures linear interaction effects approximate underlying vector field. function also creates prediction interval around vector specified conf_level argument defaults .95. Evaluating Specific Points: evaluation points provided, smoothing performed locations prediction intervals can visualized using either wedges ellipses indicate uncertainty.  Using Wedges Visualize Uncertainty:  Grid-Based Smoothing:  Custom Grid Resolution:  Altering Confidence Level options, can change confidence level default another value using conf_level argument.","code":"eval_point <- data.frame(x = .5, y = .5)   ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(aes(color = after_stat(NULL)), normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point) +   lims(x = c(-7,10), y = c(-3,3)) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_stream()`). ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(aes(color = after_stat(NULL)), normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\") ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector_smooth(pi_type = \"wedge\") +    geom_vector() ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector_smooth(n = 6, pi_type = \"wedge\") ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(aes(color = after_stat(NULL)), normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\") +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\", conf_level = .7)"},{"path":"/index.html","id":"geom_gradient_field-and-geom_gradient_field2","dir":"","previous_headings":"Advanced Features","what":"geom_gradient_field and geom_gradient_field2","title":"Vector Field Visualizations with ggplot2","text":"geom_gradient_field function computes visualizes gradient fields derived scalar functions displays gradient vector field scalar function, f(x, y). gradient given : $$ \\nabla f(x, y) = \\left( \\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y} \\right) $$ vector field points direction greatest rate increase scalar function. function numerically evaluates partial derivatives visualizes resulting vectors. Gradient Field Norm Color:  Gradient Field Norm Length:  Adjusting Grid Density: n parameter adjusts density grid used evaluate gradient field. Decreasing n reduces number vectors producing coarser grid increasing n results finer grid vectors.","code":"paraboloid_field <- function(v) {   x <- v[1]   y <- v[2]   x^2 + y^2 }  ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_gradient_field2(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10), n = 5)"},{"path":"/index.html","id":"geom_potential","dir":"","previous_headings":"Advanced Features","what":"geom_potential","title":"Vector Field Visualizations with ggplot2","text":"potential function represents scalar field whose gradient produces vector field. used describe conservative vector fields exist curl vector field 0. geom_potential function computes visualizes scalar potential function given conservative vector field. input function must represent 2D vector field output corresponding potential function. input field conservative, function checks condition numerically based tolerance parameter. tolerance determines strictly field must satisfy conservation condition.  tolerance parameter can adjusted control sensitivity conservativeness check. Decreasing tolerance makes check stricter, increasing allows numerical error.  functions, can increase granulatity visualization n parameter.","code":"conservative_fun <- function(v) {  x <- v[1]  y <- v[2]  c(sin(x) + y, x - sin(y)) }  ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi)) ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi), tolerance = 1e-4) ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi), n = 50)"},{"path":"/index.html","id":"geom_streamplot","dir":"","previous_headings":"Advanced Features","what":"geom_streamplot","title":"Vector Field Visualizations with ggplot2","text":"geom_streamplot function generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.  chop parameter (defaulted TRUE) allows chop trajectories segments. can useful better visualization streamlines long complex. may useful break streamlines.  may also useful break streamlines segments. scale_stream parameter (defaults 1) adjusts segmentation streamlines specifying proportion streamline length used divide smaller segments.","code":"f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3), chop = FALSE) ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     chop = TRUE, scale_stream = .9,   )"},{"path":"/index.html","id":"geom_flow","dir":"","previous_headings":"Advanced Features","what":"geom_flow","title":"Vector Field Visualizations with ggplot2","text":"geom_flow function generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field, visualizing trajectory particles time. flow line traces “marble” move vector field dropped specific starting point, making intuitive way visualize dynamic systems. default, color flow line corresponds time (t), meaning color transitions along path represent progression time. flow line evolves, shows particle move time following vector field. can change coloring mapping aesthetics computed measures needed, time remains default. Flows computed using deSolve package’s ODE solver, rk4 method (fourth-order Runge-Kutta method) used numerical integration. solver ensures accurate efficient computation flow lines, abstracting away complex calculations user.  example, flow lines evolve according vector field defined f. color along line show particle moves time (t) within vector field.","code":"ggplot() +   geom_flow(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"adaptive-parameters","dir":"","previous_headings":"Advanced Features > geom_flow","what":"Adaptive Parameters","title":"Vector Field Visualizations with ggplot2","text":"Several parameters geom_flow() adaptive, meaning adjust automatically based characteristics vector field plot limits. adaptive parameters help optimize flow visualization without requiring manual tuning: threshold_distance: parameter controls minimum distance adjacent flow lines prevent overlapping. specified, calculated automatically half Euclidean distance adjacent grid points. ensures plot remains uncluttered, flow lines spaced appropriately based grid dimensions (n) axis limits (xlim, ylim). iterations: parameter defines number time steps ODE solver use tracing flow lines. higher number iterations results smoother detailed flows. iterations left NULL, computed adaptively based value T, ensuring longer time spans result iterations smoother paths. adaptive parameters allow geom_flow() create well-balanced plot dynamically adjusting precision spacing flow lines, based underlying vector field plot limits.","code":""},{"path":"/index.html","id":"example-with-custom-parameters","dir":"","previous_headings":"Advanced Features > geom_flow","what":"Example with Custom Parameters","title":"Vector Field Visualizations with ggplot2","text":"example customize grid size, number iterations, threshold distance flow lines:","code":"ggplot() +   geom_flow(     fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 1000, threshold_distance = 0.5   )"},{"path":"/index.html","id":"other-features","dir":"","previous_headings":"","what":"Other Features","title":"Vector Field Visualizations with ggplot2","text":"package provides tools analyze visualize mathematical properties vector fields. features allow users map various mathematical characteristics visual aesthetics like length color. already introduced mapping norm color geom_vector, geom_vector_field, geom_gradient_field mapping norm length function’s ‘2’ alternates. also provide similar ability functions curl divergence.","code":""},{"path":"/index.html","id":"divergence","dir":"","previous_headings":"Other Features","what":"Divergence","title":"Vector Field Visualizations with ggplot2","text":"Divergence operation vector field describes field behaves point—whether vectors “spread ” point “converge” toward . Locally, divergence vector field F ℝ2 particular point measures “outflowing-ness” rate expansion vector field around point. divergence scalar value can indicate sources (positive divergence) sinks (negative divergence). F = ⟨Fx(x, y), Fy(x, y)⟩ vector field, divergence defined : $$ \\text{div} \\, \\mathbf{F} = \\frac{\\partial F_x}{\\partial x} + \\frac{\\partial F_y}{\\partial y} $$ visualize divergence vector field, can map divergence color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(divergence)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"curl","dir":"","previous_headings":"Other Features","what":"Curl","title":"Vector Field Visualizations with ggplot2","text":"Curl measure rotation swirling behavior vector field given point. two dimensions, curl vector field F ℝ2 scalar value quantifies much vectors tend rotate circulate around point. Positive curl values indicate counterclockwise rotation, negative values represent clockwise rotation. F = ⟨Fx(x, y), Fy(x, y)⟩ vector field, curl defined : $$ \\text{curl} \\, \\mathbf{F} = \\frac{\\partial F_y}{\\partial x} - \\frac{\\partial F_x}{\\partial y} $$ visualize curl vector field, can map curl color aesthetic.","code":"ggplot() +   geom_streamplot(     aes(color = after_stat(curl)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions feedback, please open issue.","code":""},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"Vector Field Visualizations with ggplot2","text":"ggquiver: Quiver plots vector fields. ggarchery: Arrow segment visualizations.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ggvfields authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/efield.html","id":null,"dir":"Reference","previous_headings":"","what":"Electric field — efield","title":"Electric field — efield","text":"vector field generated collection fixed electrical charges, dictated Coulomb's law. function mainly used provide examples visualizing vector fields ggvfields.","code":""},{"path":"/reference/efield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electric field — efield","text":"","code":"efield(u, charge_positions, charges, k = 1, q_test = +1)  efield_maker(   charge_positions = rbind(c(-1, -1), c(1, 1)),   charges = c(-1, +1),   k = 1,   q_test = +1 )"},{"path":"/reference/efield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Electric field — efield","text":"u position test charge. charge_positions positions fixed charges generating electric field. Defaulted efield_maker(). charges charges points placed positions charge_positions. Defaulted efield_maker(). k constant proportionality, defaulted 1. See examples rigorous use physical constants. q_test test charge, defaulted +1.","code":""},{"path":"/reference/efield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Electric field — efield","text":"vector containing force felt test charge account electric field.","code":""},{"path":[]},{"path":"/reference/efield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Electric field — efield","text":"","code":"if (FALSE) { # set a - charge at (-1,-1) and a + charge at (1,1) charge_positions <- rbind(c(-1,-1), c(1,1)) charges <- c(-1, +1)   # calculate force on test charge (+1) at c(0,1), ignoring physical constants efield(c(0,1), charge_positions, charges)   # efield_maker() simply wraps this function, defaulting to those charges f <- efield_maker() f(c(0,1))  ggplot() +   geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +   scale_color_viridis_c(trans = \"log10\")  # electric constant from https://en.wikipedia.org/wiki/Vacuum_permittivity ep0 <- 8.854187818814e-12 k <- (4*pi*ep0)^-1 efield(c(0,1), charge_positions, charges, k) }"},{"path":"/reference/generate_hexagonal_lattice.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Hexagonal Lattice — generate_hexagonal_lattice","title":"Generate a Hexagonal Lattice — generate_hexagonal_lattice","text":"function generates hexagonal lattice points within given x y limits, using specified hexagon diameter.","code":""},{"path":"/reference/generate_hexagonal_lattice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Hexagonal Lattice — generate_hexagonal_lattice","text":"","code":"generate_hexagonal_lattice(xlim, ylim, d)"},{"path":"/reference/generate_hexagonal_lattice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Hexagonal Lattice — generate_hexagonal_lattice","text":"xlim numeric vector length 2 specifying x-axis limits. ylim numeric vector length 2 specifying y-axis limits. d numeric value specifying hexagon diameter.","code":""},{"path":"/reference/generate_hexagonal_lattice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Hexagonal Lattice — generate_hexagonal_lattice","text":"data frame two columns, x y, containing coordinates hexagonal grid points.","code":""},{"path":"/reference/generate_hexagonal_lattice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Hexagonal Lattice — generate_hexagonal_lattice","text":"","code":"xlim <- c(-10, 10) ylim <- c(-10, 10) d <- 0.5 hex_lattice <- generate_hexagonal_lattice(xlim, ylim, d) #> Error in generate_hexagonal_lattice(xlim, ylim, d): could not find function \"generate_hexagonal_lattice\""},{"path":"/reference/geom_complex_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Complex Vector Field Geom Layer — geom_complex_function","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"geom_complex_function() generates raster plot layer user-defined complex function. hue color corresponds argument (angle) complex number resulting function, indicating direction vector. lightness color reflects magnitude vector, providing visual representation direction intensity.","code":""},{"path":"/reference/geom_complex_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"fun user-defined function takes complex number input returns complex number. relim numeric vector length 2 giving real-axis limits. imlim numeric vector length 2 giving imaginary-axis limits. n integer specifying number grid points along axis.","code":""},{"path":"/reference/geom_complex_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"#library(ggvfields) # Example user-defined function f <- function(z) (z^2 + 1) / (z^2 - 1)  # Create a ggplot with the vector field layer #ggplot() +  # geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +  # labs(x = \"Real\", y = \"Imaginary\")"},{"path":"/reference/geom_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Flow Plot Geom Layer — geom_flow","title":"Create a Flow Plot Geom Layer — geom_flow","text":"geom_flow() generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"geom_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = 11,   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )  stat_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = 11,   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Flow Plot Geom Layer — geom_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length, representing vector field. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions starting points flows. iterations numeric value specifying number time steps ODE solver used flow generation. determines granularity flow paths; higher values result smoother, detailed flows. threshold_distance numeric value specifying minimum distance flows avoid overlap. provided, defaults half Euclidean distance adjacent grid points. arrow Arrow specification, created grid::arrow(), adding arrows flows.","code":""},{"path":"/reference/geom_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Flow Plot Geom Layer — geom_flow","text":"ggplot2 layer can added ggplot object produce flow plot.","code":""},{"path":"/reference/geom_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Flow Plot Geom Layer — geom_flow","text":"flows computed using deSolve package's ODE solver. rk4 method (fourth-order Runge-Kutta method) used default numerical integration flows.","code":""},{"path":"/reference/geom_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"# Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the flow plot layer ggplot() +   geom_flow(     fun = f, n = c(11, 11),     xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 100, threshold_distance = 0,     arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\")   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_function_1d2d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d2d","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d2d","text":"functions provide convenient ggplot2 layers drawing streams generated mapping one-dimensional input (typically time) two-dimensional coordinates. user-defined function (fun) specifies mapping taking numeric scalar (e.g. time) returning numeric vector length 2 (representing \\((x, y)\\)). underlying Stat1d2d evaluates fun time sequence (t0 T increments dt), GeomStream renders resulting path.","code":""},{"path":"/reference/geom_function_1d2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d2d","text":"mapping set aesthetic mappings created ggplot2::aes(). Additional aesthetics color, size, linetype, alpha can defined. default mapping sets color = after_stat(t). data data frame containing input data. many cases, data needs supplied. geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream(). position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function defines mapping scalar input (typically time) two-dimensional coordinate. take numeric scalar return numeric vector length 2 representing \\((x, y)\\). (Required) t0 Numeric. starting value time sequence. Defaults 0. T Numeric. ending value time sequence. Defaults 10. dt Numeric. time increment evaluating fun. Defaults 0.01. tail_point Logical. TRUE, point drawn tail (starting position) stream. arrow grid::arrow() specification add arrowheads stream. default closed arrow 30° angle length 0.02 npc. stat statistical transformation use data layer. Defaults Stat1d2d.","code":""},{"path":"/reference/geom_function_1d2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d2d","text":"ggplot2 layer computes plots stream evaluating one-dimensional function time sequence.","code":""},{"path":"/reference/geom_function_1d2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d2d","text":"many cases layers useful visualizing dynamic systems flows one-dimensional parameter (often time) drives movement two-dimensional space.","code":""},{"path":"/reference/geom_function_1d2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d2d","text":"","code":"# Define a simple function that maps time to a 2D coordinate (e.g., circular motion) f <- function(t) {   c(sin(t), cos(t)) }  ggplot() +   geom_function_1d2d(fun = f)   f <- function(t) {   c(sin(t), t*cos(t)) }  ggplot() +   geom_function_1d2d(fun = f, T = 20, tail_point = TRUE)"},{"path":"/reference/geom_function_1d_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d_2d","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d_2d","text":"functions provide convenient ggplot2 layers drawing streams generated mapping one-dimensional input (typically time) two-dimensional coordinates. user-defined function (fun) specifies mapping taking numeric scalar (e.g. time) returning numeric vector length 2 (representing \\((x, y)\\)). underlying Stat1d_2d evaluates fun time sequence (t0 T increments dt), GeomStream renders resulting path.","code":""},{"path":"/reference/geom_function_1d_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d_2d","text":"mapping set aesthetic mappings created ggplot2::aes(). Additional aesthetics color, size, linetype, alpha can defined. default mapping sets color = after_stat(t). data data frame containing input data. many cases, data needs supplied. geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream(). position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function defines mapping scalar input (typically time) two-dimensional coordinate. take numeric scalar return numeric vector length 2 representing \\((x, y)\\). (Required) t0 Numeric. starting value time sequence. Defaults 0. T Numeric. ending value time sequence. Defaults 10. dt Numeric. time increment evaluating fun. Defaults 0.01. args List additional arguments passed function defined fun. tail_point Logical. TRUE, point drawn tail (starting position) stream. arrow grid::arrow() specification add arrowheads stream. default closed arrow 30° angle length 0.02 npc. stat statistical transformation use data layer. Defaults Stat1d_2d.","code":""},{"path":"/reference/geom_function_1d_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d_2d","text":"ggplot2 layer computes plots stream evaluating one-dimensional function time sequence.","code":""},{"path":"/reference/geom_function_1d_2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d_2d","text":"many cases layers useful visualizing dynamic systems flows one-dimensional parameter (often time) drives movement two-dimensional space.","code":""},{"path":"/reference/geom_function_1d_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"1D-to-2D Function Stream Plot for ggplot2 — geom_function_1d_2d","text":"","code":"f <- function(t) {   c(sin(t), cos(t)) }  ggplot() + geom_function_1d_2d(fun = f)   f <- function(t) {   c(sin(t), t * cos(t)) }  ggplot() +   geom_function_1d_2d(fun = f, T = 20, tail_point = TRUE)   f <- function(t) {   x <- sin(t) * (exp(cos(t)) - 2 * cos(4 * t) - (sin(t / 12))^5)   y <- cos(t) * (exp(cos(t)) - 2 * cos(4 * t) - (sin(t / 12))^5)   c(x, y) }  ggplot() +   geom_function_1d_2d(fun = f, T = 6.5, arrow = NULL, color = \"black\")   f <- function(t)  c(abs(cos(t)*t), t)  ggplot() + geom_function_1d_2d(fun = f, t0 = -20,  T = 20)   # Lissajous curve lissajous <- function(t, A = 1, B = 1, a = 3, b = 2, delta = pi/2) {   c(A * sin(a * t + delta), B * sin(b * t)) }  ggplot() +   geom_function_1d_2d( fun = lissajous, T = 2 * pi, color = \"black\", arrow = NULL,     args = list(A = 1, B = 1, a = 3, b = 2, delta = pi/2)   )   # Example 5: Variations on Lissajous curves ggplot() +   geom_function_1d_2d( fun = lissajous, T = 2 * pi, color = \"black\", arrow = NULL,     args = list(A = 2, B = 1, a = 4, b = 2, delta = pi/4)   )   ggplot() +   geom_function_1d_2d( fun = lissajous, T = 2 * pi, color = \"black\", arrow = NULL,     args = list(A = 1, B = 2, a = 5, b = 3, delta = pi/3)   )   ggplot() +   geom_function_1d_2d( fun = lissajous, T = 2 * pi, color = \"black\", arrow = NULL,     args = list(A = 0.5, B = 0.5, a = 2, b = 3, delta = pi/6)   )   ggplot() +   geom_function_1d_2d( fun = lissajous, T = 2 * pi, color = \"black\", arrow = NULL,     args = list(A = 0.5, B = 0.5, a = 5, b = 4, delta = pi/2)   )   # Harmonic cuves  f <- function(t,   A1 = 1, A2 = 1, A3 = 1, A4 = 1,   f1 = 1, f2 = 2, f3 = 3, f4 = 4,   p1 = 0, p2 = pi/4, p3 = pi/2, p4 = 3*pi/4,   d1 = 0.1, d2 = 0.2, d3 = 0.3, d4 = 0.4) {     x <- A1 * sin(t * f1 + p1) * exp(-d1 * t) + A2 * sin(t * f2 + p2) * exp(-d2 * t)     y <- A3 * sin(t * f3 + p3) * exp(-d3 * t) + A4 * sin(t * f4 + p4) * exp(-d4 * t)     c(x, y) }  ggplot() + geom_function_1d_2d(fun = f, t0 = 0,  T = 5)"},{"path":"/reference/geom_function_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","title":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","text":"geom_function_2d adds layer visualize 2D functions vector fields ggplot2 plot.","code":""},{"path":"/reference/geom_function_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","text":"","code":"geom_function_2d(   mapping = NULL,   data = NULL,   stat = StatFunction2d,   geom = GeomFunction2d,   ...,   position = \"identity\",   fun = NULL,   xlim = NULL,   ylim = NULL,   n = NULL,   show.legend = NA,   inherit.aes = TRUE )  stat_function_2d(   mapping = NULL,   data = NULL,   geom = GeomFunction2d,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun = NULL,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = 50 )  StatFunction2d  GeomFunction2d"},{"path":"/reference/geom_function_2d.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","text":"object class StatFunction2d (inherits Stat, ggproto, gg) length 3. object class GeomFunction2d (inherits Geom, ggproto, gg) length 3.","code":""},{"path":"/reference/geom_function_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","text":"mapping Aesthetic mappings, created using aes(). NULL, defaults used. data Optional data frame override default data source. stat Statistical transformation use. Defaults StatFunction2d. geom Geom used rendering. Defaults GeomFunction2d. ... arguments passed layer, additional parameters. position Position adjustment layer. Defaults \"identity\". fun function takes matrix x, y values returns matrix dx, dy values. xlim Numeric vector length 2 specifying x-range grid. Required fun provided. ylim Numeric vector length 2 specifying y-range grid. Required fun provided. n Number points grid along axis. Defaults 11 stat_function_2d. show.legend Logical. layer included legends? NA includes aesthetics mapped. inherit.aes FALSE, overrides default aesthetics rather combining . na.rm Logical. missing values removed? Defaults FALSE.","code":""},{"path":"/reference/geom_function_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","text":"ggplot2 layer.","code":""},{"path":"/reference/geom_function_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a 2D Function Visualization Layer of the Norm of a Vector Field — geom_function_2d","text":"","code":"# Function that calculates the norm f <- function(v) {   x <- v[1]   y <- v[2]   c(sqrt(x^2 + y^2)) }  ggplot() +   geom_function_2d(fun = f, xlim = c(-5, 5), ylim = c(-5, 5))   # Sinusoidal combination of sine and cosine f_sin_cos <- function(v) {   x <- v[1]   y <- v[2]   sin(x) * cos(y) }  ggplot() +   geom_function_2d(fun = f_sin_cos, xlim = c(-5, 5), ylim = c(-5, 5))   # Gaussian bump function f_gaussian <- function(v) {   x <- v[1]   y <- v[2]   exp(-(x^2 + y^2) / 2) }  ggplot() +   geom_function_2d(fun = f_gaussian, xlim = c(-5, 5), ylim = c(-5, 5))   # Radial sine wave function f_radial_wave <- function(v) {   x <- v[1]   y <- v[2]   r <- sqrt(x^2 + y^2)   sin(r) }  # Some functions need more resolution for clarity ggplot() +   geom_function_2d(fun = f_radial_wave, xlim = c(-50, 50), ylim = c(-50, 50), n = 100)   # Complex combination of radial and angular components f_complex <- function(v) {   x <- v[1]   y <- v[2]   r <- sqrt(x^2 + y^2)   theta <- atan2(y, x)   sin(r) * cos(theta) }  ggplot() +   geom_function_2d(fun = f_complex, xlim = c(-50, 50), ylim = c(-50, 50), n = 500)   # Spiral pattern function f_spiral <- function(v) {   x <- v[1]   y <- v[2]   r <- sqrt(x^2 + y^2)   theta <- atan2(y, x)   sin(r + theta) }  ggplot() +   geom_function_2d(fun = f_spiral, xlim = c(-50, 50), ylim = c(-50, 50), n = 500)"},{"path":"/reference/geom_gradient_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient Field Layers for ggplot2 — geom_gradient_field","title":"Gradient Field Layers for ggplot2 — geom_gradient_field","text":"functions provide convenient ggplot2 layers drawing gradient fields computing gradient scalar field. user-defined function (fun) specifies behavior scalar field taking numeric vector length 2 (representing \\((x, y)\\)) returning single numeric value. underlying StatStreamField computes gradient via numerical differentiation (using numDeriv::grad()) GeomStream renders resulting vectors.","code":""},{"path":"/reference/geom_gradient_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient Field Layers for ggplot2 — geom_gradient_field","text":"","code":"stat_gradient_field(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = TRUE,   type = \"stream\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   arrow = grid::arrow(angle = 30, length = grid::unit(0.02, \"npc\"), type = \"closed\") )  geom_gradient_field2(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = TRUE,   type = \"stream\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   arrow = NULL )  stat_gradient_field2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = TRUE,   type = \"stream\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   arrow = NULL )"},{"path":"/reference/geom_gradient_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient Field Layers for ggplot2 — geom_gradient_field","text":"mapping set aesthetic mappings created ggplot2::aes(). Additional aesthetics color, size, linetype, alpha can defined. geom_gradient_field default mapping includes color = after_stat(norm), whereas geom_gradient_field2 default mapping includes length = after_stat(norm). data data frame containing input data. geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream(). position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function defines scalar field. take numeric vector length 2 (representing \\((x, y)\\)) return single numeric value. (Required) xlim Numeric vector length two. Specifies limits x-axis domain. Defaults c(-1, 1). ylim Numeric vector length two. Specifies limits y-axis domain. Defaults c(-1, 1). n Integer. Grid resolution specifying number seed points along axis. Higher values produce denser gradient field. Defaults 11. max_it Integer. Maximum number integration steps allowed computing gradient stream vector. Defaults 1000. T Numeric. Time increment used numerical integration normalize FALSE. provided, computed automatically based grid spacing vector field’s magnitude. L Numeric. Target length gradient vectors streamlines. normalize TRUE, computed vectors scaled length L. provided, L computed automatically grid spacing. center Logical. TRUE, centers seed points original (x, y) becomes midpoint. Defaults differ variants. type Character. Specifies type field compute: use \"stream\" generate integrated streamlines \"vector\" individual vector segments. Defaults \"stream\". gradient vectors. geom_gradient_field default closed arrow 30° angle length 0.02 npc; geom_gradient_field2 default NULL. normalize Logical. TRUE, gradient vectors normalized based grid spacing. TRUE, converted internally \"vector\". Default TRUE. tail_point Logical. TRUE, point drawn tail gradient vector. Defaults differ variants. eval_point Logical. TRUE, point drawn evaluation point gradient computed. Default FALSE. grid data frame containing precomputed grid points seed placement. NULL (default), regular Cartesian grid generated based xlim, ylim, n. arrow grid::arrow() specification add arrowheads stat statistical transformation use data layer. Defaults StatStreamField.","code":""},{"path":"/reference/geom_gradient_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gradient Field Layers for ggplot2 — geom_gradient_field","text":"ggplot2 layer computes plots gradient field numerically differentiating scalar field.","code":""},{"path":"/reference/geom_gradient_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gradient Field Layers for ggplot2 — geom_gradient_field","text":"Two variants provided: geom_gradient_field() uses default mapping sets color = after_stat(norm). geom_gradient_field2() uses default mapping sets length = after_stat(norm) (color unmapped default).","code":""},{"path":"/reference/geom_gradient_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gradient Field Layers for ggplot2 — geom_gradient_field","text":"","code":"Si <- matrix(c(1, 0.75, 0.75, 1), nrow = 2) f <- function(u) exp(-as.numeric(u %*% solve(Si) %*% u) / 2) / (2 * pi * det(Si))  ggplot() +   geom_gradient_field(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) #> Warning: longer object length is not a multiple of shorter object length   df <- expand.grid(x = seq(-3, 3, 0.1), y = seq(-3, 3, 0.1)) |>   transform(fxy = apply(cbind(x, y), 1, f))  ggplot() +   geom_raster(aes(x, y, fill = fxy), data = df) +   geom_gradient_field(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) +   coord_equal() #> Warning: longer object length is not a multiple of shorter object length   fxy <- function(x, y) apply(cbind(x,y), 1, f)  ggplot() +   ggdensity::geom_hdr_fun(fun = fxy, xlim = c(-3,3), ylim = c(-3,3)) +   geom_gradient_field(fun = f, xlim = c(-3,3), ylim = c(-3,3)) +   coord_equal() #> Warning: longer object length is not a multiple of shorter object length   if (FALSE) {   library(\"ggdensity\")   fxy <- function(x, y) apply(cbind(x, y), 1, f)   fxy(1, 2)   f(1:2)    ggplot() +     geom_hdr_fun(fun = fxy, xlim = c(-3, 3), ylim = c(-3, 3)) +     geom_gradient_field(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) +     coord_equal() }"},{"path":"/reference/geom_potential.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"geom_potential() adds raster layer ggplot object, visualizing potential function derived conservative vector field. computes potential numerically specified grid displays heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"","code":"geom_potential(   mapping = NULL,   data = NULL,   stat = StatPotential,   position = \"identity\",   ...,   inherit.aes = TRUE,   show.legend = NA,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   tolerance = 1e-06 )  stat_potential(   mapping = NULL,   data = NULL,   geom = GeomPotential,   position = \"identity\",   ...,   inherit.aes = TRUE,   show.legend = NA,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   tolerance = 1e-06 )  StatPotential  GeomPotential"},{"path":"/reference/geom_potential.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"object class StatPotential (inherits Stat, ggproto, gg) length 3. object class GeomPotential (inherits GeomRaster, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_potential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. NULL, default, data inherited plot data specified call ggplot(). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. fun function takes numeric vector length 2 (c(x, y)) returns numeric vector length 2 (c(dx, dy)), defining vector field. xlim, ylim Numeric vectors length 2 defining domain limits x/y-axis.  defined function attempt inheret previous layers default c(-1,1). n Integer, number grid points along axis. Defaults 21. tolerance Numeric value specifying tolerance level verifying vector field conservative. Defaults 1e-6. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_potential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"ggplot2 layer can added ggplot object produce potential function heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"","code":"# Define a conservative vector field function fun <- function(v) {   x <- v[1]   y <- v[2]   c(sin(x) + y, x - sin(y)) }  # Create the potential function heatmap ggplot() +   geom_potential(fun = fun) #> Warning: No xlim provided or inherited; defaulting to c(-1, 1). #> Warning: No ylim provided or inherited; defaulting to c(-1, 1)."},{"path":"/reference/geom_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Streamline Plot Layer in ggplot2 — geom_stream","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"geom_stream() generates ggplot2 layer visualizes data continuous \"streams\" temporal variable t. stream defined x, y, t aesthetics, optionally grouped group. data points within group automatically ordered t form continuous streamline path.","code":""},{"path":"/reference/geom_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"","code":"geom_stream(   mapping = NULL,   data = NULL,   stat = StatStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  stat_stream(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  StatStream  GeomStream"},{"path":"/reference/geom_stream.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"object class StatStream (inherits Stat, ggproto, gg) length 4. object class GeomStream (inherits GeomPath, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"mapping Set aesthetic mappings created ggplot2::aes(). Required: x, y, t. Optional: group (multiple streams). id provided, mapped group automatically. data data frame object, ggplot2::layer(). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed respective ggplot2::geom_path() ggplot2::Stat customization (e.g., linetype, color, linewidth). na.rm FALSE (default), missing values removed warning. TRUE, missing values silently removed. show.legend Logical. layer included legends? inherit.aes FALSE, overrides default aesthetics rather combining . arrow optional grid::arrow() specification place arrowheads streamline (e.g., indicate direction). geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream().","code":""},{"path":"/reference/geom_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"ggplot2 layer can added plot produce streamline visualization. Internally, layer reorders data t within group, draws continuous path.","code":""},{"path":"/reference/geom_stream.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"geom_stream() stat_stream() understand following aesthetics (required aesthetics bold): x: Typically horizontal axis (often mapped time t). y: vertical axis (often magnitude value time t). t: temporal ordered variable used sequence data. group: Grouping multiple streams (mapped id present). color, linetype, linewidth, alpha, etc. (inherited ggplot2::geom_path).","code":""},{"path":"/reference/geom_stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"Data Ordering: t missing, error thrown. present, points within group sorted t drawing. Stream vs. Stat: geom_stream() convenient wrapper typical usage; sets stat = StatStream uses ggplot2::GeomPath default. stat_stream() provides direct access reordering stat, using GeomStream drawing. useful advanced customization. Arrows: Use arrow parameter indicate direction streamline. details, see grid::arrow.","code":""},{"path":[]},{"path":"/reference/geom_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"","code":"stream_1 <- data.frame(   x = c(0, 3),   y = c(0, 0),   t = 0:1 )  stream_2 <- data.frame(   x = c(1, 1),   y = c(1, 5),   t = 0:1 )  stream_3 <- data.frame(   x = c(2, 5),   y = c(2, 6),   t = 0:1 )  streams <- rbind(   cbind(stream_1, id = 1),   cbind(stream_2, id = 2),   cbind(stream_3, id = 3) )  ggplot(streams) +   geom_stream(aes(x = x, y = y, t = t, group = id))"},{"path":"/reference/geom_streamplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Plot Geom Layer — geom_streamplot","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"geom_streamplot() generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"geom_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = 11,   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   method = \"rk4\",   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1 )  stat_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-1, 1),   ylim = c(-1, 1),   n = 11,   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   method = \"rk4\",   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1 )"},{"path":"/reference/geom_streamplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions. mask_shape_type character string specifying mask shape type: \"square\", \"diamond\", \"inset_square\", \"circle\". iterations integer specifying number steps perform numerical integration flow. stream_density numeric value controls density streamlines. Higher values produce streamlines. Default 1. method character string specifying ODE solver method used (passed deSolve::ode()). Default \"rk4\". arrow Arrow specification, created grid::arrow(). chop logical value indicating whether chop trajectories segments. scale_stream numeric value specifying maximum allowable segment size fraction total range chopping trajectories.","code":""},{"path":"/reference/geom_streamplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"ggplot2 layer can added ggplot object produce stream plot.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"# Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3), n = c(15, 15),     iterations = 100, chop = TRUE, scale_stream = 1,     mask_shape_type = \"square\", method = \"rk4\"   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_stream_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Field Layer in ggplot2 — geom_stream_field","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"geom_stream_field() creates ggplot2 layer integrates user-defined vector field function \\(f(x, y) \\(dx, dy)\\) grid seed points within specified domain \\((x, y)\\), producing streamlines visualize flow vector field. useful visualizing vector fields, flow patterns, trajectories variety contexts fluid flows gradient fields.","code":""},{"path":"/reference/geom_stream_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"","code":"stat_stream_field(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   max_it = 1000,   T = NULL,   L = NULL,   center = TRUE,   type = \"stream\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   method = \"rk4\",   arrow = grid::arrow(angle = 30, length = unit(0.02, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_stream_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object used render streamline. Defaults GeomStream. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed ggplot2::layer() underlying geometry/stat. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun function two variables, fun(x, y), returning two-element vector \\((dx, dy)\\). defines local \"flow\" direction point domain. xlim, ylim Numeric vectors length two specifying domain limits \\(x\\)- \\(y\\)-directions, respectively. Defaults \\(c(-1, 1)\\) provided. n Integer two-element numeric vector. Grid resolution specifying number seed points along axis. Defaults 11, resulting \\(11 \\times 11\\) grid. args List additional arguments passed function defined fun. max_it Integer. Maximum number integration steps per streamline. Defaults 1000. T Numeric. Maximum integration time streamline. normalize = FALSE, integration runs time T reached. Defaults NULL, case default value 1 used needed. L Numeric. Maximum arc length streamline. normalize = TRUE, integration halted cumulative arc length reaches L. Defaults NULL, case suitable default computed grid spacing. center Logical. TRUE (default), centers seed points resulting streamlines original (x, y) becomes midpoint. type Character. Either \"stream\" (default) \"vector\". \"stream\" computes full streamline integrating directions (center = TRUE). \"vector\" computes single vector representing field seed point. normalize Logical. TRUE (default), streamlines normalized based grid spacing, using L parameter control maximum arc length. FALSE, streamlines computed fixed time determined T parameter. tail_point Logical. TRUE, draws point tail (starting point) streamline. Defaults FALSE. eval_point Logical. TRUE, point drawn evaluation point gradient computed. Default FALSE. grid data frame containing precomputed grid points seed placement. NULL (default), regular Cartesian grid generated based xlim, ylim, n. method Character. Integration method, e.g., \"rk4\" Runge-Kutta 4 \"euler\" Euler's method. Defaults \"rk4\". arrow grid::arrow() specification adding arrowheads streamline. default, closed arrow 30° angle length 0.02 npc used.","code":""},{"path":"/reference/geom_stream_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"ggplot2 layer computes renders streamlines specified domain, optionally arrowheads tail points.","code":""},{"path":"/reference/geom_stream_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"streamlines generated numerically integrating vector field defined fun(x, y). integration halts either cumulative arc length reaches L (normalize = TRUE) integration time reaches T (normalize = FALSE). computed streamlines passed GeomStream rendering.","code":""},{"path":"/reference/geom_stream_field.html","id":"see-also","dir":"Reference","previous_headings":"","what":"See Also","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"StatStreamField underlying statistical transformation. GeomStream geometry renders resulting paths. ggplot2::geom_path base geometry GeomStream built.","code":""},{"path":"/reference/geom_stream_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"","code":"f <- function(u) c(-u[2], u[1])  # the basic usage involves you providing a fun, xlim, and ylim ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))   # if unspecified, xlim and ylim default to c(-1,1). we use this in what # follows to focus on other parts of the code ggplot() + geom_stream_field(fun = f)  ggplot() + geom_stream_field(fun = f, center = FALSE)   ggplot() + geom_stream_field(fun = f, normalize = FALSE)  ggplot() + geom_stream_field(fun = f, normalize = FALSE, center = FALSE)   # run systems until specified lengths ggplot() + geom_stream_field(fun = f, normalize = TRUE, L = .08)   # run systems for specified times ggplot() + geom_stream_field(fun = f, normalize = FALSE, T = .1)   # tail and eval points ggplot() + geom_stream_field(fun = f, tail_point = TRUE)  ggplot() + geom_stream_field(fun = f, eval_point = TRUE)      f <- efield_maker() ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))  ggplot() +   geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +   scale_color_viridis_c(trans = \"log10\") +   coord_equal()   f <- function(u) u ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))   f <- function(u) c(2,1) ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))   # bug here with alpha ggplot() +   geom_stream_field(fun = f, aes(alpha = after_stat(t)), xlim = c(-2,2), ylim = c(-2,2)) +   scale_alpha(range  = c(0,1))   ggplot() +   geom_stream_field(     fun = f, xlim = c(-1,1), ylim = c(-1,1),     linewidth = .75, arrow = arrow(length = unit(0.015, \"npc\"))   )   # Generate a hexagonal grid hex_lattice <- generate_hexagonal_lattice(xlim = c(-5, 5), ylim = c(-5, 5), d = 1) #> Error in generate_hexagonal_lattice(xlim = c(-5, 5), ylim = c(-5, 5),     d = 1): could not find function \"generate_hexagonal_lattice\"  # Use the hexagonal grid in geom_stream_field ggplot() + geom_stream_field(fun = f, grid = hex_lattice) #> Error in layer(stat = stat, geom = GeomStream, data = data, mapping = mapping,     position = position, show.legend = show.legend, inherit.aes = inherit.aes,     params = list(fun = fun, xlim = xlim, ylim = ylim, n = n,         args = args, method = method, na.rm = na.rm, max_it = max_it,         T = T, L = L, center = center, type = type, normalize = normalize,         tail_point = tail_point, eval_point = eval_point, arrow = arrow,         ...)): object 'hex_lattice' not found  # neat examples  f <- function(u) {   x <- u[1]; y <- u[2]   c(y, y*(-x^2 - 2*y^2 + 1) - x) } ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))  ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2), type = \"vector\") #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_stream()`).   f <- function(u) {   x <- u[1]; y <- u[2]   c(y, x - x^3) } ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))   f <- function(u) {   x <- u[1]; y <- u[2]   c(x^2 - y^2, x^2 + y^2 - 2) } ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))"},{"path":"/reference/geom_stream_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smoothed Vector Field Layer — geom_stream_smooth","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"geom_stream_smooth creates ggplot2 layer visualizes smooth vector field based raw vector data. function fits multivariate linear model (default, using formula cbind(fx, fy) ~ x * y) predict vector displacements given location. also handles different input formats converting polar coordinates endpoint data vector displacements.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"","code":"geom_stream_smooth(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = 11,   xlim = NULL,   ylim = NULL,   normalize = TRUE,   center = FALSE,   type = \"vector\",   formula = cbind(fx, fy) ~ x * y,   eval_points = NULL,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_stream_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: x y must always provided. addition, either xend yend angle distance must supplied. data data frame containing vector data wide format. stat statistical transformation use data layer. Defaults StatVector. position Position adjustment, either string result call position adjustment function. ... Additional arguments passed layer. addition, fixed parameter color provided via ..., color = \"blue\" used. na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . n Integer two-element numeric vector. Grid resolution specifying number seed points along axis. Defaults 11, resulting \\(11 \\times 11\\) grid. xlim, ylim Numeric vectors length two specifying domain limits \\(x\\)- \\(y\\)-directions, respectively. Defaults \\(c(-1, 1)\\) provided. normalize Logical. TRUE, vector endpoints adjusted vector unit length. center Logical. TRUE, vector recentered original (x, y) becomes midpoint vector. Default FALSE. type Character. Either \"stream\" (default) \"vector\". \"stream\" computes full streamline integrating directions (center = TRUE). \"vector\" computes single vector representing field seed point. formula formula specifying multivariate linear model used smoothing. Defaults cbind(fx, fy) ~ x * y. eval_points Data frame evaluation points, NULL. provided, specifies grid points smoothing model evaluated. NULL, function generates grid based n. arrow optional grid::arrow() specification add arrowheads vectors (default: grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\")).","code":""},{"path":"/reference/geom_stream_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"ggplot2 layer can added ggplot object display smoothed vector field.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"Data Conversion: xend/yend missing NA, function attempt compute . First checks vector displacements (fx fy); exist (missing), endpoints computed : $$xend = x + fx,\\quad yend = y + fy.$$ , function looks polar coordinates (angle distance) computes: $$xend = x + distance \\times \\cos(angle \\times 180/\\pi),\\quad yend = y + distance \\times \\sin(angle \\times 180/\\pi).$$ neither set available, function stops error. Smoothing: multivariate linear model fitted using provided formula data. model used predict vector displacements specified grid point, generating smooth approximation vector field.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"geom_stream_smooth supports following aesthetics (required aesthetics bold): x: x-coordinate vector's starting point. y: y-coordinate vector's starting point. fx: displacement along x-axis. fy: displacement along y-axis. color: fixed color vector. Defaults \"blue\". linewidth: thickness vector line. linetype: type vector line (e.g., solid dashed). alpha: transparency level vector. arrow: Specifies arrowheads vectors.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"","code":"# Define a true vector field function f <- function(u) {   x <- u[1]; y <- u[2]   c(x^2 - y^2, x^2 + y^2 - 2) }  # Alternative example function f <- function(u) c(-u[2], u[1])  # Visualize the vector field ggplot() + geom_stream_field(fun = f, xlim = c(-2, 2), ylim = c(-2, 2))   # Generate design points n <- 20 df <- data.frame(x = runif(n, -2, 2), y = runif(n, -2, 2))  # Sample function values at design points fdf <- as.data.frame(t(apply(df, 1, f))) colnames(fdf) <- c(\"fx\", \"fy\") df <- cbind(df, fdf)  # Visualize raw vector field data ggplot(df) + geom_vector(aes(x, y, fx = fx, fy = fy))   # Add smoothed layer using default model ggplot(df) +   geom_vector(aes(x, y, fx = fx, fy = fy)) +   geom_stream_smooth(formula = cbind(fx, fy) ~ x * y)   # Use a more complex polynomial model ggplot(df) +   geom_vector(aes(x, y, fx = fx, fy = fy)) +   geom_stream_smooth(formula = cbind(fx, fy) ~ poly(x, 2) * poly(y, 2), data = df)   # Fit a linear model and use it for prediction fhat <- function(u) {   model <- lm(cbind(fx, fy) ~ x * y, data = df)   predict(model, newdata = data.frame(x = u[1], y = u[2])) |> as.numeric() }  # Visualize estimated field with the raw vector field ggplot(df) +   geom_stream_field(fun = fhat, normalize = FALSE, color = \"#3366FF\") +   geom_vector(aes(x, y, fx = fx, fy = fy))   # Generate a hexagonal grid hex_lattice <- generate_hexagonal_lattice(xlim = c(-5, 5), ylim = c(-5, 5), d = 1) #> Error in generate_hexagonal_lattice(xlim = c(-5, 5), ylim = c(-5, 5),     d = 1): could not find function \"generate_hexagonal_lattice\"  # Use the hexagonal grid in geom_stream_field ggplot(data = df) +   geom_vector(aes(x, y, fx = fx, fy = fy), color = \"black\", normalize = FALSE) +   geom_stream_smooth(eval_points = hex_lattice) #> Error in geom_stream_smooth(eval_points = hex_lattice): object 'hex_lattice' not found  # user specified point  eval_pts <- data.frame(x = c(0, 3), y = c(2, 5))  ggplot(data = df) +   geom_vector(aes(x, y, fx = fx, fy = fy), color = \"black\", normalize = FALSE) +   geom_stream_smooth(eval_points = eval_pts) #> Warning: Ignoring unknown parameters: `eval_points`"},{"path":"/reference/geom_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Layers for ggplot2 — geom_vector","title":"Vector Layers for ggplot2 — geom_vector","text":"functions provide convenient ggplot2 layers drawing vectors.","code":""},{"path":"/reference/geom_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Layers for ggplot2 — geom_vector","text":"","code":"stat_vector(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   L = NULL,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  StatVector  geom_vector2(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   normalize = FALSE,   tail_point = TRUE,   eval_point = FALSE,   arrow = NULL )  stat_vector2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   normalize = FALSE,   tail_point = TRUE,   eval_point = FALSE,   L = NULL,   arrow = NULL )"},{"path":"/reference/geom_vector.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Vector Layers for ggplot2 — geom_vector","text":"object class StatVector (inherits Stat, ggproto, gg) length 4.","code":""},{"path":"/reference/geom_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Layers for ggplot2 — geom_vector","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: x y must always provided. addition, either xend yend angle distance must supplied. data data frame containing vector data wide format. geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream(). position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . center Logical. TRUE, vector recentered original (x, y) becomes midpoint vector. Default FALSE. normalize Logical. TRUE, vector endpoints adjusted vector unit length. tail_point Logical. TRUE, point drawn tail (.e., starting point) vector. can help indicate origin vector. Default FALSE. eval_point Logical. TRUE, point drawn evaluation point, corresponding original (untransformed) seed point centering normalization applied. allows comparison original transformed positions. Default FALSE. L Numeric scalar. desired length vectors (data units). NULL (default), default value computed automatically based plot’s x y limits. arrow optional grid::arrow() specification add arrowheads vectors (default: grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\")). stat statistical transformation use data layer. Defaults StatVector.","code":""},{"path":"/reference/geom_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Layers for ggplot2 — geom_vector","text":"ggplot2 layer can added plot.","code":""},{"path":"/reference/geom_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Layers for ggplot2 — geom_vector","text":"accept wide-format data aesthetics x y plus either (xend, yend) (angle, distance). latter supplied, endpoints computed translation starting point using polar coordinates (assuming angle degrees). data converted long format (two rows per vector) using StatVector plotted using GeomStream. Directional arrowheads can added indicate vector direction. Two variants available: geom_vector() creates layer user-supplied aesthetic mapping. geom_vector2() uses underlying stat (StatVector) adds default mapping length = after_stat(norm) computed vector norm available aesthetic.","code":""},{"path":"/reference/geom_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Layers for ggplot2 — geom_vector","text":"","code":"# Basic usage with explicit start and end points: vectors1 <- data.frame(   x    = c(0, 1, 2),   y    = c(0, 1, 2),   xend = c(3, 1, 5),   yend = c(0, 5, 6) ) ggplot(vectors1, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_vector()   # Basic usage with angle and distance: vectors2 <- data.frame(   x        = c(0, 1, 2),   y        = c(0, 1, 2),   angle    = c(0, pi/2, pi/4),   distance = c(3, 4, 5) ) ggplot(vectors2) +   geom_vector(aes(x = x, y = y, angle = angle, distance = distance))   # Using center = TRUE to adjust vectors so that they originate from their midpoints: ggplot(vectors1, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_vector(center = TRUE)   # Using normalize = TRUE to adjust vectors to have unit length: ggplot(vectors2, aes(x = x, y = y, angle = angle, distance = distance)) +   geom_vector(normalize = TRUE)   # Using geom_vector2, which adds a default mapping for length: ggplot(vectors1, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_vector2() #> Warning: Computation failed in `stat_vector()`. #> Caused by error in `compute_group()`: #> ! argument \"L\" is missing, with no default"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Field Layers for ggplot2 — geom_vector_field","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"functions provide convenient ggplot2 layers drawing vector fields using streamlines.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"","code":"stat_vector_field(   mapping = NULL,   data = NULL,   stat = StatStreamField,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   arrow = grid::arrow(angle = 30, length = unit(0.02, \"npc\"), type = \"closed\") )  geom_vector_field2(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = FALSE,   normalize = TRUE,   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   arrow = NULL )  stat_vector_field2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = FALSE,   normalize = TRUE,   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   arrow = NULL )"},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"mapping set aesthetic mappings created ggplot2::aes(). Additional aesthetics color, size, linetype, alpha can defined. geom_vector_field, default mapping includes color = after_stat(norm), whereas geom_vector_field2 default mapping includes length = after_stat(norm). data data frame containing input data. stat statistical transformation use data layer. Defaults StatStreamField. geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream(). position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function defines vector field. take numeric vector length 2 (representing \\((x, y)\\)) return numeric vector length 2 (representing \\((dx, dy)\\)). (Required) xlim Numeric vector length two. Specifies limits x-axis domain. Defaults c(-1, 1). ylim Numeric vector length two. Specifies limits y-axis domain. Defaults c(-1, 1). n Integer. Grid resolution specifying number seed points along axis. Higher values produce denser vector field. Defaults 11. args List additional arguments passed function defined fun. center Logical. TRUE, centers seed points vectors original (x, y) becomes midpoint. Defaults differ variants. normalize Logical. TRUE, stream lengths normalized based grid spacing. FALSE, default arc length used. (Default TRUE; TRUE, converted internally \"vector\".) tail_point Logical. TRUE, point drawn tail streamline. eval_point Logical. TRUE, point drawn evaluation point, corresponding original (untransformed) seed point centering normalization applied. allows comparison original transformed positions. Defaults FALSE. grid data frame containing precomputed grid points seed placement. NULL (default), regular Cartesian grid generated based xlim, ylim, n. arrow grid::arrow() specification add arrowheads streamlines. geom_vector_field, default closed arrow 30° angle length 0.02 npc; geom_vector_field2 default NULL.","code":""},{"path":"/reference/geom_vector_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"ggplot2 layer computes plots vector field using streamlines.","code":""},{"path":"/reference/geom_vector_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"user-defined function (fun) specifies behavior vector field taking numeric vector length 2 (representing \\((x, y)\\)) returning numeric vector length 2 (representing \\((dx, dy)\\)). underlying StatStreamField computes streamlines based vector field function, GeomStream renders . Two variants provided: geom_vector_field() uses default mapping sets color = after_stat(norm). geom_vector_field2() uses default mapping sets length = after_stat(norm) (color unmapped default).","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"","code":"f <- function(u) c(-u[2], u[1]) ggplot() + geom_vector_field(fun = f, xlim = c(-1,1), ylim = c(-1,1)) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_stream()`).  ggplot() + geom_vector_field2(fun = f, xlim = c(-1,1), ylim = c(-1,1)) #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_stream()`).   f <- efield_maker() ggplot() + geom_vector_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))  ggplot() + geom_vector_field2(fun = f, xlim = c(-2,2), ylim = c(-2,2))"},{"path":"/reference/geom_vector_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smooth Vector Plot Layer — geom_vector_smooth","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth generates ggplot layer visualizes smooth vector field. uses raw vector data applies smoothing techniques estimate underlying vector field. functionality similar geom_smooth() ggplot2, designed specifically vector data rather scalar data.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"geom_vector_smooth(   mapping = NULL,   data = NULL,   stat = \"vector_smooth\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   method = \"lm\",   se = TRUE,   se.circle = TRUE,   pi_type = \"ellipse\",   conf_level = c(0.95, NA),   formula = cbind(fx, fy) ~ x * y,   eval_points = NULL,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )  stat_vector_smooth(   mapping = NULL,   data = NULL,   geom = \"vector_smooth\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   method = \"lm\",   se = TRUE,   se.circle = TRUE,   conf_level = c(0.95, NA),   pi_type = \"ellipse\",   formula = cbind(fx, fy) ~ x * y,   eval_points = NULL,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )  StatVectorSmooth  GeomVectorSmooth"},{"path":"/reference/geom_vector_smooth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"object class StatVectorSmooth (inherits Stat, ggproto, gg) length 5. object class GeomVectorSmooth (inherits GeomSegment, Geom, ggproto, gg) length 6.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: x y must always provided. addition, either xend yend angle distance must supplied. data data frame containing vector data wide format. stat statistical transformation use data layer. Defaults StatVector. position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . n integer vector specifying number grid points along axis smoothing. method Character; specifies smoothing method use. supported method \"lm\", fits multivariate linear model predict vector displacements fx fy based coordinates x y. se Logical; TRUE, confidence intervals plotted around smoothed vectors. se.circle Logical; TRUE, circles drawn around origin vectors represent radius confidence interval. feature useful se = TRUE. pi_type Character; determines prediction intervals displayed around smoothed vectors. Two options available: \"wedge\": Displays angular wedges indicate uncertainty direction magnitude vectors. Wedges show range possible vector orientations lengths. \"ellipse\": Uses ellipses depict prediction intervals, reflecting covariance vector components (fx fy). Ellipses provide visual representation joint uncertainty vector directions. default \"wedge\". pi_type set \"ellipse\" eval_points NULL, function switches pi_type \"wedge\" ensure proper interval representation. conf_level Numeric vector; specifies confidence levels prediction intervals se = TRUE. Default conf_level = 0.95. formula formula specifying multivariate linear model used smoothing. default formula cbind(fx, fy) ~ x * y. eval_points Data frame evaluation points, NULL. provided, specifies grid points smoothing model evaluated. NULL, function generates grid based n. arrow Arrow specification created grid::arrow(). parameter controls appearance arrowheads ends vectors, including angle, length, type. geom geometric object used draw streamline. Defaults ggplot2::GeomPath geom_stream(), GeomStream stat_stream().","code":""},{"path":"/reference/geom_vector_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"ggplot2 layer can added ggplot object create smooth vector field plot.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"Multivariate Linear Model: \"lm\" method fits multivariate linear model predict vector displacements fx fy based input coordinates x y. model includes interaction terms (x * y) capture complex relationships vector field. Prediction Intervals: Two types prediction intervals supported: Ellipse: Ellipses used represent covariance predicted fx fy values. size orientation ellipses illustrate uncertainty vector magnitude correlation vector components. Wedge: Wedges angular sectors indicate range possible directions lengths vectors. type prediction interval provides intuitive visualization uncertainty vector orientation. intervals computed using confidence level specified conf_level parameter.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth supports following aesthetics (required aesthetics bold): x: x-coordinate vector's starting point. y: y-coordinate vector's starting point. fx: vector's displacement along x-axis. fy: vector's displacement along y-axis. color: color vector line. linewidth: thickness vector line. linetype: type vector line (e.g., solid dashed). alpha: transparency level vector. arrow: Specifies arrowheads vectors.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"# Function to generate vectors generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(     sin(x) + sin(y) + rnorm(1, 5, 1),     sin(x) - sin(y) - rnorm(1, 5, 1)   ) }  # Set seed for reproducibility set.seed(123)  # Create sample points and compute vectors sample_points <- data.frame(   x = runif(30, 0, 10),   y = runif(30, 0, 10) )  result <- t(apply(sample_points, 1, generate_vectors))  sample_points$xend <- result[, 1] sample_points$yend <- result[, 2] sample_points$fx <- sample_points$xend - sample_points$x sample_points$fy <- sample_points$yend - sample_points$y sample_points$distance <- sqrt(sample_points$fx^2 + sample_points$fy^2) sample_points$angle <- atan2(sample_points$fy, sample_points$fx)  # Define evaluation points eval_points <- data.frame(   x = c(0, 7.5),   y = c(10, 5) )  # Example 1: ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(fx = fx, fy = fy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(fx = fx, fy = fy), n = 5) +   ggtitle(\"Smoothed Vector Field\") #> Warning: ! eval_points is `NULL`; changing pi_type from \"ellipse\" to \"wedge\".   # Example 2: Ellipse with eval_points ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(fx = fx, fy = fy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(fx = fx, fy = fy), eval_points = eval_points, conf_level = c(0.9)) +   ggtitle(\"Smoothed Vector Field with Ellipse Intervals\")   # Example 3: Wedge with eval_points ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(fx = fx, fy = fy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(fx = fx, fy = fy), eval_points = eval_points, pi_type = \"ellipse\") +   ggtitle(\"Smoothed Vector Field with Wedge Intervals\")"},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Continuous Scale for Vector Length — scale_length_continuous","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous() provides continuous scale controlling length aesthetic ggplot. particularly useful working vector plots vector lengths mapped continuous scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(max_range = 0.5, ...)"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"max_range maximum value input rescaled. Numeric scalar specifying upper bound output range. 0 1. ... arguments passed continuous_scale().","code":""}]
