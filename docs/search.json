[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney X. Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2025). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney X. Sturdivant},   year = {2025},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":"/index.html","id":"ggvfields-","dir":"","previous_headings":"","what":"Vector Field Visualizations with ggplot2","title":"Vector Field Visualizations with ggplot2","text":"ggvfields powerful package visualizing vector fields, stream plots, related visualizations. provides tools explore directional data, including options vector smoothing, gradient fields, potential visualizations, dynamic flow representations.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"Install ggvfields directly GitHub: Load package R: Generate sample wind data:","code":"remotes::install_github(\"dusty-turner/ggvfields\") library(\"ggvfields\") #> Loading required package: ggplot2 options(ggplot2.continuous.colour=\"viridis\") set.seed(1234) n <- 10  wind_data <- data.frame(   lon = rnorm(n),    lat = rnorm(n),    dir = runif(n, -pi/2, pi/2),   spd = rchisq(n, df = 2) ) |>    within({     fx    <- spd * cos(dir)          # Compute the x-component of the vector     fy    <- spd * sin(dir)          # Compute the y-component of the vector     xend  <- lon + fx                # Compute the end x-coordinate     yend  <- lat + fy                # Compute the end y-coordinate   })  round(wind_data, digits = 2)  #>      lon   lat   dir   spd  yend  xend    fy    fx #> 1  -1.21 -0.48  0.17  3.55  0.11  2.29  0.59  3.50 #> 2   0.28 -1.00  0.46  2.19 -0.03  2.24  0.97  1.96 #> 3   1.08 -0.78 -0.59  2.99 -2.44  3.56 -1.66  2.48 #> 4  -2.35  0.06  0.38 10.81  4.10  7.68  4.04 10.03 #> 5   0.43  0.96 -0.53  3.45 -0.80  3.40 -1.76  2.97 #> 6   0.51 -0.11  0.01  3.91 -0.09  4.41  0.02  3.91 #> 7  -0.57 -0.51  0.56  0.16 -0.43 -0.44  0.08  0.13 #> 8  -0.55 -0.91 -0.05  0.42 -0.93 -0.12 -0.02  0.42 #> 9  -0.56 -0.84 -0.80  0.42 -1.14 -0.28 -0.30  0.29 #> 10 -0.89  2.42  0.83  4.17  5.51  1.91  3.09  2.80"},{"path":[]},{"path":"/index.html","id":"geom_vector-and-geom_vector2","dir":"","previous_headings":"Core Features","what":"geom_vector and geom_vector2","title":"Vector Field Visualizations with ggplot2","text":"functions allow flexible visualizations vector data. geom_vector: default, maps norm (magnitude) vector color. helps compare relative magnitudes visually color gradients. Users need explicitly specify unless overriding default behavior.  geom_vector also supports xend/yend format well fx/fy format.  geom_vector2: Maps norm vector directly length. provides intuitive representation magnitude. done mapping length = after_stat(norm) default.","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, xend = xend, yend = yend)) ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, fx = fx, fy = fy)) ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, fx = fx, fy = fy))"},{"path":"/index.html","id":"why-length-mapping-matters","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Why Length Mapping Matters","title":"Vector Field Visualizations with ggplot2","text":"Mapping vector lengths norms allows viewers immediately understand magnitude differences without relying solely color. norm w = (u, v) calculated $$|\\mathbf{w}| = \\sqrt{u^2 + v^2}$$ . feature geom_vector2 enhances interpretability using actual vector lengths represent magnitude. legend reflects scaling ensures consistent interpretation.","code":""},{"path":"/index.html","id":"polar-coordinates-support","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Polar Coordinates Support","title":"Vector Field Visualizations with ggplot2","text":"geom_vector geom_vector2 also support polar coordinates, vectors specified using magnitude (distance) direction (angle). Instead providing Cartesian components (fx, fy xend, yend), users can directly supply polar data. feature simplifies workflows directional data works subsequent relevant functions handle polar coordinates. Polar coordinates can visualized like :","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, distance = spd, angle = dir))"},{"path":"/index.html","id":"normalize-and-center","dir":"","previous_headings":"Core Features > geom_vector and geom_vector2","what":"Normalize and Center","title":"Vector Field Visualizations with ggplot2","text":"Two important options geom_vector subsequent functions normalize center - default TRUE. options help control visual representation vectors: normalize: set TRUE, option scales vector unit length, can help avoid overplotting dense vector fields. especially useful direction vectors important magnitude. However, ’s important note normalize different mapping norm vector length aesthetic. normalization ensures vectors visually uniform length, mapping norm length preserves relative differences magnitude varying vector lengths based actual norms. center: default, center also set TRUE, meaning midpoint vector placed corresponding (x, y) coordinate, effectively “centering” vector point. center FALSE, base vector anchored (x, y) point, vector extends outward . example turns default behavior:","code":"ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, fx = fx, fy = fy), center = FALSE, normalize = FALSE)"},{"path":"/index.html","id":"geom_stream_field-and-geom_stream_field2","dir":"","previous_headings":"Core Features","what":"geom_stream_field and geom_stream_field2","title":"Vector Field Visualizations with ggplot2","text":"geom_stream_field: Computes stream fields user-defined function maps average speed color.  geom_stream_field2: Similar geom_stream_field, removes mapping, arrow heads, designates stream origins dot.  geom_stream_field options Grid Density: user can control density grid using n parameter.  Length adjusting L parameter, can control length stream.  Normalization default, lengths stream normalized length. turning normalization , stream becomes time normalized. words, stream grows amount time.  Time normalization turned , can grow stream amount time using T parameter.","code":"f <- function(v) c(-v[2], v[1]) # Define a function for the field  ggplot() +   geom_stream_field(fun = f) ggplot() +   geom_stream_field2(fun = f) ggplot() +   geom_stream_field(fun = f, n = 4) ggplot() +   geom_stream_field(fun = f, n = 4, L = .8) ggplot() +   geom_stream_field(fun = f, n = 4, normalize = FALSE) ggplot() +   geom_stream_field(fun = f, n = 4, normalize = FALSE, T = .5)"},{"path":"/index.html","id":"geom_vector_field-and-geom_vector_field2","dir":"","previous_headings":"Core Features","what":"geom_vector_field and geom_vector_field2","title":"Vector Field Visualizations with ggplot2","text":"Vector fields can seen special cases streams. geom_vector_field: Computes vector fields user-defined function maps norm color.  geom_vector_field2: Similar geom_vector_field, maps norm vectors lengths instead color.  geom_vector_field options Length streams, can set L parameter grow vectors specified length.  Center turn normalization centering, get raw look vector field data.","code":"ggplot() +   geom_vector_field(fun = f) ggplot() +   geom_vector_field2(fun = f) ggplot() +   geom_vector_field(fun = f, n = 4, L = 2) ggplot() +   geom_vector_field(fun = f, n = 4, normalize = FALSE, center = FALSE)"},{"path":"/index.html","id":"automatic-limit-detection","dir":"","previous_headings":"Core Features > geom_vector_field and geom_vector_field2","what":"Automatic Limit Detection","title":"Vector Field Visualizations with ggplot2","text":"geom_stream_field geom_vector_field can automatically determine plot limits based function provided. happens data exists previous layers base ggplot object. allows limits inferred context. Customize limits xlim ylim parameters needed control.","code":"ggplot(data = wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector() +   geom_stream_field(fun = f) # Automatically determines limits based on existing data"},{"path":"/index.html","id":"custom-grids","dir":"","previous_headings":"Core Features > geom_vector_field and geom_vector_field2","what":"Custom Grids","title":"Vector Field Visualizations with ggplot2","text":"geom_*_field functions allow user plot custom evaluation locations. user can specify specific points evaluated field can also use “hex” pattern.  shows custom grid.","code":"ggplot() +   geom_stream_field(fun = f, grid = \"hex\") custom <- data.frame(x = c(1,3,5), y = c(3,4,5))  ggplot() +   geom_stream_field(fun = f, grid = custom, normalize = FALSE, center = FALSE, L = 4)"},{"path":"/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced Features","title":"Vector Field Visualizations with ggplot2","text":"section introduces tools deeper exploration vector fields, allowing users analyze properties smoothness, uncertainty, gradients, potential functions. tools provide mathematical insights structure vector fields extend visualization capabilities beyond basic representations. Key capabilities include: Smoothing Vector Fields: Approximate trends noisy vector data compute prediction intervals uncertainty visualization. Gradient Potential Analysis: Derive gradient fields study scalar variations visualize potential functions identify conservative fields. Dynamic Flow Stream Plots: Model particle trajectories visualize dynamic behavior time-dependent fields. Mathematical Feature Mapping: Display vector norms, divergence, curl highlight flow strength, expansion, rotational behavior. ggvfields offers two techniques smoothing noisey vector field data. geom_stream_smooth geom_vector_smooth geom_stream_smooth uses dynamical systems approach geom_vector_smooth offers miltivariate regression approach accounts uncertainty.","code":""},{"path":"/index.html","id":"geom_stream_smooth","dir":"","previous_headings":"Advanced Features","what":"geom_stream_smooth","title":"Vector Field Visualizations with ggplot2","text":"","code":"ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(normalize = FALSE) +   geom_stream_smooth(aes(x = lon, y = lat, fx = fx, fy = fy)) +   lims(x = c(-3,3), y = c(-1.5,3)) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_stream()`)."},{"path":"/index.html","id":"geom_vector_smooth","dir":"","previous_headings":"Advanced Features","what":"geom_vector_smooth","title":"Vector Field Visualizations with ggplot2","text":"Provides smoothed estimates vector fields applying statistical techniques observed vectors. Smoothing performed using multivariate linear model defined : $$ \\begin{pmatrix} \\hat{dx} \\\\ \\hat{dy} \\end{pmatrix} = \\beta_0 + \\beta_1 x + \\beta_2 y + \\beta_3 xy $$ β coefficients estimated ordinary least squares (OLS). approach captures linear interaction effects approximate underlying vector field. function also creates prediction interval around vector specified conf_level argument defaults .95. Evaluating Specific Points: evaluation points provided, smoothing performed locations prediction intervals can visualized using either wedges ellipses indicate uncertainty.  Using Wedges Visualize Uncertainty:  Grid-Based Smoothing:  Custom Grid Resolution:  Altering Confidence Level options, can change confidence level default another value using conf_level argument.","code":"eval_point <- data.frame(x = .5, y = .5)   ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point) +   lims(x = c(-7,10), y = c(-3,3)) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_stream()`). ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\") ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector_smooth(pi_type = \"wedge\") +    geom_vector() ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector_smooth(n = 6, pi_type = \"wedge\") ggplot(wind_data, aes(x = lon, y = lat, fx = fx, fy = fy)) +   geom_vector(normalize = FALSE) +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\") +   geom_vector_smooth(eval_points = eval_point, pi_type = \"wedge\", conf_level = .7)"},{"path":"/index.html","id":"geom_gradient_field-and-geom_gradient_field2","dir":"","previous_headings":"Advanced Features","what":"geom_gradient_field and geom_gradient_field2","title":"Vector Field Visualizations with ggplot2","text":"geom_gradient_field function computes visualizes gradient fields derived scalar functions displays gradient vector field scalar function, f(x, y). gradient given : $$ \\nabla f(x, y) = \\left( \\frac{\\partial f}{\\partial x}, \\frac{\\partial f}{\\partial y} \\right) $$ vector field points direction greatest rate increase scalar function. function numerically evaluates partial derivatives visualizes resulting vectors. Gradient Field Norm Color:  Gradient Field Norm Length:  Adjusting Grid Density: n parameter adjusts density grid used evaluate gradient field. Decreasing n reduces number vectors producing coarser grid increasing n results finer grid vectors.","code":"paraboloid_field <- function(v) {   x <- v[1]   y <- v[2]   x^2 + y^2 }  ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_gradient_field2(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10)) ggplot() +   geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10), n = 5)"},{"path":"/index.html","id":"geom_potential","dir":"","previous_headings":"Advanced Features","what":"geom_potential","title":"Vector Field Visualizations with ggplot2","text":"potential function represents scalar field whose gradient produces vector field. used describe conservative vector fields exist curl vector field 0. geom_potential function computes visualizes scalar potential function given conservative vector field. input function must represent 2D vector field output corresponding potential function. input field conservative, function checks condition numerically based tolerance parameter. tolerance determines strictly field must satisfy conservation condition.  tolerance parameter can adjusted control sensitivity conservativeness check. Decreasing tolerance makes check stricter, increasing allows numerical error.  functions, can increase granulatity visualization n parameter.","code":"conservative_fun <- function(v) {  x <- v[1]  y <- v[2]  c(sin(x) + y, x - sin(y)) }  ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi)) ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi), tol = 1e-4) ggplot() +   geom_potential(fun = conservative_fun, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi), n = 50)"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions feedback, please open issue.","code":""},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Projects","title":"Vector Field Visualizations with ggplot2","text":"ggquiver: Quiver plots vector fields. ggarchery: Arrow segment visualizations. ggfields: Vector field layers similar geom_spoke.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 ggvfields authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/efield.html","id":null,"dir":"Reference","previous_headings":"","what":"Electric field — efield","title":"Electric field — efield","text":"vector field generated collection fixed electrical charges, dictated Coulomb's law. function mainly used provide examples visualizing vector fields ggvfields.","code":""},{"path":"/reference/efield.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Electric field — efield","text":"","code":"efield(u, charge_positions, charges, k = 1, q_test = +1)  efield_maker(   charge_positions = rbind(c(-1, -1), c(1, 1)),   charges = c(-1, +1),   k = 1,   q_test = +1 )"},{"path":"/reference/efield.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Electric field — efield","text":"u position test charge. charge_positions positions fixed charges generating electric field. Defaulted efield_maker(). charges charges points placed positions charge_positions. Defaulted efield_maker(). k constant proportionality, defaulted 1. See examples rigorous use physical constants. q_test test charge, defaulted +1.","code":""},{"path":"/reference/efield.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Electric field — efield","text":"vector containing force felt test charge account electric field.","code":""},{"path":[]},{"path":"/reference/efield.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Electric field — efield","text":"","code":"if (FALSE) { # set a - charge at (-1,-1) and a + charge at (1,1) charge_positions <- rbind(c(-1,-1), c(1,1)) charges <- c(-1, +1)   # calculate force on test charge (+1) at c(0,1), ignoring physical constants efield(c(0,1), charge_positions, charges)   # efield_maker() simply wraps this function, defaulting to those charges f <- efield_maker() f(c(0,1))  ggplot() +   geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +   scale_color_viridis_c(trans = \"log10\")  # electric constant from https://en.wikipedia.org/wiki/Vacuum_permittivity ep0 <- 8.854187818814e-12 k <- (4*pi*ep0)^-1 efield(c(0,1), charge_positions, charges, k) }"},{"path":"/reference/geom_gradient_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"functions provide convenient ggplot2 layers drawing gradient fields computing gradient scalar field. user-defined function (fun) specifies behavior scalar field taking numeric vector length 2 (representing \\((x, y)\\)) returning single numeric value. underlying StatStreamField computes gradient via numerical differentiation (using numDeriv::grad()) GeomStream renders resulting vectors.","code":""},{"path":"/reference/geom_gradient_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"","code":"geom_gradient_field(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = TRUE,   type = \"vector\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 30, length = grid::unit(0.02, \"npc\"), type = \"closed\") )  stat_gradient_field(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = TRUE,   type = \"vector\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 30, length = grid::unit(0.02, \"npc\"), type = \"closed\") )  geom_gradient_field2(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = FALSE,   type = \"stream\",   normalize = TRUE,   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = NULL )  stat_gradient_field2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   max_it = 1000,   T = NULL,   L = NULL,   center = FALSE,   type = \"stream\",   normalize = TRUE,   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = NULL )"},{"path":"/reference/geom_gradient_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"mapping set aesthetic mappings created ggplot2::aes(). Additional aesthetics color, size, linetype, alpha can defined. geom_gradient_field default mapping includes color = after_stat(norm), whereas geom_gradient_field2 default mapping includes length = after_stat(norm). data data frame containing input data. stat statistical transformation use data layer. Defaults StatStreamField. position Position adjustment, either string result position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function defines scalar field. take numeric vector length 2 (representing \\((x, y)\\)) return single numeric value. (Required) xlim Numeric vector length two. Specifies limits x-axis domain. Defaults c(-1, 1). ylim Numeric vector length two. Specifies limits y-axis domain. Defaults c(-1, 1). n Integer. Grid resolution specifying number seed points along axis. Higher values produce denser gradient field. Defaults 11. max_it Integer. Maximum number integration steps allowed computing gradient stream. Defaults 1000. T Numeric. Time increment used numerical integration normalize FALSE. provided, computed automatically based grid spacing vector field’s magnitude. L Numeric. Target length gradient vectors streamlines. normalize TRUE, computed vectors scaled length L. provided, L computed automatically grid spacing. center Logical. TRUE, centers seed points original (x, y) becomes midpoint. type Character. Specifies type field compute: use \"stream\" generate integrated streamlines \"vector\" individual vector segments. Defaults \"stream\". normalize Logical. TRUE, gradient vectors normalized based grid spacing. Defaults TRUE. tail_point Logical. TRUE, point drawn tail gradient vector. eval_point Logical. TRUE, point drawn evaluation point gradient computed. Defaults FALSE. grid data frame containing precomputed grid points seed placement. NULL (default), regular Cartesian grid generated based xlim, ylim, n. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). arrow grid::arrow() specification add arrowheads gradient vectors. geom_gradient_field, default closed arrow 30° angle length 0.02 npc; geom_gradient_field2, default NULL. geom geometric object used render streamline (used stat_stream(); defaults GeomStream).","code":""},{"path":"/reference/geom_gradient_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"ggplot2 layer computes plots gradient field numerically differentiating scalar field.","code":""},{"path":"/reference/geom_gradient_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"Two variants provided: geom_gradient_field() uses default mapping sets color = after_stat(norm). geom_gradient_field2() uses default mapping sets length = after_stat(norm) (color unmapped default).","code":""},{"path":"/reference/geom_gradient_field.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"geom_gradient_field() geom_gradient_field2() understand following aesthetics (required aesthetics bold): x: x-coordinate seed point. y: y-coordinate seed point. color: geom_gradient_field, color gradient vector. geom_gradient_field2, color mapped default. length: geom_gradient_field2, computed vector norm. size, linetype, alpha: Additional aesthetics control appearance.","code":""},{"path":"/reference/geom_gradient_field.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"following variables computed internally StatStreamField generating gradient field scalar function: norm Euclidean norm gradient vector, calculated \\(\\sqrt{fx^2 + fy^2}\\). value used, default, mapping color scaling arrow lengths visualization. avg_spd variable may represent average speed computed gradient magnitude. default mapping geom_gradient_field, color aesthetic mapped after_stat(avg_spd).","code":""},{"path":"/reference/geom_gradient_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Gradient Field Layer in ggplot2 — geom_gradient_field","text":"","code":"Si <- matrix(c(1, 0.75, 0.75, 1), nrow = 2) f <- function(u) exp(-as.numeric(u %*% solve(Si) %*% u) / 2) / (2 * pi * det(Si))  ggplot() +   geom_gradient_field(fun = f, xlim = c(-3, 3), ylim = c(-3, 3))   if (FALSE) { df <- expand.grid(x = seq(-3, 3, 0.1), y = seq(-3, 3, 0.1)) |>   transform(fxy = apply(cbind(x, y), 1, f))  ggplot() +   geom_raster(aes(x, y, fill = fxy), data = df) +   geom_gradient_field(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) +   coord_equal()  fxy <- function(x, y) apply(cbind(x,y), 1, f)  ggplot() +   ggdensity::geom_hdr_fun(fun = fxy, xlim = c(-3,3), ylim = c(-3,3)) +   geom_gradient_field(fun = f, xlim = c(-3,3), ylim = c(-3,3)) +   coord_equal()    library(\"ggdensity\")   fxy <- function(x, y) apply(cbind(x, y), 1, f)   fxy(1, 2)   f(1:2)    ggplot() +     geom_hdr_fun(fun = fxy, xlim = c(-3, 3), ylim = c(-3, 3)) +     geom_gradient_field(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) +     coord_equal() }"},{"path":"/reference/geom_potential.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"geom_potential() adds raster layer ggplot object, visualizing potential function derived conservative vector field. computes potential numerically specified grid displays heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"","code":"geom_potential(   mapping = NULL,   data = NULL,   stat = StatPotential,   position = \"identity\",   ...,   na.rm = FALSE,   inherit.aes = TRUE,   show.legend = NA,   fun,   xlim = NULL,   ylim = NULL,   n = 51,   tol = 1e-06,   verify_conservative = FALSE )  stat_potential(   mapping = NULL,   data = NULL,   geom = GeomPotential,   position = \"identity\",   ...,   na.rm = FALSE,   inherit.aes = TRUE,   show.legend = NA,   fun,   xlim = NULL,   ylim = NULL,   n = 51,   tol = 1e-06,   verify_conservative = FALSE )"},{"path":"/reference/geom_potential.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"mapping set aesthetic mappings created ggplot2::aes(). (Optional) data data displayed layer. NULL, data inherited plot. stat statistical transformation use data (default: StatPotential). position Position adjustment, either string result position adjustment function. ... arguments passed ggplot2::layer() underlying methods. na.rm Logical. FALSE (default), missing values removed warning. inherit.aes Logical. FALSE, overrides default aesthetics rather combining . show.legend Logical. layer included legends? fun function takes numeric vector length 2 (c(x, y)) returns numeric value, defining conservative vector field. (Required) xlim Numeric vector length 2 defining domain limits x-axis. Defaults c(-1, 1). ylim Numeric vector length 2 defining domain limits y-axis. Defaults c(-1, 1). n Integer. Number grid points along axis computing potential. Defaults 21. tol Numeric. Tolerance verifying vector field conservative. Defaults 1e-6. verify_conservative Logical. TRUE, function verifies provided vector field conservative (.e., mixed partial derivatives equal within specified tolerance). Defaults FALSE. geom geometric object used render potential function. Defaults GeomPotential.","code":""},{"path":"/reference/geom_potential.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"ggplot2 layer produces potential function heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"geom_potential() accepts aesthetics supported GeomRaster. particular, key aesthetics include: fill: computed potential value grid cell, mapped color scale. x y: coordinates grid cell centers. (calculated) alpha: Controls transparency raster fill. Additional raster-specific aesthetics (e.g. controlled scale_fill_gradient(), scale_fill_viridis_c(), etc.) can applied modify appearance potential heatmap.","code":""},{"path":"/reference/geom_potential.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"following variable computed internally StatPotential potential function calculation: Potential scalar potential value computed numerically grid point. represents accumulated potential reference point (typically lower bounds xlim ylim) given point. value mapped fill aesthetic raster layer.","code":""},{"path":"/reference/geom_potential.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute and Plot Potential Function from a Conservative Vector Field — geom_potential","text":"","code":"# Define a conservative vector field function f <- function(u) {   x <- u[1]; y <- u[2]   c(sin(x) + y, x - sin(y)) }  # Create the potential function heatmap ggplot() + geom_potential(fun = f)  ggplot() + geom_potential(fun = f, verify_conservative = TRUE)"},{"path":"/reference/geom_stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Streamline Plot Layer in ggplot2 — geom_stream","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"geom_stream() generates ggplot2 layer visualizes data continuous streams temporal variable t. stream defined required aesthetics x, y, t, optionally grouped group (mapped id). Within group, data points automatically ordered t form continuous path.","code":""},{"path":"/reference/geom_stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"","code":"geom_stream(   mapping = NULL,   data = NULL,   stat = StatStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  stat_stream(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: Must include x, y, t; additionally, group used differentiate streams (provided, id mapped group automatically). data data frame object, ggplot2::layer(). stat statistical transformation use data layer; defaults StatStream. position Position adjustment, either string result position adjustment function. ... arguments passed underlying layers customization. na.rm Logical. FALSE (default), missing values removed warning. TRUE, missing values silently removed. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . arrow.fill optional parameter specifying color arrow head. Defaults NULL inherets fill/alpha aes(). lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). arrow optional grid::arrow() specification place arrowheads streamline. geom geometric object used render streamline (used stat_stream(); defaults GeomStream).","code":""},{"path":"/reference/geom_stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"ggplot2 layer can added plot produce streamline visualization.","code":""},{"path":"/reference/geom_stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"two variants: geom_stream(): convenient wrapper sets stat = StatStream uses ggplot2::GeomPath default. stat_stream(): Provides direct access reordering stat (.e. StatStream) advanced customization, using GeomStream drawing.","code":""},{"path":"/reference/geom_stream.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"geom_stream() stat_stream() understand following aesthetics (required aesthetics bold): x: Horizontal position. y: Vertical position. t: Temporal ordered variable used sequence data points. group: Grouping variable multiple streams (automatically mapped id absent). color: Color stream. linetype: Type line used draw stream. linewidth: Thickness stream line. alpha: Transparency stream.","code":""},{"path":"/reference/geom_stream.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"Data Ordering: t provided, error thrown. present, points within group sorted t prior drawing stream. Arrows: arrow parameter can used indicate direction along stream.","code":""},{"path":"/reference/geom_stream.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"calculated 'stat' part layers can accessed delayed evaluation. norm variable calculated Euclidean distance derived ranges x y values. serves normalization factor vector lengths normalize parameter active. avg_spd Represents average speed, defined length stream divided time took traverse distance.","code":""},{"path":"/reference/geom_stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Streamline Plot Layer in ggplot2 — geom_stream","text":"","code":"n <- 25 s <- seq(0, 1, length.out = n+1)[-(n+1)] df <- data.frame( \"t\" = s, \"x\" = cos(2*pi*s), \"y\" = sin(2*pi*s) )  ggplot(df) +   geom_stream(aes(x, y, t = t)) +   coord_equal()   ggplot(df) +   geom_stream(aes(x, y, t = t, alpha = t), size = 5) +   coord_equal() #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead.   ggplot(df) +   geom_path(aes(x, y, alpha = t), size = 5) +   coord_equal()    stream_1 <- data.frame(   x = c(0, 3),   y = c(0, 0),   t = 0:1 )  stream_2 <- data.frame(   x = c(1, 1),   y = c(1, 5),   t = 0:1 )  stream_3 <- data.frame(   x = c(2, 5),   y = c(2, 6),   t = 0:1 )  streams <- rbind(   cbind(stream_1, id = 1),   cbind(stream_2, id = 2),   cbind(stream_3, id = 3) )  ggplot(stream_1) +   geom_stream(aes(x = x, y = y, t = t))   # set group aes if multiple vectors ggplot(streams) +   geom_stream(aes(x = x, y = y, t = t, group = id))"},{"path":"/reference/geom_stream_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Field Layer in ggplot2 — geom_stream_field","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"geom_stream_field() creates ggplot2 layer integrates user-defined vector field function \\(f(x, y) \\(dx, dy)\\) grid seed points within specified domain. function numerically integrates field starting seeds, producing streamlines visualize flow. useful visualizing vector fields, flow patterns, trajectories, fluid dynamics gradient fields.","code":""},{"path":"/reference/geom_stream_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"","code":"geom_stream_field(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   max_it = 1000L,   tol = sqrt(.Machine$double.eps),   T = NULL,   L = NULL,   center = TRUE,   type = \"stream\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   method = \"rk4\",   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 30, length = unit(0.02, \"npc\"), type = \"closed\") )  stat_stream_field(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   max_it = 1000,   tol = sqrt(.Machine$double.eps),   T = NULL,   L = NULL,   center = TRUE,   type = \"stream\",   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   method = \"rk4\",   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 30, length = unit(0.02, \"npc\"), type = \"closed\") )  geom_stream_field2(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   max_it = 1000,   tol = sqrt(.Machine$double.eps),   L = NULL,   center = FALSE,   type = \"stream\",   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   method = \"rk4\" )  stat_stream_field2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   max_it = 1000,   tol = sqrt(.Machine$double.eps),   L = NULL,   center = FALSE,   type = \"stream\",   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   method = \"rk4\" )"},{"path":"/reference/geom_stream_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"mapping set aesthetic mappings created ggplot2::aes(). (Optional) data data frame object, ggplot2::layer(). (Optional) stat statistical transformation use data (default: StatStreamField). position Position adjustment, either string result position adjustment function. ... arguments passed ggplot2::layer() underlying geometry/stat. na.rm Logical. FALSE (default), missing values removed warning. TRUE, missing values silently removed. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function two variables, fun(x, y), returning two-element vector \\((dx, dy)\\) defines local flow direction point. xlim Numeric vector length 2 specifying domain limits \\(x\\)-direction. Defaults \\(c(-1, 1)\\). ylim Numeric vector length 2 specifying domain limits \\(y\\)-direction. Defaults \\(c(-1, 1)\\). n Integer two-element numeric vector specifying grid resolution (number seed points) along axis. Defaults 11, producing \\(11 \\times 11\\) grid. args list additional arguments passed fun. max_it integer(1); Maximum number integration steps per streamline (default: 1000L). tol numeric(1); tolerance used determine sink hit, among things (default: sqrt(.Machine$double.eps)). T Numeric. normalize = FALSE, streamline integrated fixed time T cropped match duration fastest streamline reaching arc length L. normalize = TRUE, integration instead stops cumulative arc length reaches L, parameter T ignored. L Numeric. Maximum arc length streamline. normalize = TRUE, integration stops cumulative arc length reaches L. normalize = FALSE, streamlines initially computed fixed time T cropped truncated duration takes fastest streamline reach arc length L. Defaults NULL (suitable default computed grid spacing). center Logical. TRUE (default), centers seed points (resulting streamlines) original (x, y) becomes midpoint. type Character. Either \"stream\" (default) \"vector\". \"stream\" computes full streamline integrating directions (center = TRUE), \"vector\" computes single vector. normalize Logical. normalize = TRUE (default), streamline integrated cumulative arc length reaches specified value L, ensuring streams uniform, normalized length based grid spacing. normalize = FALSE, integration runs fixed time (T), afterward, streamlines cropped duration takes fastest one reach length L, allowing variations arc lengths reflect differences flow speeds. tail_point Logical. TRUE, draws point tail (starting point) streamline. Defaults FALSE. eval_point Logical. TRUE, draws point evaluation point field computed. Defaults FALSE. grid data frame containing precomputed grid points seed placement. NULL (default), regular Cartesian grid generated based xlim, ylim, n. method Character. Integration method (e.g. \"rk4\" Runge-Kutta 4, \"euler\" Euler's method). Defaults \"rk4\". lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). arrow grid::arrow() specification adding arrowheads streamlines. Defaults closed arrow 30° angle length 0.02 npc. geom geometric object used render streamlines (defaults GeomStream).","code":""},{"path":"/reference/geom_stream_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"ggplot2 layer computes renders streamlines specified domain.","code":""},{"path":"/reference/geom_stream_field.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"geom_stream_field() (stat variant) inherit aesthetics GeomStream understand following: x: x-coordinate seed point. y: y-coordinate seed point. color: Color, typically used represent computed statistics (e.g. average speed). linetype: Type line used draw streamlines. linewidth: Thickness streamlines. alpha: Transparency streamlines.","code":""},{"path":"/reference/geom_stream_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"streamlines generated numerically integrating vector field defined fun(x, y). normalize = TRUE, integration stops cumulative arc length reaches L; otherwise, integration runs time T reached. T L provided incompatible combinations, one parameter ignored. computed paths rendered GeomStream.","code":""},{"path":"/reference/geom_stream_field.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"following variables computed internally StatStreamField integration vector field: avg_spd vector fields, computed total arc length divided integration time, providing estimate average speed. used scale vector lengths mapping length = after_stat(norm). t integration time computed point along streamline. d distance consecutive points along computed path. l cumulative arc length along streamline, calculated cumulative sum d.","code":""},{"path":"/reference/geom_stream_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Field Layer in ggplot2 — geom_stream_field","text":"","code":"f <- function(u) c(-u[2], u[1])  # the basic usage involves providing a fun, xlim, and ylim ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))  if (FALSE) { # if unspecified, xlim and ylim default to c(-1,1). we use this in what # follows to focus on other parts of the code ggplot() + geom_stream_field(fun = f) ggplot() + geom_stream_field(fun = f, center = FALSE)  ggplot() + geom_stream_field(fun = f, normalize = FALSE) ggplot() + geom_stream_field(fun = f, normalize = FALSE, center = FALSE)  # run systems until specified lengths ggplot() + geom_stream_field(fun = f, normalize = TRUE, L = .8) ggplot() + geom_vector_field(fun = f, normalize = TRUE, L = .3) ggplot() + geom_vector_field(fun = f, normalize = FALSE, L = 2)  # run systems for specified times ggplot() + geom_stream_field(fun = f, normalize = FALSE, T = .1)  # tail and eval points ggplot() + geom_stream_field(fun = f, tail_point = TRUE) ggplot() + geom_stream_field(fun = f, eval_point = TRUE)  # changing the grid of evaluation ggplot() + geom_stream_field(fun = f) ggplot() + geom_stream_field(fun = f, grid = \"hex\") ggplot() + geom_stream_field(fun = f, grid = \"hex\", n = 5) ggplot() + geom_stream_field(fun = f, n = 5) ggplot() + geom_stream_field(fun = f, xlim = c(-5, 5)) + coord_equal() ggplot() + geom_stream_field(fun = f, xlim = c(-5, 5), n = c(21, 11)) + coord_equal() ggplot() + geom_stream_field(fun = f) ggplot() + geom_stream_field(fun = f, grid = grid_hex(c(-1,1), c(-1,1), .2))  # using other ggplot2 tools f <- efield_maker()  ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))  ggplot() +   geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +   scale_color_viridis_c(trans = \"log10\")  ggplot() +   geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +   scale_color_viridis_c(trans = \"log10\") +   coord_equal()   # other vector fields f <- function(u) u ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))  f <- function(u) c(2,1) ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))    # neat examples f <- function(u) {   x <- u[1]; y <- u[2]   c(y, y*(-x^2 - 2*y^2 + 1) - x) } ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2), type = \"vector\")  f <- function(u) {   x <- u[1]; y <- u[2]   c(y, x - x^3) } ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2),   grid = grid_hex(c(-2,2), c(-2,2), .35))  f <- function(u) {   x <- u[1]; y <- u[2]   c(x^2 - y^2, x^2 + y^2 - 2) } ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2),   grid = grid_hex(c(-2,2), c(-2,2), .35))    # bug here with alpha ggplot() +   geom_stream_field(fun = f, aes(alpha = after_stat(t)), xlim = c(-2,2), ylim = c(-2,2)) +   scale_alpha(range  = c(0,1))  ggplot() +   geom_stream_field(     fun = f, xlim = c(-1,1), ylim = c(-1,1),     linewidth = .75, arrow = arrow(length = unit(0.015, \"npc\"))   ) }"},{"path":"/reference/geom_stream_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smoothed Vector Field Layer — geom_stream_smooth","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"geom_stream_smooth() creates ggplot2 layer visualizes smooth vector field based raw vector data. function fits multivariate linear model (default, using formula cbind(fx, fy) ~ x * y) predict vector displacements given location. also handles different input formats converting polar coordinates endpoint data vector displacements.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"","code":"geom_stream_smooth(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = 11,   xlim = NULL,   ylim = NULL,   normalize = TRUE,   center = FALSE,   type = \"vector\",   formula = cbind(fx, fy) ~ x * y,   eval_points = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )"},{"path":"/reference/geom_stream_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: Must include x y; vector displacements defined fx fy. data data frame containing raw vector data. stat statistical transformation use data. Defaults \"vector_smooth\". position Position adjustment, either string result position adjustment function. ... Additional arguments passed layer. fixed parameter color provided, color = \"blue\" used. na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . n integer vector specifying grid resolution smoothing. xlim Numeric vector length 2 specifying domain limits \\(x\\)-direction. Defaults \\(c(-1, 1)\\). ylim Numeric vector length 2 specifying domain limits \\(y\\)-direction. Defaults \\(c(-1, 1)\\). normalize Logical. TRUE, vector endpoints scaled unit length scaled L (default: TRUE). center Logical. TRUE, vector recentered original (x, y) becomes midpoint (default TRUE geom_vector() FALSE geom_vector2()). type Character. Either \"stream\" (default) \"vector\". \"stream\" computes full streamline integrating directions (center = TRUE), \"vector\" computes single vector. formula formula specifying multivariate linear model used smoothing. Defaults cbind(fx, fy) ~ x * y. eval_points data frame evaluation points, NULL. provided, specifies grid smoothing model evaluated; NULL, grid generated based n. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). arrow optional grid::arrow() specification add arrowheads vectors (default: grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\")).","code":""},{"path":"/reference/geom_stream_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"ggplot2 layer can added ggplot object display smoothed vector field. norm Computed Euclidean norm displacement, \\(\\sqrt{fx^2 + fy^2}\\), variable used normalize scale vector lengths. t integration time evaluation time computed point along smoothed field (applicable). d incremental distance consecutive computed points. l cumulative arc length along smoothed vector field, calculated cumulative sum d.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"geom_stream_smooth() supports following aesthetics (required aesthetics bold): x: x-coordinate vector's starting point. y: y-coordinate vector's starting point. fx: displacement along x-axis. fy: displacement along y-axis. color: fixed color vector. Defaults \"blue\". linewidth: thickness vector line. linetype: type vector line (e.g., solid dashed). alpha: transparency level vector. arrow: Specifies arrowheads vectors.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"Data Conversion: xend/yend missing NA, function computes . first checks vector displacements (fx fy); present, computes \\(xend = x + fx,\\quad yend = y + fy.\\) Otherwise, checks polar coordinates (angle distance) computes \\(xend = x +   distance \\times \\cos(angle \\times 180/\\pi),\\quad yend = y + distance \\times   \\sin(angle \\times 180/\\pi).\\) error thrown neither set available. Smoothing: multivariate linear model fitted using provided formula data. model used predict vector displacements specified grid point, generating smooth approximation vector field. Prediction Intervals: Two types prediction intervals can displayed: Ellipse: Depicts joint uncertainty (covariance) predicted fx fy. Wedge: Indicates range possible vector directions magnitudes.","code":""},{"path":"/reference/geom_stream_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smoothed Vector Field Layer — geom_stream_smooth","text":"","code":"# Define a true vector field function f <- function(u) {   x <- u[1]; y <- u[2]   c(x^2 - y^2, x^2 + y^2 - 2) }  # Alternative example function f <- function(u) c(-u[2], u[1])  # Visualize the vector field ggplot() + geom_stream_field(fun = f, xlim = c(-2, 2), ylim = c(-2, 2))   # Generate design points n <- 20 df <- data.frame(x = runif(n, -2, 2), y = runif(n, -2, 2))  # Sample function values at design points fdf <- as.data.frame(t(apply(df, 1, f))) colnames(fdf) <- c(\"fx\", \"fy\") df <- cbind(df, fdf)  # Visualize raw vector field data ggplot(df) + geom_vector(aes(x, y, fx = fx, fy = fy))   # Add smoothed layer using default model ggplot(df) +   geom_vector(aes(x, y, fx = fx, fy = fy)) +   geom_stream_smooth(formula = cbind(fx, fy) ~ x * y)   # Use a more complex polynomial model ggplot(df) +   geom_vector(aes(x, y, fx = fx, fy = fy)) +   geom_stream_smooth(formula = cbind(fx, fy) ~ poly(x, 2) * poly(y, 2), data = df)   # Fit a linear model and use it for prediction fhat <- function(u) {   model <- lm(cbind(fx, fy) ~ x * y, data = df)   predict(model, newdata = data.frame(x = u[1], y = u[2])) |> as.numeric() }  # Visualize estimated field with the raw vector field ggplot(df) +   geom_stream_field(fun = fhat, normalize = FALSE, color = \"#3366FF\") +   geom_vector(aes(x, y, fx = fx, fy = fy))   # Generate a hexagonal grid hex_lattice <- grid_hex(xlim = c(-5, 5), ylim = c(-5, 5), d = 1)  # Use the hexagonal grid in geom_stream_field ggplot(data = df) +   geom_vector(aes(x, y, fx = fx, fy = fy), color = \"black\", normalize = FALSE) +   geom_stream_smooth(eval_points = hex_lattice)   # user specified point  eval_pts <- data.frame(x = c(0, 1), y = c(2, -1))  ggplot(data = df) +   geom_vector(aes(x, y, fx = fx, fy = fy), color = \"black\", normalize = FALSE) +   geom_stream_smooth(eval_points = eval_pts)"},{"path":"/reference/geom_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Layers for ggplot2 — geom_vector","title":"Vector Layers for ggplot2 — geom_vector","text":"Create layers drawing vectors ggplot2 plots. functions accept wide-format data required aesthetics x y plus either xend yend one alternative specifications: fx fy, angle/ angle_deg distance.","code":""},{"path":"/reference/geom_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Layers for ggplot2 — geom_vector","text":"","code":"geom_vector(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   L = NULL,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  stat_vector(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   L = NULL,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\") )  geom_vector2(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   tail_point = TRUE,   eval_point = FALSE,   L = NULL,   arrow = NULL )  stat_vector2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   tail_point = TRUE,   eval_point = FALSE,   L = NULL,   arrow = NULL )"},{"path":"/reference/geom_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Layers for ggplot2 — geom_vector","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: Must include x y; addition, either xend yend one alternative specifications (fx/ fy angle/ angle_deg distance) must provided. data data frame containing vector data wide format. stat statistical transformation use data (default: StatVector). position Position adjustment, either string result position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . center Logical. TRUE, vector recentered original (x, y) becomes midpoint (default TRUE geom_vector() FALSE geom_vector2()). normalize Logical. TRUE, vector endpoints scaled unit length scaled L (default: TRUE). tail_point Logical. TRUE, point drawn tail (starting point) vector (default FALSE geom_vector() TRUE geom_vector2()). eval_point Logical. TRUE, point drawn evaluation point corresponding original (untransformed) seed point centering normalization (default: FALSE). L Numeric scalar. desired length vectors data units. NULL (default), value computed automatically based plot’s x y limits. arrow optional grid::arrow() specification add arrowheads vectors (default: grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\")). geom geometric object used render streamline (used stat_stream(); defaults GeomStream).","code":""},{"path":"/reference/geom_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Layers for ggplot2 — geom_vector","text":"ggplot2 layer can added plot.","code":""},{"path":"/reference/geom_vector.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Layers for ggplot2 — geom_vector","text":"specifying vector direction using polar coordinates, can provide either: angle: vector direction radians. angle_deg: vector direction degrees (automatically converted radians). endpoints computed translating starting point using polar coordinates along supplied distance. data converted long format (two rows per vector) via StatVector rendered GeomStream. Optionally, arrowheads can added indicate direction. two variants: geom_vector(): Uses user-supplied aesthetic mapping. geom_vector2(): Uses underlying stat (StatVector) adds default mapping length = after_stat(norm), making computed vector norm available aesthetic.","code":""},{"path":"/reference/geom_vector.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Vector Layers for ggplot2 — geom_vector","text":"geom_vector() geom_vector2() understand following aesthetics (required aesthetics bold): x y xend yend fx (alternative specification) fy (alternative specification) angle (vector direction radians; alternative specification) angle_deg (vector direction degrees; alternative specification, converted radians) distance (angle/angle_deg, used compute endpoints) alpha color fill group linetype size","code":""},{"path":"/reference/geom_vector.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Vector Layers for ggplot2 — geom_vector","text":"calculated 'stat' part layers can accessed delayed evaluation. norm Calculated Euclidean distance starting point (x, y) computed endpoint (xend, yend). value used normalize vector length normalize parameter set TRUE.","code":""},{"path":"/reference/geom_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Layers for ggplot2 — geom_vector","text":"","code":"set.seed(1234) n <- 10  # Generate wind data in polar coordinates data <- data.frame(   x = rnorm(n),   y = rnorm(n),   dir = runif(n, -pi, pi), # angle in radians   spd = rchisq(n, df = 2)  # speed ) |>   transform(fx = spd * cos(dir), fy = spd * sin(dir))  # Using fx/fy to compute endpoints ggplot(data, aes(x, y)) +   geom_vector(aes(fx = fx, fy = fy))   # Using angle (in radians) and distance to compute endpoints ggplot(data, aes(x, y)) +   geom_vector(aes(angle = dir, distance = spd))   # Using angle_deg (in degrees) and distance to compute endpoints vectors3 <- data.frame(   x = c(0, 1, 2),   y = c(0, 1, 2),   angle_deg = c(0, 90, 45),   angle = c(0, pi/2, pi/4),   distance = c(3, 4, 5) ) ggplot(vectors3, aes(x, y)) +   geom_vector(aes(angle_deg = angle_deg, distance = distance))   # Basic usage with explicit start and end points: vectors1 <- data.frame(   x    = c(0, 1, 2),   y    = c(0, 1, 2),   xend = c(3, 1, 5),   yend = c(0, 5, 6) ) ggplot(vectors1, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_vector()   # Using center = TRUE to recenter vectors: ggplot(vectors1, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_vector(center = TRUE)   # Using normalize = TRUE to adjust vectors to unit length: ggplot(vectors3, aes(x = x, y = y, angle = angle, distance = distance)) +   geom_vector(normalize = TRUE)   # Using geom_vector2, which adds a default mapping for `length` ggplot(vectors1, aes(x = x, y = y, xend = xend, yend = yend)) +   geom_vector2()"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector Field Layers for ggplot2 — geom_vector_field","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"functions provide convenient ggplot2 layers drawing vector fields using streamlines.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"","code":"geom_vector_field(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 30, length = unit(0.02, \"npc\"), type = \"closed\") )  stat_vector_field(   mapping = NULL,   data = NULL,   stat = StatStreamField,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = grid::arrow(angle = 30, length = unit(0.02, \"npc\"), type = \"closed\") )  geom_vector_field2(   mapping = NULL,   data = NULL,   stat = StatStreamField,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = FALSE,   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = NULL )  stat_vector_field2(   mapping = NULL,   data = NULL,   geom = GeomStream,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = FALSE,   fun,   xlim = NULL,   ylim = NULL,   n = 11,   args = list(),   center = FALSE,   tail_point = TRUE,   eval_point = FALSE,   grid = NULL,   lineend = \"butt\",   linejoin = \"round\",   linemitre = 10,   arrow = NULL )"},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"mapping set aesthetic mappings created ggplot2::aes(). Additional aesthetics color, size, linetype, alpha can defined. geom_vector_field, default mapping includes color = after_stat(norm), whereas geom_vector_field2 default mapping includes length = after_stat(norm). data data frame containing input data. stat statistical transformation use data layer. Defaults StatStreamField. position Position adjustment, either string result call position adjustment function. ... arguments passed ggplot2::layer(). na.rm Logical. FALSE (default), missing values removed warning. show.legend Logical. layer included legends? inherit.aes Logical. FALSE, overrides default aesthetics rather combining . fun function defines vector field. take numeric vector length 2 (representing \\((x, y)\\)) return numeric vector length 2 (representing \\((dx, dy)\\)). (Required) xlim Numeric vector length two. Specifies limits x-axis domain. Defaults c(-1, 1). ylim Numeric vector length two. Specifies limits y-axis domain. Defaults c(-1, 1). n Integer. Grid resolution specifying number seed points along axis. Higher values produce denser vector field. Defaults 11. args List additional arguments passed function defined fun. center Logical. TRUE, centers seed points vectors original (x, y) becomes midpoint. Defaults differ variants. normalize Logical. TRUE, stream lengths normalized based grid spacing. FALSE, default arc length used. (Default TRUE; TRUE, converted internally \"vector\".) tail_point Logical. TRUE, point drawn tail streamline. eval_point Logical. TRUE, point drawn evaluation point, corresponding original (untransformed) seed point centering normalization applied. grid data frame containing precomputed grid points seed placement. NULL (default), regular Cartesian grid generated based xlim, ylim, n. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). linemitre Line mitre limit (number greater 1). arrow grid::arrow() specification add arrowheads streamlines. geom_vector_field, default closed arrow 30° angle length 0.02 npc; geom_vector_field2 default NULL. geom geometric object used render streamline (used stat_stream(); defaults GeomStream).","code":""},{"path":"/reference/geom_vector_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"ggplot2 layer computes plots vector field using streamlines. norm Calculated Euclidean distance starting point (x, y) computed endpoint. Used normalize vector.","code":""},{"path":"/reference/geom_vector_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"user-defined function (fun) specifies behavior vector field taking numeric vector length 2 (representing \\((x, y)\\)) returning numeric vector length 2 (representing \\((dx, dy)\\)). underlying StatStreamField computes streamlines based vector field function, GeomStream renders . Two variants provided: geom_vector_field() uses default mapping sets color = after_stat(norm). geom_vector_field2() uses default mapping sets length = after_stat(norm) (color unmapped default).","code":""},{"path":"/reference/geom_vector_field.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"geom_vector_field() geom_vector_field2() understand following aesthetics (required aesthetics bold): x: x-coordinate vector's starting point. y: y-coordinate vector's starting point. fx: horizontal component vector displacement. fy: vertical component vector displacement. color: color vector lines (default mapping geom_vector_field). length: computed vector norm (default mapping geom_vector_field2). linetype: type vector line (e.g., solid, dashed). linewidth: thickness vector line. alpha: transparency vector.","code":""},{"path":[]},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vector Field Layers for ggplot2 — geom_vector_field","text":"","code":"f <- function(u) c(-u[2], u[1]) ggplot() + geom_vector_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))  if (FALSE) { # xlim and ylim default to (-1,1), so for ease of illustration we remove them  ggplot() + geom_vector_field(fun = f) ggplot() + geom_vector_field(fun = f, grid = \"hex\")  ggplot() + geom_vector_field2(fun = f) ggplot() + geom_vector_field2(fun = f, grid = \"hex\")  f <- efield_maker() ggplot() + geom_vector_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) ggplot() + geom_vector_field2(fun = f, xlim = c(-2,2), ylim = c(-2,2)) }"},{"path":"/reference/geom_vector_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smooth Vector Plot Layer — geom_vector_smooth","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth() creates ggplot2 layer visualizes smooth vector field. takes raw vector data applies smoothing (via multivariate linear model) estimate underlying vector field. functionality analogous geom_smooth() ggplot2 tailored vector data rather scalar responses.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"geom_vector_smooth(   mapping = NULL,   data = NULL,   stat = \"vector_smooth\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   method = \"lm\",   se = TRUE,   se.circle = TRUE,   pi_type = \"ellipse\",   conf_level = c(0.95, NA),   formula = cbind(fx, fy) ~ x * y,   eval_points = NULL,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\") )  GeomVectorSmooth"},{"path":"/reference/geom_vector_smooth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"object class GeomVectorSmooth (inherits GeomSegment, Geom, ggproto, gg) length 6.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"mapping set aesthetic mappings created ggplot2::aes(). Required: Must include x y; vector displacements defined fx fy. data data frame containing raw vector data. stat statistical transformation use data (default: \"vector_smooth\"). position Position adjustment, either string result position adjustment function. ... arguments passed ggplot2::layer() underlying geometry/stat. n integer vector specifying number grid points along axis smoothing. method Character. Specifies smoothing method. Currently, supported method \"lm\", fits multivariate linear model predict vector displacements (fx, fy) x y. se Logical. TRUE, prediction (confidence) intervals computed plotted. se.circle Logical. TRUE, circles drawn around origin vector represent radius prediction interval. pi_type Character. Determines display style prediction intervals: \"wedge\" (default): Angular wedges drawn. \"ellipse\": Ellipses used represent covariance predictions. pi_type set \"ellipse\" eval_points NULL, revert \"wedge\". conf_level Numeric. Specifies confidence level prediction intervals. Default 0.95. formula formula specifying multivariate linear model used smoothing. default cbind(fx, fy) ~ x * y. eval_points data frame evaluation points. provided, specify grid smoothing model evaluated. NULL, grid generated based n. arrow grid::arrow() specification arrowheads smoothed vectors. geom geometric object used render smoothed vector field (defaults GeomVectorSmooth).","code":""},{"path":"/reference/geom_vector_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"ggplot2 layer can added plot create smooth vector field visualization.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth() supports following aesthetics (required aesthetics bold): x: x-coordinate vector's starting point. y: y-coordinate vector's starting point. fx: horizontal component vector displacement. fy: vertical component vector displacement. color: color vector lines. linewidth: thickness vector lines. linetype: type vector lines (e.g., solid, dashed). alpha: transparency level vectors. arrow: aesthetic can used modify arrowhead properties.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"Multivariate Linear Model: \"lm\" method fits multivariate linear model predict vector displacements (fx fy) based coordinates x y, including interaction terms (x * y). model smooths raw vector data provide estimate underlying vector field. Prediction Intervals: se = TRUE, prediction intervals computed smoothed vectors. Two types intervals supported: Ellipse: Ellipses represent joint uncertainty (covariance) predicted fx fy. Wedge: Wedges (angular sectors) indicate range possible vector directions magnitudes. type interval displayed controlled pi_type, confidence level set via conf_level.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"# Function to generate vectors generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(     sin(x) + sin(y) + rnorm(1, 5, 1),     sin(x) - sin(y) - rnorm(1, 5, 1)   ) }  # Set seed for reproducibility set.seed(123)  # Create sample points and compute vectors sample_points <- data.frame(   x = runif(30, 0, 10),   y = runif(30, 0, 10) )  result <- t(apply(sample_points, 1, generate_vectors))  sample_points$xend <- result[, 1] sample_points$yend <- result[, 2] sample_points$fx <- sample_points$xend - sample_points$x sample_points$fy <- sample_points$yend - sample_points$y sample_points$distance <- sqrt(sample_points$fx^2 + sample_points$fy^2) sample_points$angle <- atan2(sample_points$fy, sample_points$fx)  # Define evaluation points eval_points <- data.frame(   x = c(0, 7.5),   y = c(10, 5) )  # Example 1: ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(fx = fx, fy = fy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(fx = fx, fy = fy), n = 5) +   ggtitle(\"Smoothed Vector Field\") #> Warning: ! eval_points is `NULL`; changing pi_type from \"ellipse\" to \"wedge\".   # Example 2: Ellipse with eval_points ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(fx = fx, fy = fy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(fx = fx, fy = fy), eval_points = eval_points, conf_level = c(0.9)) +   ggtitle(\"Smoothed Vector Field with Ellipse Intervals\")   # Example 3: Wedge with eval_points ggplot(sample_points, aes(x = x, y = y)) +   geom_vector(aes(fx = fx, fy = fy, color = NULL), center = FALSE, alpha = 0.2) +   geom_vector_smooth(aes(fx = fx, fy = fy), eval_points = eval_points, pi_type = \"ellipse\") +   ggtitle(\"Smoothed Vector Field with Wedge Intervals\")"},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/grid_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Hexagonal Lattice — grid_hex","title":"Generate a Hexagonal Lattice — grid_hex","text":"function generates hexagonal lattice points within given x y limits, using specified hexagon diameter. diameter 2 times distance adjacent x (y) values, see examples.","code":""},{"path":"/reference/grid_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Hexagonal Lattice — grid_hex","text":"","code":"grid_hex(xlim, ylim, d)"},{"path":"/reference/grid_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Hexagonal Lattice — grid_hex","text":"xlim numeric vector length 2 specifying x-axis limits. ylim numeric vector length 2 specifying y-axis limits. d numeric value specifying hexagon diameter.","code":""},{"path":"/reference/grid_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Hexagonal Lattice — grid_hex","text":"data frame two columns, x y, containing coordinates hexagonal grid points.","code":""},{"path":"/reference/grid_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Hexagonal Lattice — grid_hex","text":"","code":"xlim <- c(-1, 1) ylim <- c(-1, 0)  grid <- grid_hex(xlim, ylim, .25)  head( grid ) #>       x          y #> 1 -1.00 -0.8660254 #> 2 -0.75 -0.8660254 #> 3 -0.50 -0.8660254 #> 4 -0.25 -0.8660254 #> 5  0.00 -0.8660254 #> 6  0.25 -0.8660254 str( grid ) #> 'data.frame':\t43 obs. of  2 variables: #>  $ x: num  -1 -0.75 -0.5 -0.25 0 0.25 0.5 0.75 1 -0.875 ... #>  $ y: num  -0.866 -0.866 -0.866 -0.866 -0.866 ... plot( grid, asp = 1 )   grid$x |> unique() |> sort() |> diff() #>  [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125 #> [13] 0.125 0.125 0.125 0.125"},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Continuous Scale for Vector Length — scale_length_continuous","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous() provides continuous scale controlling length aesthetic ggplot. particularly useful working vector plots vector lengths mapped continuous scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(max_range = 0.5, ...)"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"max_range maximum value input rescaled. Numeric scalar specifying upper bound output range. 0 1. ... arguments passed continuous_scale().","code":""}]
