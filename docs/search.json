[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2024). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney Sturdivant},   year = {2024},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Vector Field Visualizations with ggplot2","text":"ggvfields provides tools visualizing vector fields, stream plots, soon complex numbers .","code":"remotes::install_github(\"dusty-turner/ggvfields\") library(\"ggvfields\") #> Loading required package: ggplot2 options(ggplot2.continuous.colour=\"viridis\")"},{"path":[]},{"path":"/index.html","id":"geom_vector_field","dir":"","previous_headings":"Usage","what":"geom_vector_field()","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field() function generates vector field plot layer using user-defined function compute vector components. function abstracts away mathematical computations required generate vector field, user need manually calculate input vector components geom_segment(). simplifies process, making easier create vector field visualizations without dealing underlying math.  function allows user map several characteristics vector field different aesthetic mappings.","code":"f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) # = f(x,y) }  ggplot() +   geom_vector_field(fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   coord_fixed()"},{"path":"/index.html","id":"norm","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Norm","title":"Vector Field Visualizations with ggplot2","text":"norm vector w = (u,v) given : $|\\mathbf{w}| = \\sqrt{u^2 + v^2}$ can visualize norm mapping value norm color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   coord_fixed()"},{"path":"/index.html","id":"divergence","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Divergence","title":"Vector Field Visualizations with ggplot2","text":"Divergence operation vector field tells us field behaves toward away point. Locally, divergence vector field F ℝ2 particular point measure “outflowing-ness” vector field particular point. divergence vector field results scalar function. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field ℝ2, divergence F defined : $$ \\text{div} \\, \\mathbf{F} = \\frac{\\partial \\mathbf{F}_x}{\\partial x} + \\frac{\\partial \\mathbf{F}_y}{\\partial y} $$ visualize divergence vector field:","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(divergence)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   ) +   coord_fixed()"},{"path":"/index.html","id":"curl","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Curl","title":"Vector Field Visualizations with ggplot2","text":"Curl operation vector field measures rotation swirling strength point. two dimensions, curl vector field F ℝ2 scalar value indicates much vector field tends rotate around point. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field ℝ2, curl F defined : $$ \\text{curl} \\, \\mathbf{F} = \\frac{\\partial \\mathbf{F}_y}{\\partial x} - \\frac{\\partial \\mathbf{F}_x}{\\partial y} $$ visualize curl:","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(curl)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   ) +   coord_fixed()"},{"path":"/index.html","id":"aesthetics-in-development","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Aesthetics In Development","title":"Vector Field Visualizations with ggplot2","text":"Another aesthetic development available mapping length. length aesthetic maps value computed measure length vector.","code":"ggplot() +   geom_vector_field(     aes(length = after_stat(norm), color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   coord_fixed() +   theme(legend.box = \"horizontal\")"},{"path":"/index.html","id":"geom_vector","dir":"","previous_headings":"Usage","what":"geom_vector()","title":"Vector Field Visualizations with ggplot2","text":"geom_vector() function generates plot layer visualizes vectors line segments optional arrowheads. designed help visualize directional data, wind directions, gradients, flow fields. vectors defined start (x, y) end (xend, yend) coordinates, alternatively angular (angle) distance (distance) components.","code":""},{"path":"/index.html","id":"cartesian","dir":"","previous_headings":"Usage > geom_vector()","what":"Cartesian","title":"Vector Field Visualizations with ggplot2","text":"","code":"set.seed(1234) n <- 10 wind_data_polar <- data.frame(   lon = rnorm(n),    lat = rnorm(n),    wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2) )  wind_data_cartesian <- within(wind_data_polar, {   wind_lon_comp <- wind_spd * cos(wind_dir)   wind_lat_comp <- wind_spd * sin(wind_dir)   xend <- lon + wind_lon_comp   yend <- lat + wind_lat_comp })  wind_data_cartesian |>    ggplot() +   geom_vector(aes(x = lon, y = lat, xend = xend, yend = yend)) +   labs(title = \"Wind Vectors (Cartesian Input)\",        x = \"Longitude\", y = \"Latitude\") +   coord_equal()"},{"path":"/index.html","id":"polar","dir":"","previous_headings":"Usage > geom_vector()","what":"Polar","title":"Vector Field Visualizations with ggplot2","text":"","code":"wind_data_polar |>    ggplot() +   geom_vector(aes(x = lon, y = lat, angle = wind_dir * 180 / pi, distance = wind_spd)) +   labs(title = \"Wind Vectors (Polar Input)\",        x = \"Longitude\", y = \"Latitude\") +   coord_equal()"},{"path":"/index.html","id":"geom_streamplot","dir":"","previous_headings":"Usage","what":"geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"geom_streamplot() function generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.  chop parameter (defaulted TRUE) allows chop trajectories segments. can useful better visualization streamlines long complex. may useful break streamlines.  may also useful break streamlines segments. scale_stream parameter (defaults 1) adjusts segmentation streamlines specifying proportion streamline length used divide smaller segments.","code":"f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     ) +   coord_fixed() +   theme_minimal() ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     chop = FALSE     ) +   coord_fixed() +   theme_minimal() ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     chop = TRUE, scale_stream = .9,     ) +   coord_fixed() +   theme_minimal()"},{"path":"/index.html","id":"map-calculus-measures-to-aesthetics","dir":"","previous_headings":"Usage","what":"Map Calculus Measures to Aesthetics","title":"Vector Field Visualizations with ggplot2","text":"","code":"ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     aes(color = after_stat(log(divergence + 10)))     ) +   coord_fixed() +   theme_minimal()  #> Warning in log(divergence + 10): NaNs produced"},{"path":"/index.html","id":"animate-geom_streamplot","dir":"","previous_headings":"Usage","what":"Animate geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"","code":"# Create stream plot with rownum aesthetic p <- ggplot() +  geom_streamplot(    aes(rownum = after_stat(rownum)),      fun = f, xlim = c(-3, 3), ylim = c(-3, 3),  ) +  coord_fixed() +  theme_bw() # Create an animation transition plot anim <- animation_transition(plot = p) +     gganimate::transition_reveal(rownum) +  gganimate::ease_aes('linear')  # Animate the plot gganimate::animate(anim, nframes = 25, fps = 5, end_pause = 0, renderer = gganimate::gifski_renderer())"},{"path":"/index.html","id":"geom_flow","dir":"","previous_headings":"Usage","what":"geom_flow()","title":"Vector Field Visualizations with ggplot2","text":"geom_flow() function generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field, visualizing trajectory particles time. flow line traces “marble” move vector field dropped specific starting point, making intuitive way visualize dynamic systems. default, color flow line corresponds time (t), meaning color transitions along path represent progression time. flow line evolves, shows particle move time following vector field. can change coloring mapping aesthetics computed measures needed, time remains default. Flows computed using deSolve package’s ODE solver, rk4 method (fourth-order Runge-Kutta method) used numerical integration. solver ensures accurate efficient computation flow lines, abstracting away complex calculations user.  example, flow lines evolve according vector field defined f. color along line show particle moves time (t) within vector field.","code":"ggplot() +   geom_flow(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)     ) +   coord_fixed() +   theme_minimal()"},{"path":"/index.html","id":"adaptive-parameters","dir":"","previous_headings":"Usage > geom_flow()","what":"Adaptive Parameters","title":"Vector Field Visualizations with ggplot2","text":"Several parameters geom_flow() adaptive, meaning adjust automatically based characteristics vector field plot limits. adaptive parameters help optimize flow visualization without requiring manual tuning: threshold_distance: parameter controls minimum distance adjacent flow lines prevent overlapping. specified, calculated automatically half Euclidean distance adjacent grid points. ensures plot remains uncluttered, flow lines spaced appropriately based grid dimensions (n) axis limits (xlim, ylim). T: parameter represents total time span ODE solver trace flow paths. T NULL, automatically computed starting center plot estimating long take particle travel center farthest boundary vector field - assuming vector field cyclic reach sync. ensures trajectories capture significant dynamics vector field without extending unnecessarily. iterations: parameter defines number time steps ODE solver use tracing flow lines. higher number iterations results smoother detailed flows. iterations left NULL, computed adaptively based value T, ensuring longer time spans result iterations smoother paths. adaptive parameters allow geom_flow() create well-balanced plot dynamically adjusting precision spacing flow lines, based underlying vector field plot limits.","code":""},{"path":"/index.html","id":"example-with-custom-parameters","dir":"","previous_headings":"Usage > geom_flow()","what":"Example with Custom Parameters","title":"Vector Field Visualizations with ggplot2","text":"example customize grid size, time span (T), number iterations, threshold distance flow lines:","code":"ggplot() +   geom_flow(     fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 1000, threshold_distance = 0.5, T = 5) +   coord_fixed() +   theme_minimal()"},{"path":"/index.html","id":"geom_complex_function","dir":"","previous_headings":"Usage","what":"geom_complex_function()","title":"Vector Field Visualizations with ggplot2","text":"geom_complex_function() function generates vector field plot layer using user-defined function compute vector components. function abstracts away mathematical computations required generate vector field, user need manually calculate input vector components geom_segment(). simplifies process, making easier create vector field visualizations without dealing underlying math.  can enhance plot little help biscale. Using biscale, can apply bivariate color scale plot, allows us represent two variables—angle (direction) magnitude (intensity)—simultaneously. makes easier visualize properties change across field.","code":"f <- function(z) (z^2 + 1) / (z^2 - 1)  ggplot() +   geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +   labs(x = \"Real\", y = \"Imaginary\") +   coord_fixed() +   theme(legend.box = \"horizontal\") library(biscale) library(cowplot)  plot <-   ggplot() +   geom_complex_function(aes(fill = after_stat(bi_class)),     fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100     ) +     bi_scale_fill(pal = \"DkBlue\") +     labs(       title = \"\",       x = \"Real (Re)\",       y = \"Imaginary (Im)\"     ) +     bi_theme(base_size = 16) +     theme(legend.position = \"none\") +   coord_fixed()     legend <- bi_legend(pal = \"DkBlue\",                     xlab = \"Angle\",                     ylab = \"Magnitude\",                     size = 6)  ggdraw() +   draw_plot(plot, 0, 0, .8, 1) +     draw_plot(legend, x = .55, y = .6, width = .3, height = 0.3)"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions issues, please open issue GitHub contact maintainer.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"can install development version GitHub:","code":"devtools::install_github(\"dusty-turner/ggvfields\")"},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Vector Field Visualizations with ggplot2","text":"creating vector fields, ggquiver package provides quiver plots visualize vector fields, ggarchery package can handling segments arrowheads.","code":""},{"path":"/reference/animation_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition a streamplot to an animation ready object — animation_transition","title":"Transition a streamplot to an animation ready object — animation_transition","text":"animation_transition() takes streamline plot alters work gganimate syntax.","code":""},{"path":"/reference/animation_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"animation_transition(plot)"},{"path":"/reference/animation_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition a streamplot to an animation ready object — animation_transition","text":"plot ggplot object data plot attributes extracted create animation transition.","code":""},{"path":"/reference/animation_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition a streamplot to an animation ready object — animation_transition","text":"ggplot object animation transition effect applied.","code":""},{"path":"/reference/animation_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"if (FALSE) { library(ggplot2) library(ggvfields) library(gganimate)  # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the stream plot layer p <- ggplot() +   geom_streamplot(     aes(rownum = after_stat(rownum)),     fun = f, xlim = c(-3, 3), ylim = c(-3, 3)   ) +   coord_fixed() +   theme_bw()  # Create an animation transition plot anim <- animation_transition(plot = p) +   transition_reveal(rownum) +   ease_aes('linear')  # Animate the plot anim <- animate(anim, nframes = 25, fps = 20, end_pause = 0, renderer = gifski_renderer()) }"},{"path":"/reference/geom_complex_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Complex Vector Field Geom Layer — geom_complex_function","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"geom_complex_function() generates raster plot layer user-defined complex function. hue color corresponds argument (angle) complex number resulting function, indicating direction vector. lightness color reflects magnitude vector, providing visual representation direction intensity.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"geom_complex_function(   mapping = NULL,   data = NULL,   stat = \"complex_function\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   relim,   imlim,   n = 10,   ... )  stat_complex_function(   mapping = NULL,   data = NULL,   geom = \"raster\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   relim,   imlim,   n = 10,   ... )"},{"path":"/reference/geom_complex_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes complex number input returns complex number. relim numeric vector length 2 giving real-axis limits. imlim numeric vector length 2 giving imaginary-axis limits. n integer specifying number grid points along axis. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_complex_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"library(ggplot2) # Example user-defined function f <- function(z) (z^2 + 1) / (z^2 - 1)  # Create a ggplot with the vector field layer ggplot() +   geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +   labs(x = \"Real\", y = \"Imaginary\")"},{"path":"/reference/geom_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Flow Plot Geom Layer — geom_flow","title":"Create a Flow Plot Geom Layer — geom_flow","text":"geom_flow() generates flow plot layer based user-defined vector field function. lines plot represent flow data points vector field, visualizing vectors evolve grid points.","code":""},{"path":"/reference/geom_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"geom_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = NULL,   threshold_distance = NULL,   T = NULL,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = NULL,   threshold_distance = NULL,   T = NULL,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Flow Plot Geom Layer — geom_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector length 2 (representing x y coordinates) returns numeric vector length, representing vector field point. xlim numeric vector length 2 specifying x-axis limits plot. ylim numeric vector length 2 specifying y-axis limits plot. n numeric vector length 2 specifying grid dimensions (number rows columns) starting points flows. iterations numeric value specifying number time steps ODE solver used generate flow paths. Higher values result smoother detailed flows. NULL, default value calculated based time span (T). threshold_distance numeric value specifying minimum distance adjacent flow lines prevent overlap. provided, defaults half Euclidean distance adjacent grid points. T numeric value representing total time span ODE solver trace flow. NULL, automatically calculated based distance longest-separated points vector field. arrow Arrow specification, created grid::arrow(), adding arrows flow lines. Defaults arrow angle 20, length 0.015 plot, closed type. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Flow Plot Geom Layer — geom_flow","text":"ggplot2 layer adds flow lines ggplot object, visualizing movement points vector field.","code":""},{"path":"/reference/geom_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Flow Plot Geom Layer — geom_flow","text":"flow paths computed using deSolve package's ODE solver, rk4 method (fourth-order Runge-Kutta method) used default numerical integration.","code":""},{"path":"/reference/geom_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"library(ggplot2) library(grid) # For arrow()  # Example vector field function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a flow plot ggplot() +   geom_flow(     fun = f, n = c(21, 21),     xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 100, threshold_distance = NULL,     arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\")   ) +   coord_fixed() +   theme_minimal() #> Warning: Computation failed in `stat_flow()`. #> Caused by error in `compute_group()`: #> ! object 'f' not found"},{"path":"/reference/geom_streamplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Plot Geom Layer — geom_streamplot","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"geom_streamplot() generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"geom_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )  stat_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )"},{"path":"/reference/geom_streamplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions. mask_shape_type character string specifying mask shape type: \"square\", \"diamond\", \"inset_square\", \"circle\". iterations integer specifying number steps perform numerical integration flow. stream_density numeric value controls density streamlines. Higher values produce streamlines. Default 1. arrow Arrow specification, created grid::arrow(). chop logical value indicating whether chop trajectories segments. scale_stream numeric value specifying maximum allowable segment size fraction total range chopping trajectories. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_streamplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"ggplot2 layer can added ggplot object produce stream plot.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"library(ggplot2) # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) } ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3), n = c(15, 15),     iterations = 100, chop = TRUE, scale_stream = 1,     mask_shape_type = \"square\"   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Plot Layer — geom_vector","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector generates ggplot layer visualizes vectors line segments optional arrowheads. vectors defined start (x, y) end (xend, yend) coordinates, can directly provided derived angular (angle) distance (distance) information.","code":""},{"path":"/reference/geom_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"geom_vector(   mapping = NULL,   data = NULL,   stat = \"vector\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   scale_length = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_vector(   mapping = NULL,   data = NULL,   geom = \"vector\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   scale_length = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  StatVector  GeomVector"},{"path":"/reference/geom_vector.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Vector Plot Layer — geom_vector","text":"object class StatVector (inherits Stat, ggproto, gg) length 5. object class GeomVector (inherits GeomSegment, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Plot Layer — geom_vector","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). center Logical; TRUE, centers vector specified (x, y) location. FALSE, vector origin specified (x, y) location. centering enabled, vector's midpoint aligns original (x, y) location. normalize Logical; TRUE, normalizes vector unit length applying scaling. ensures vectors length, adjusted scale_length. Normalization useful avoiding overplotting ensuring visual consistency, especially dense plots. scale_length Numeric; scaling factor applied vectors adjust length. Defaults 1. value applied normalization (normalize = TRUE), allowing control final vector lengths. arrow Arrow specification, created grid::arrow(). controls appearance arrowheads end vectors, including properties like angle, length, type. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Plot Layer — geom_vector","text":"ggplot2 layer can added ggplot object produce vector plot.","code":""},{"path":"/reference/geom_vector.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector understands following aesthetics (required aesthetics bold): x: x-coordinate start point vector. y: y-coordinate start point vector. xend: x-coordinate end point vector (optional angle distance provided). yend: y-coordinate end point vector (optional angle distance provided). angle: angle vector degrees (optional, used distance). distance: distance/magnitude vector (optional, used angle). color: color vector line. linewidth: thickness vector line. linetype: type vector line (solid, dashed, etc.). alpha: transparency level vector. arrow: Specification arrowheads end vector.","code":""},{"path":"/reference/geom_vector.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Create a Vector Plot Layer — geom_vector","text":"norm magnitude vector, calculated \\(\\|\\mathbf{v}\\| = \\sqrt{(xend - x)^2 + (yend - y)^2}\\).","code":""},{"path":"/reference/geom_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"# Example using Cartesian input: precomputed xend and yend set.seed(1234) n <- 10 wind_data_polar <- data.frame(   lon = rnorm(n),   lat = rnorm(n),   wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2) )  wind_data_cartesian <- within(wind_data_polar, {   wind_lon_comp <- wind_spd * cos(wind_dir)   wind_lat_comp <- wind_spd * sin(wind_dir)   xend <- lon + wind_lon_comp   yend <- lat + wind_lat_comp })  ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, xend = xend, yend = yend)) +   labs(title = \"Wind Vectors (Cartesian Input)\",        x = \"Longitude\", y = \"Latitude\")   # Example using Polar input: angle (wind_dir) and distance (wind_spd) ggplot(wind_data_polar) +   geom_vector(aes(x = lon, y = lat, angle = wind_dir * 180 / pi, distance = wind_spd)) +   labs(title = \"Wind Vectors (Polar Input)\",        x = \"Longitude\", y = \"Latitude\")"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer — geom_vector_field","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"geom_vector_field generates vector field plot layer using user-defined function compute vector components. particularly useful visualizing vector fields two-dimensional space.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"geom_vector_field(   mapping = NULL,   data = NULL,   stat = \"vectorfield\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   v = c(1, 2),   n = 16,   center = TRUE,   normalize = TRUE,   scale_length = 1.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_vector_field(   mapping = NULL,   data = NULL,   geom = \"segment\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   v = c(1, 2),   n = 16,   center = TRUE,   normalize = TRUE,   scale_length = 1.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  StatVectorField  GeomVectorField"},{"path":"/reference/geom_vector_field.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"object class StatVectorField (inherits Stat, ggproto, gg) length 3. object class GeomVectorField (inherits GeomSegment, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes two arguments (x y coordinates) returns list two components: x y components vector field. xlim, ylim numeric vector length 2 giving x/y-axis limits. v Numeric vector specifying direction vector components calculating directional derivative. n integer specifying number grid points along axis. center Logical; TRUE, centers vector evaluated x/y location. FALSE, vector origin evaluated x/y location. normalize Logical; TRUE, normalizes vector length unit 1 scales avoid overplotting based grid density plot range. scale_length Numeric; scaling factor applied vectors adjust length relative grid spacing. Defaults 1. arrow Arrow specification, created grid::arrow(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_vector_field.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"norm magnitude vector field, computed \\(\\|\\mathbf{w}\\| = \\sqrt{u^2 + v^2}\\). divergence divergence vector field, computed \\(\\nabla \\cdot \\mathbf{F} = \\frac{\\partial f_x}{\\partial x} + \\frac{\\partial f_y}{\\partial y}\\). curl curl vector field, computed \\(\\text{curl} \\, \\mathbf{F} = \\frac{\\partial f_y}{\\partial x} - \\frac{\\partial f_x}{\\partial y}\\).","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"# example user-defined function f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) }  # create a ggplot with the vector field layer ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )   # various options ggplot() +   geom_vector_field(     aes(color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     arrow = arrow(length = unit(1, \"mm\"))   )   ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     n = 10, center = FALSE, normalize = FALSE,     arrow = arrow(length = unit(1, \"mm\"))   )   ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     center = TRUE, color = \"black\",     scale_length = .7   )"},{"path":"/reference/geom_vector_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smooth Vector Plot Layer — geom_vector_smooth","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth generates ggplot layer visualizes smooth vector field taking raw vector data applying smoothing techniques estimate underlying vector field. similar concept geom_smooth() ggplot2 estimates smooth line, vector data instead scalar data.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"StatVectorSmooth  GeomVectorSmooth  stat_vector_smooth(   mapping = NULL,   data = NULL,   geom = \"vector_smooth\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   scale_length = 1,   center = TRUE,   normalize,   method = \"lm\",   se = TRUE,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  geom_vector_smooth(   mapping = NULL,   data = NULL,   stat = \"vector_smooth\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   scale_length = 1,   center = TRUE,   normalize,   method = \"lm\",   se = TRUE,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_vector_smooth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"object class StatVectorSmooth (inherits Stat, ggproto, gg) length 4. object class GeomVectorSmooth (inherits GeomSegment, Geom, ggproto, gg) length 5.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). n integer vector specifying number grid points along axis. scale_length Numeric; scaling factor applied vectors adjust length. Defaults 1. value applied normalization (normalize = TRUE), allowing control final vector lengths. center Logical; TRUE, centers vector evaluated x/y location. FALSE, vector origin evaluated x/y location. centering enabled, vector's midpoint aligns original x/y location. normalize Logical; TRUE, normalizes vector's length unit length applying transformations like centering. FALSE, vectors retain original lengths. method Character; specifies smoothing method used. Accepts \"lm\" linear modeling \"loess\" locally estimated scatterplot smoothing. se Logical; TRUE, plots confidence intervals around smoothed vectors. arrow Arrow specification, created grid::arrow(). controls appearance arrowheads end vectors, including properties like angle, length, type. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"ggplot2 layer can added ggplot object produce smooth vector field plot.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth understands following aesthetics (required aesthetics bold): x: x-coordinate start point vector. y: y-coordinate start point vector. xend: x-coordinate end point vector (optional angle distance provided). yend: y-coordinate end point vector (optional angle distance provided). angle: angle vector degrees (optional, used distance). distance: distance/magnitude vector (optional, used angle). color: color vector line. linewidth: thickness vector line. linetype: type vector line (solid, dashed, etc.). alpha: transparency level vector. arrow: Specification arrowheads end vector. Additionally, using smoothing: norm: computed variable representing magnitude smoothed vector.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"# Define the function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Generate sample points set.seed(123) sample_points <- data.frame(   x = runif(10, min = -10, max = 10),   y = runif(10, min = -10, max = 10) )  # Apply the function to each point result <- t(apply(sample_points, 1, f)) sample_points$xend <- result[, 1] sample_points$yend <- result[, 2]  # Load ggplot2 library library(ggplot2)  # Plot the vectors sample_points |>   ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +     geom_vector_smooth(normalize = TRUE, center = TRUE, se = TRUE, arrow = grid::arrow()) +     geom_vector(color = \"red\") #> Warning: Computation failed in `stat_vector_smooth()`. #> Caused by error in `mutate()`: #> ! could not find function \"mutate\""},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous Scale for Vector Length — scale_length_continuous","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous provides continuous scale length aesthetic geom_vector_field.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(   name = waiver(),   n.breaks = waiver(),   guide = \"none\",   ... )"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"name name scale. n.breaks number breaks. guide guide used scale, legend color bar. Can string specifying type guide, guide object returned call guide function (e.g., guide_legend guide_colorbar). Use \"none\" hide guide. ... Additional parameters passed continuous_scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) } ggplot() +   geom_vector_field(aes(length = after_stat(norm)), fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   scale_length_continuous()"}]
