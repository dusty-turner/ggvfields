[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2024). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney Sturdivant},   year = {2024},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Vector Field Visualizations with ggplot2","text":"ggvfields provides tools visualizing vector fields, stream plots, soon complex numbers .","code":"remotes::install_github(\"dusty-turner/ggvfields\") library(\"ggvfields\") #> Loading required package: ggplot2 options(ggplot2.continuous.colour=\"viridis\")"},{"path":[]},{"path":"/index.html","id":"geom_vector_field","dir":"","previous_headings":"Usage","what":"geom_vector_field()","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field() function generates vector field plot layer using user-defined function compute vector components. function abstracts away mathematical computations required generate vector field, user need manually calculate input vector components geom_segment(). simplifies process, making easier create vector field visualizations without dealing underlying math.  function allows user map several characteristics vector field different aesthetic mappings.","code":"f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) # = f(x,y) }  ggplot() +   geom_vector_field(fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   coord_fixed()"},{"path":"/index.html","id":"norm","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Norm","title":"Vector Field Visualizations with ggplot2","text":"norm vector w = (u,v) given : $|\\mathbf{w}| = \\sqrt{u^2 + v^2}$ can visualize norm mapping value norm color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   coord_fixed()"},{"path":"/index.html","id":"divergence","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Divergence","title":"Vector Field Visualizations with ggplot2","text":"Divergence operation vector field tells us field behaves toward away point. Locally, divergence vector field F ℝ2 particular point measure “outflowing-ness” vector field particular point. divergence vector field results scalar function. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field ℝ2, divergence F defined : $$ \\text{div} \\, \\mathbf{F} = \\frac{\\partial \\mathbf{F}_x}{\\partial x} + \\frac{\\partial \\mathbf{F}_y}{\\partial y} $$ visualize divergence vector field:","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(divergence)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   ) +   coord_fixed()"},{"path":"/index.html","id":"curl","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Curl","title":"Vector Field Visualizations with ggplot2","text":"Curl operation vector field measures rotation swirling strength point. two dimensions, curl vector field F ℝ2 scalar value indicates much vector field tends rotate around point. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field ℝ2, curl F defined : $$ \\text{curl} \\, \\mathbf{F} = \\frac{\\partial \\mathbf{F}_y}{\\partial x} - \\frac{\\partial \\mathbf{F}_x}{\\partial y} $$ visualize curl:","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(curl)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   ) +   coord_fixed()"},{"path":"/index.html","id":"laplace-operator","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Laplace Operator","title":"Vector Field Visualizations with ggplot2","text":"Laplace operator (Laplacian) measures rate average value function around point differs value point. commonly used understand scalar field spreads compresses space. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field ℝ2, Laplacian F defined taking sum second partial derivatives component vector field. Laplacian vector field F thus given : $$ \\Delta \\mathbf{F} = \\frac{\\partial^2 \\mathbf{F}_x}{\\partial x^2} + \\frac{\\partial^2 \\mathbf{F}_x}{\\partial y^2} + \\frac{\\partial^2 \\mathbf{F}_y}{\\partial x^2} + \\frac{\\partial^2 \\mathbf{F}_y}{\\partial y^2} $$ results scalar value describes vector field spreads compresses different points field. visualize Laplace operator vector field, lets look different vector field:","code":"g <- function(v) {   x <- v[1]   y <- v[2]   c(-sin(y), cos(x)) }  ggplot() +   geom_vector_field(     aes(color = after_stat(laplacian)),      n = 15,      fun = g, xlim = c(-2*pi, 2*pi), ylim = c(-2*pi, 2*pi)   ) +   coord_fixed()"},{"path":"/index.html","id":"directional-derivative","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Directional Derivative","title":"Vector Field Visualizations with ggplot2","text":"directional derivative vector field measures rate change field specified direction. provides insight field varies move particular direction. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field ℝ2, v = ⟨vx, vy⟩ direction vector, directional derivative F direction v given : $$ D_{\\mathbf{v}} \\mathbf{F} = \\frac{\\partial \\mathbf{F}_x}{\\partial x} v_x + \\frac{\\partial \\mathbf{F}_x}{\\partial y} v_y + \\frac{\\partial \\mathbf{F}_y}{\\partial x} v_x + \\frac{\\partial \\mathbf{F}_y}{\\partial y} v_y $$ vector field, represents rate change component field direction specified v. visualize Laplace operator vector field:","code":"vec <- c(5, 6)  ggplot() +   geom_vector_field(     aes(color = after_stat(directional_derivative)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     v = vec) +   geom_point(aes(x = vec[1], y = vec[2])) +   coord_fixed()"},{"path":"/index.html","id":"aesthetics-in-development","dir":"","previous_headings":"Usage > geom_vector_field()","what":"Aesthetics In Development","title":"Vector Field Visualizations with ggplot2","text":"Another aesthetic development available mapping length. length aesthetic maps value computed measure length vector.","code":"ggplot() +   geom_vector_field(     aes(length = after_stat(norm), color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   coord_fixed() +   theme(legend.box = \"horizontal\")"},{"path":"/index.html","id":"geom_streamplot","dir":"","previous_headings":"Usage","what":"geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"geom_streamplot() function generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.  chop parameter (defaulted TRUE) allows chop trajectories segments. can useful better visualization streamlines long complex. may useful break streamlines.  may also useful break streamlines segments. scale_stream parameter (defaults 1) adjusts segmentation streamlines specifying proportion streamline length used divide smaller segments.","code":"f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),      ) +   coord_fixed() +   theme_minimal() ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),      chop = FALSE     ) +   coord_fixed() +   theme_minimal() ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),      chop = TRUE, scale_stream = .9,     ) +   coord_fixed() +   theme_minimal()"},{"path":"/index.html","id":"animate-geom_streamplot","dir":"","previous_headings":"Usage","what":"Animate geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"mask_shape_type parameter allows specify mask shape used streamline generation influences streamlines placed closely can approach . default mask shape \"square\", can also use \"diamond\", \"inset_square\", \"circle\". streamline generation, streamline enters specified shape, streamlines enter region. Square Mask (default): Streamlines restricted grid cell square. generally results evenly spaced streamlines. Diamond Mask: Streamlines restricted square grid diamonds inset within square. can create dense pattern can better visualizations functions. - Inset Square Mask: Streamlines restricted grid smaller squares inset within larger squares. can create denser detailed pattern streamlines. Diamond Mask: Streamlines restricted square grid diamonds inset within square. can create dense pattern can better visualizations functions. - Circle Mask: Streamlines restricted grid inset circles inside square grid.","code":"# Create stream plot with rownum aesthetic  p <- ggplot() +  geom_streamplot(    aes(rownum = after_stat(rownum)),     fun = f, xlim = c(-3, 3), ylim = c(-3, 3)  ) +  coord_fixed() +  theme_bw()  # Create an animation transition plot anim <- animation_transition(plot = p) +     gganimate::transition_reveal(rownum) +  gganimate::ease_aes('linear')  # Animate the plot gganimate::animate(anim, nframes = 25, fps = 5, end_pause = 0, renderer = gganimate::gifski_renderer()) #> `geom_path()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_path()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? ggplot() +   geom_streamplot(aes(group = after_stat(id)),                   fun = f, xlim = c(-3, 3), ylim = c(-3, 3), max_length = 10000,                   max_steps = 10000, ds = .05, min_dist = .25,                    mask_shape_type = \"diamond\") +   coord_fixed() +   theme_minimal() #> Warning in geom_streamplot(aes(group = after_stat(id)), fun = f, xlim = c(-3, : #> Ignoring unknown parameters: `max_length`, `max_steps`, and `min_dist`"},{"path":"/index.html","id":"geom_complex_function","dir":"","previous_headings":"Usage","what":"geom_complex_function()","title":"Vector Field Visualizations with ggplot2","text":"geom_complex_function() function generates vector field plot layer using user-defined function compute vector components. function abstracts away mathematical computations required generate vector field, user need manually calculate input vector components geom_segment(). simplifies process, making easier create vector field visualizations without dealing underlying math.  can enhance plot little help biscale. Using biscale, can apply bivariate color scale plot, allows us represent two variables—angle (direction) magnitude (intensity)—simultaneously. makes easier visualize properties change across field.","code":"f <- function(z) (z^2 + 1) / (z^2 - 1)  ggplot() +   geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +   labs(x = \"Real\", y = \"Imaginary\") +   coord_fixed() +   theme(legend.box = \"horizontal\") library(biscale) library(cowplot)  plot <-   ggplot() +   geom_complex_function(aes(fill = after_stat(bi_class)),     fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100     ) +     bi_scale_fill(pal = \"DkBlue\") +     labs(       title = \"\",       x = \"Real (Re)\",       y = \"Imaginary (Im)\"     ) +     bi_theme(base_size = 16) +     theme(legend.position = \"none\") +   coord_fixed()     legend <- bi_legend(pal = \"DkBlue\",                     xlab = \"Angle\",                     ylab = \"Magnitude\",                     size = 6)  ggdraw() +   draw_plot(plot, 0, 0, .8, 1) +     draw_plot(legend, x = .55, y = .6, width = .3, height = 0.3)"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions issues, please open issue GitHub contact maintainer.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"can install development version GitHub:","code":"devtools::install_github(\"dusty-turner/ggvfields\")"},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Vector Field Visualizations with ggplot2","text":"creating vector fields, ggquiver package provides quiver plots visualize vector fields, ggarchery package can handling segments arrowheads.","code":""},{"path":"/reference/animation_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition a streamplot to an animation ready object — animation_transition","title":"Transition a streamplot to an animation ready object — animation_transition","text":"animation_transition() takes streamline plot alters work gganimate syntax.","code":""},{"path":"/reference/animation_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"animation_transition(plot)"},{"path":"/reference/animation_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition a streamplot to an animation ready object — animation_transition","text":"plot ggplot object data plot attributes extracted create animation transition.","code":""},{"path":"/reference/animation_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition a streamplot to an animation ready object — animation_transition","text":"ggplot object animation transition effect applied.","code":""},{"path":"/reference/animation_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"if (FALSE) { library(ggplot2) library(ggvfields) library(gganimate)  # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the stream plot layer p <- ggplot() +   geom_streamplot(     aes(rownum = after_stat(rownum)),     fun = f, xlim = c(-3, 3), ylim = c(-3, 3)   ) +   coord_fixed() +   theme_bw()  # Create an animation transition plot anim <- animation_transition(plot = p) +   transition_reveal(rownum) +   ease_aes('linear')  # Animate the plot anim <- animate(anim, nframes = 25, fps = 20, end_pause = 0, renderer = gifski_renderer()) }"},{"path":"/reference/geom_complex_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Complex Vector Field Geom Layer — geom_complex_function","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"geom_complex_function() generates raster plot layer user-defined complex function. hue color corresponds argument (angle) complex number resulting function, indicating direction vector. lightness color reflects magnitude vector, providing visual representation direction intensity.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"geom_complex_function(   mapping = NULL,   data = NULL,   stat = \"complex_function\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   relim,   imlim,   n = 10,   ... )  stat_complex_function(   mapping = NULL,   data = NULL,   geom = \"raster\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   relim,   imlim,   n = 10,   ... )"},{"path":"/reference/geom_complex_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes complex number input returns complex number. relim numeric vector length 2 giving real-axis limits. imlim numeric vector length 2 giving imaginary-axis limits. n integer specifying number grid points along axis. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_complex_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"library(ggplot2) # Example user-defined function f <- function(z) (z^2 + 1) / (z^2 - 1)  # Create a ggplot with the vector field layer ggplot() +   geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +   labs(x = \"Real\", y = \"Imaginary\")"},{"path":"/reference/geom_streamplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Plot Geom Layer — geom_streamplot","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"geom_streamplot() generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"geom_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   ds = 0.05,   mask_shape_type = \"square\",   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )  stat_streamline(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   ds = 0.05,   mask_shape_type = \"square\",   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )"},{"path":"/reference/geom_streamplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions. ds numeric value specifying distance steps streamline generation. mask_shape_type character string specifying mask shape type: \"square\", \"diamond\", \"inset_square\", \"circle\". arrow Arrow specification, created grid::arrow(). chop logical value indicating whether chop trajectories segments. scale_stream numeric value specifying maximum allowable segment size fraction total range chopping trajectories. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_streamplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"ggplot2 layer can added ggplot object produce stream plot.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"library(ggplot2) # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the stream plot layer ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3),     ylim = c(-3, 3), n = c(15, 15),     max_length = 10000, max_steps = 10000,     ds = .05, chop = TRUE, scale_stream = 1,     mask_shape_type = \"square\"   ) +   coord_fixed() +   theme_minimal() #> Warning: Ignoring unknown parameters: `max_length` and `max_steps`"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer — geom_vector_field","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"geom_vector_field generates vector field plot layer using user-defined function compute vector components. particularly useful visualizing vector fields two-dimensional space. geom_vector_field generates vector field plot layer using user-defined function compute vector components. particularly useful visualizing vector fields two-dimensional space.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"geom_vector_field(   mapping = NULL,   data = NULL,   stat = \"vectorfield\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   v = c(1, 2),   n = 16,   center = TRUE,   normalize = TRUE,   scale_length = 1.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_vector_field(   mapping = NULL,   data = NULL,   geom = \"segment\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   v = c(1, 2),   n = 16,   center = TRUE,   normalize = TRUE,   scale_length = 1.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  StatVectorField  GeomVectorField  geom_vector_field(   mapping = NULL,   data = NULL,   stat = \"vectorfield\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   v = c(1, 2),   n = 16,   center = TRUE,   normalize = TRUE,   scale_length = 1.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_vector_field(   mapping = NULL,   data = NULL,   geom = \"segment\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   v = c(1, 2),   n = 16,   center = TRUE,   normalize = TRUE,   scale_length = 1.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  StatVectorField  GeomVectorField"},{"path":"/reference/geom_vector_field.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"object class StatVectorField (inherits Stat, ggproto, gg) length 3. object class GeomVectorField (inherits GeomSegment, Geom, ggproto, gg) length 6. object class StatVectorField (inherits Stat, ggproto, gg) length 3. object class GeomVectorField (inherits GeomSegment, Geom, ggproto, gg) length 6.","code":""},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes two arguments (x y coordinates) returns list two components: x y components vector field. xlim, ylim numeric vector length 2 giving x/y-axis limits. v Numeric vector specifying direction vector components calculating directional derivative. n integer specifying number grid points along axis. center Logical; TRUE, centers vector evaluated x/y location. FALSE, vector origin evaluated x/y location. normalize Logical; TRUE, normalizes vector length unit 1 scales avoid overplotting based grid density plot range. scale_length Numeric; scaling factor applied vectors adjust length relative grid spacing. Defaults 1. arrow Arrow specification, created grid::arrow(). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"ggplot2 layer can added ggplot object produce vector field plot. ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_vector_field.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"norm magnitude vector field, computed \\(\\|\\mathbf{w}\\| = \\sqrt{u^2 + v^2}\\). divergence divergence vector field, computed \\(\\nabla \\cdot \\mathbf{F} = \\frac{\\partial f_x}{\\partial x} + \\frac{\\partial f_y}{\\partial y}\\). curl curl vector field, computed \\(\\text{curl} \\, \\mathbf{F} = \\frac{\\partial f_y}{\\partial x} - \\frac{\\partial f_x}{\\partial y}\\). laplacian Laplacian vector field, computed \\(\\Delta \\mathbf{F} = \\frac{\\partial^2 f_x}{\\partial x^2} + \\frac{\\partial^2 f_x}{\\partial y^2} + \\frac{\\partial^2 f_y}{\\partial x^2} + \\frac{\\partial^2 f_y}{\\partial y^2}\\). directional_derivative directional derivative vector field, computed \\(D_{\\mathbf{v}} \\mathbf{F} = \\frac{\\partial F_x}{\\partial x} v_x + \\frac{\\partial F_x}{\\partial y} v_y + \\frac{\\partial F_y}{\\partial x} v_x + \\frac{\\partial F_y}{\\partial y} v_y\\). norm magnitude vector field, computed \\(\\|\\mathbf{w}\\| = \\sqrt{u^2 + v^2}\\). divergence divergence vector field, computed \\(\\nabla \\cdot \\mathbf{F} = \\frac{\\partial f_x}{\\partial x} + \\frac{\\partial f_y}{\\partial y}\\). curl curl vector field, computed \\(\\text{curl} \\, \\mathbf{F} = \\frac{\\partial f_y}{\\partial x} - \\frac{\\partial f_x}{\\partial y}\\). laplacian Laplacian vector field, computed \\(\\Delta \\mathbf{F} = \\frac{\\partial^2 f_x}{\\partial x^2} + \\frac{\\partial^2 f_x}{\\partial y^2} + \\frac{\\partial^2 f_y}{\\partial x^2} + \\frac{\\partial^2 f_y}{\\partial y^2}\\). directional_derivative directional derivative vector field, computed \\(D_{\\mathbf{v}} \\mathbf{F} = \\frac{\\partial F_x}{\\partial x} v_x + \\frac{\\partial F_x}{\\partial y} v_y + \\frac{\\partial F_y}{\\partial x} v_x + \\frac{\\partial F_y}{\\partial y} v_y\\).","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"# example user-defined function f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) }  # create a ggplot with the vector field layer ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )   # various options ggplot() +   geom_vector_field(     aes(color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     arrow = arrow(length = unit(1, \"mm\"))   )   ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     n = 10, center = FALSE, normalize = FALSE,     arrow = arrow(length = unit(1, \"mm\"))   )   ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     center = TRUE, color = \"black\",     scale_length = .7   )    # example user-defined function f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) }  # create a ggplot with the vector field layer ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )   # various options ggplot() +   geom_vector_field(     aes(color = after_stat(norm)),     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     arrow = arrow(length = unit(1, \"mm\"))   )   ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     n = 10, center = FALSE, normalize = FALSE,     arrow = arrow(length = unit(1, \"mm\"))   )   ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     center = TRUE, color = \"black\",     scale_length = .7   )"},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous Scale for Vector Length — scale_length_continuous","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous provides continuous scale length aesthetic geom_vector_field. scale_length_continuous provides continuous scale length aesthetic geom_vector_field.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(   name = waiver(),   n.breaks = waiver(),   guide = \"none\",   ... )  scale_length_continuous(   name = waiver(),   n.breaks = waiver(),   guide = \"none\",   ... )"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"name name scale. n.breaks number breaks. guide guide used scale, legend color bar. Can string specifying type guide, guide object returned call guide function (e.g., guide_legend guide_colorbar). Use \"none\" hide guide. ... Additional parameters passed continuous_scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) } ggplot() +   geom_vector_field(aes(length = after_stat(norm)), fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   scale_length_continuous()  f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) } ggplot() +   geom_vector_field(aes(length = after_stat(norm)), fun = f, xlim = c(-10, 10), ylim = c(-10, 10)) +   scale_length_continuous()"}]
