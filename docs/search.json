[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney X. Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2024). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney X. Sturdivant},   year = {2024},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Vector Field Visualizations with ggplot2","text":"ggvfields provides tools visualizing vector fields, stream plots, soon complex numbers .","code":"library(\"ggvfields\") #> Loading required package: ggplot2 options(ggplot2.continuous.colour=\"viridis\")"},{"path":[]},{"path":"/index.html","id":"geom_vector-visualizing-individual-vectors","dir":"","previous_headings":"Usage","what":"geom_vector(): Visualizing Individual Vectors","title":"Vector Field Visualizations with ggplot2","text":"geom_vector() designed visualize individual vectors, specified either Cartesian (dx, dy) polar (angle, distance) components. ’s especially useful directional data like wind patterns flow fields. default, length aesthetic mapped after_stat(norm), meaning vector length reflects magnitude. details section: New Feature: Mapping Norm Length Aesthetic.","code":""},{"path":"/index.html","id":"cartesian-example","dir":"","previous_headings":"Usage > geom_vector(): Visualizing Individual Vectors","what":"Cartesian Example","title":"Vector Field Visualizations with ggplot2","text":"","code":"set.seed(1234) n <- 10 wind_data_polar <- data.frame(   lon = rnorm(n),    lat = rnorm(n),    wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2) )  wind_data_cartesian <- within(wind_data_polar, {   wind_lon_comp <- wind_spd * cos(wind_dir)   wind_lat_comp <- wind_spd * sin(wind_dir)   dx <- wind_lon_comp   dy <- wind_lat_comp })  ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy))"},{"path":"/index.html","id":"polar-example","dir":"","previous_headings":"Usage > geom_vector(): Visualizing Individual Vectors","what":"Polar Example","title":"Vector Field Visualizations with ggplot2","text":"polar coordinates, vector defined angle distance:","code":"ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))"},{"path":"/index.html","id":"new-feature-mapping-norm-to-the-length-aesthetic","dir":"","previous_headings":"Usage","what":"New Feature: Mapping Norm to the Length Aesthetic","title":"Vector Field Visualizations with ggplot2","text":"One innovations ggvfields ability map norm vectors directly length using length aesthetic. feature allows intuitive representation vector magnitudes. length vector directly corresponds computed norm - making easy compare vector magnitudes visually within plot. Traditionally, vector fields represent direction magnitude arrows uniform length. leaves magnitude inferred color gradients external legends. ggvfields, length aesthetic allows users visually intuit vector magnitude simplifying interpretation. particularly important aspect feature vector lengths plot accurately reflected legend. allows viewers match visual representation length directly legend’s magnitude scale. frees color aesthetic use visualizing information vector field.","code":""},{"path":"/index.html","id":"why-use-the-length-aesthetic","dir":"","previous_headings":"Usage > New Feature: Mapping Norm to the Length Aesthetic","what":"Why Use the Length Aesthetic?","title":"Vector Field Visualizations with ggplot2","text":"Clearer Representation: Vectors larger norms appear longer, making magnitude comparison straightforward. Length-Consistent Legends: lengths vectors plot directly tied values shown legend, ensuring consistent accurate visual guide. Enhanced Visuals: Length variations add extra layer information plot, complementing existing aesthetics like color. Flexible Customization: Combine length mapping aesthetics color gradients transparency even richer visualizations.","code":""},{"path":"/index.html","id":"example-mapping-norm-to-length","dir":"","previous_headings":"Usage","what":"Example: Mapping Norm to Length","title":"Vector Field Visualizations with ggplot2","text":"mapping norm vector length aesthetic, users can directly observe differences vector magnitude based vector’s actual size. example, norm wind vectors mapped length:  disable feature, can map length = after_stat(NA).","code":"ggplot(wind_data_cartesian) +   geom_vector(     aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(norm)),     arrow = NULL, tail_point = TRUE   ) ggplot(wind_data_cartesian) +   geom_vector(     aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(NA))   )"},{"path":"/index.html","id":"geom_vector_field-visualizing-vector-fields","dir":"","previous_headings":"Usage","what":"geom_vector_field(): Visualizing Vector Fields","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field() function creates vector field plot using user-defined function compute vector components. abstraction simplifies mathematical computations involved vector field visualizations. Users longer need manually calculate vector components geom_segment(). Two important options geom_vector_field() normalize center - default TRUE. options help control visual representation vectors: normalize: set TRUE, option scales vector unit length, can help avoid overplotting dense vector fields. especially useful direction vectors important magnitude. However, ’s important note normalize different mapping norm vector length aesthetic. normalization ensures vectors visually uniform length, mapping norm length preserves relative differences magnitude varying vector lengths based actual norms. center: default, center also set TRUE, meaning midpoint vector placed corresponding (x, y) coordinate, effectively “centering” vector point. center FALSE, base vector anchored (x, y) point, vector extends outward . useful vector field meant represent flow starting point, rather centered around . Additionally, geom_vector_field() defaults length = after_stat(norm), maps computed vector norms length aesthetic. means unless specified otherwise, vectors’ lengths automatically proportional calculated magnitudes. using options, can control whether vector lengths uniform reflect actual magnitudes, vectors positioned relative base coordinates, length aesthetic used plot.","code":""},{"path":"/index.html","id":"example-basic-vector-field-plot","dir":"","previous_headings":"Usage > geom_vector_field(): Visualizing Vector Fields","what":"Example: Basic Vector Field Plot","title":"Vector Field Visualizations with ggplot2","text":"function allows user map several characteristics vector field different aesthetic mappings.","code":"f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) # = f(x,y) }  ggplot() +   geom_vector_field(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"norm","dir":"","previous_headings":"Usage","what":"Norm","title":"Vector Field Visualizations with ggplot2","text":"norm vector w = (u,v) given : $|\\mathbf{w}| = \\sqrt{u^2 + v^2}$ can visualize norm mapping length aesthetic:","code":"ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     aes(length = after_stat(norm))   )"},{"path":"/index.html","id":"divergence","dir":"","previous_headings":"Usage","what":"Divergence","title":"Vector Field Visualizations with ggplot2","text":"Divergence operation vector field describes field behaves point—whether vectors “spread ” point “converge” toward . Locally, divergence vector field F ℝ2 particular point measures “outflowing-ness” rate expansion vector field around point. divergence scalar value can indicate sources (positive divergence) sinks (negative divergence). F = ⟨Fx(x,y), Fy(x,y)⟩ vector field, divergence defined : $$ \\text{div} \\, \\mathbf{F} = \\frac{\\partial F_x}{\\partial x} + \\frac{\\partial F_y}{\\partial y} $$ visualize divergence vector field, can map divergence color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(length = after_stat(norm), color = after_stat(divergence)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"curl","dir":"","previous_headings":"Usage","what":"Curl","title":"Vector Field Visualizations with ggplot2","text":"Curl measure rotation swirling behavior vector field given point. two dimensions, curl vector field F ℝ2 scalar value quantifies much vectors tend rotate circulate around point. Positive curl values indicate counterclockwise rotation, negative values represent clockwise rotation. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field, curl defined : $$ \\text{curl} \\, \\mathbf{F} = \\frac{\\partial F_y}{\\partial x} - \\frac{\\partial F_x}{\\partial y} $$ visualize curl vector field, can map curl color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(curl)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"geom_streamplot","dir":"","previous_headings":"Usage","what":"geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"geom_streamplot() function generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.  chop parameter (defaulted TRUE) allows chop trajectories segments. can useful better visualization streamlines long complex. may useful break streamlines.  may also useful break streamlines segments. scale_stream parameter (defaults 1) adjusts segmentation streamlines specifying proportion streamline length used divide smaller segments.","code":"f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3), chop = FALSE) ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     chop = TRUE, scale_stream = .9,   )"},{"path":"/index.html","id":"map-calculus-measures-to-aesthetics","dir":"","previous_headings":"Usage","what":"Map Calculus Measures to Aesthetics","title":"Vector Field Visualizations with ggplot2","text":"","code":"ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     aes(color = after_stat(log(divergence + abs(min(divergence)))))   ) +   labs(color = \"adjusted\\ndivergence\")"},{"path":"/index.html","id":"animate-geom_streamplot","dir":"","previous_headings":"Usage","what":"Animate geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"","code":"# Create stream plot with rownum aesthetic p <- ggplot() +  geom_streamplot(    aes(rownum = after_stat(rownum)),      fun = f, xlim = c(-3, 3), ylim = c(-3, 3),  ) +  coord_fixed() +  theme_bw() # Create an animation transition plot anim <- animation_transition(plot = p) +     gganimate::transition_reveal(rownum) +  gganimate::ease_aes('linear')  # Animate the plot gganimate::animate(   anim, nframes = 25, fps = 5, end_pause = 0, renderer = gganimate::gifski_renderer()   )"},{"path":"/index.html","id":"geom_flow","dir":"","previous_headings":"Usage","what":"geom_flow()","title":"Vector Field Visualizations with ggplot2","text":"geom_flow() function generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field, visualizing trajectory particles time. flow line traces “marble” move vector field dropped specific starting point, making intuitive way visualize dynamic systems. default, color flow line corresponds time (t), meaning color transitions along path represent progression time. flow line evolves, shows particle move time following vector field. can change coloring mapping aesthetics computed measures needed, time remains default. Flows computed using deSolve package’s ODE solver, rk4 method (fourth-order Runge-Kutta method) used numerical integration. solver ensures accurate efficient computation flow lines, abstracting away complex calculations user.  example, flow lines evolve according vector field defined f. color along line show particle moves time (t) within vector field.","code":"ggplot() +   geom_flow(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"adaptive-parameters","dir":"","previous_headings":"Usage > geom_flow()","what":"Adaptive Parameters","title":"Vector Field Visualizations with ggplot2","text":"Several parameters geom_flow() adaptive, meaning adjust automatically based characteristics vector field plot limits. adaptive parameters help optimize flow visualization without requiring manual tuning: threshold_distance: parameter controls minimum distance adjacent flow lines prevent overlapping. specified, calculated automatically half Euclidean distance adjacent grid points. ensures plot remains uncluttered, flow lines spaced appropriately based grid dimensions (n) axis limits (xlim, ylim). T: parameter represents total time span ODE solver trace flow paths. T NULL, automatically computed starting center plot estimating long take particle travel center farthest boundary vector field - assuming vector field cyclic reach sync. ensures trajectories capture significant dynamics vector field without extending unnecessarily. iterations: parameter defines number time steps ODE solver use tracing flow lines. higher number iterations results smoother detailed flows. iterations left NULL, computed adaptively based value T, ensuring longer time spans result iterations smoother paths. adaptive parameters allow geom_flow() create well-balanced plot dynamically adjusting precision spacing flow lines, based underlying vector field plot limits.","code":""},{"path":"/index.html","id":"example-with-custom-parameters","dir":"","previous_headings":"Usage > geom_flow()","what":"Example with Custom Parameters","title":"Vector Field Visualizations with ggplot2","text":"example customize grid size, time span (T), number iterations, threshold distance flow lines:","code":"ggplot() +   geom_flow(     fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 1000, threshold_distance = 0.5, T = 5   )  #> Warning in geom_flow(fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, : #> Ignoring unknown parameters: `T`"},{"path":[]},{"path":"/index.html","id":"geom_vector_smooth","dir":"","previous_headings":"In Development","what":"geom_vector_smooth()","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_smooth() function designed provide smoothed estimate vector field based observed vector components. Just geom_smooth() fits regression line data points, geom_vector_smooth() fits smooth vector field individual vector observations. applying statistical smoothing techniques vector components (dx, dy) create smooth representation direction magnitude transitions across field.","code":""},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"In Development > geom_vector_smooth()","what":"Example Usage","title":"Vector Field Visualizations with ggplot2","text":"function also works polar coordinates method = \"boot\".  example demonstrates geom_vector_smooth() can used fit vector field vector data.","code":"# Create a function to generate random vectors based on (x, y) inputs generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2)   }  # Set seed for reproducibility set.seed(123)  # Generate sample points for the vector field sample_points <- data.frame(   x = runif(50, min = -10, max = 10),     y = runif(50, min = -10, max = 10)    )  # Apply the generate_vectors function to each row to create displacements result <- t(apply(sample_points, 1, generate_vectors))  # Create new columns for the end coordinates (xend, yend) sample_points$xend <- result[, 1] sample_points$yend <- result[, 2]  # Calculate the displacements (dx, dy) sample_points$dx <- sample_points$xend - sample_points$x sample_points$dy <- sample_points$yend - sample_points$y  # Visualize the original and smoothed vectors using `ggplot2` from ggvfields ggplot(sample_points, aes(x = x, y = y)) +   geom_vector_smooth(aes(dx = dx, dy = dy),                       n = 6, center = FALSE, probs = c(.95, .68), method = \"lm\"                      ) +    geom_vector(aes(dx = dx, dy = dy)) +     coord_equal() # Calculate polar coordinates: angle and distance sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2) sample_points$angle <- atan2(sample_points$dy, sample_points$dx)  # Visualize the vector field with smoothing in polar coordinates ggplot(sample_points, aes(x = x, y = y)) +   geom_vector_smooth(aes(angle = angle, distance = distance),                      n = 6, center = FALSE, probs = c(.95), method = \"boot\"                      ) +   geom_vector(aes(dx = dx, dy = dy)) +     coord_fixed()"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"ggvfields yet CRAN. can install ","code":"remotes::install_github(\"dusty-turner/ggvfields\")"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions issues, please open issue GitHub contact maintainer.","code":""},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Vector Field Visualizations with ggplot2","text":"creating vector fields, ggquiver package provides quiver plots visualize vector fields, ggarchery package can handling segments arrowheads.","code":""},{"path":"/reference/animation_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition a streamplot to an animation ready object — animation_transition","title":"Transition a streamplot to an animation ready object — animation_transition","text":"animation_transition() takes streamline plot alters work gganimate syntax.","code":""},{"path":"/reference/animation_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"animation_transition(plot)"},{"path":"/reference/animation_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition a streamplot to an animation ready object — animation_transition","text":"plot ggplot object data plot attributes extracted create animation transition.","code":""},{"path":"/reference/animation_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition a streamplot to an animation ready object — animation_transition","text":"ggplot object animation transition effect applied.","code":""},{"path":"/reference/animation_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"if (FALSE) { library(ggplot2) library(ggvfields) library(gganimate)  # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the stream plot layer p <- ggplot() +   geom_streamplot(     aes(rownum = after_stat(rownum)),     fun = f, xlim = c(-3, 3), ylim = c(-3, 3)   ) +   coord_fixed() +   theme_bw()  # Create an animation transition plot anim <- animation_transition(plot = p) +   transition_reveal(rownum) +   ease_aes('linear')  # Animate the plot anim <- animate(anim, nframes = 25, fps = 20, end_pause = 0, renderer = gifski_renderer()) }"},{"path":"/reference/geom_complex_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Complex Vector Field Geom Layer — geom_complex_function","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"geom_complex_function() generates raster plot layer user-defined complex function. hue color corresponds argument (angle) complex number resulting function, indicating direction vector. lightness color reflects magnitude vector, providing visual representation direction intensity.","code":""},{"path":"/reference/geom_complex_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"fun user-defined function takes complex number input returns complex number. relim numeric vector length 2 giving real-axis limits. imlim numeric vector length 2 giving imaginary-axis limits. n integer specifying number grid points along axis.","code":""},{"path":"/reference/geom_complex_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"#library(ggplot2) # Example user-defined function f <- function(z) (z^2 + 1) / (z^2 - 1)  # Create a ggplot with the vector field layer #ggplot() +  # geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +  # labs(x = \"Real\", y = \"Imaginary\")"},{"path":"/reference/geom_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Flow Plot Geom Layer — geom_flow","title":"Create a Flow Plot Geom Layer — geom_flow","text":"geom_flow() generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"geom_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Flow Plot Geom Layer — geom_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length, representing vector field. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions starting points flows. iterations numeric value specifying number time steps ODE solver used flow generation. determines granularity flow paths; higher values result smoother, detailed flows. threshold_distance numeric value specifying minimum distance flows avoid overlap. provided, defaults half Euclidean distance adjacent grid points. arrow Arrow specification, created grid::arrow(), adding arrows flows. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Flow Plot Geom Layer — geom_flow","text":"ggplot2 layer can added ggplot object produce flow plot.","code":""},{"path":"/reference/geom_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Flow Plot Geom Layer — geom_flow","text":"flows computed using deSolve package's ODE solver. rk4 method (fourth-order Runge-Kutta method) used default numerical integration flows.","code":""},{"path":"/reference/geom_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"library(ggplot2) # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the flow plot layer ggplot() +   geom_flow(     fun = f, n = c(11, 11),     xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 100, threshold_distance = 0,     arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\")   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_streamplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Plot Geom Layer — geom_streamplot","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"geom_streamplot() generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"geom_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )  stat_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )"},{"path":"/reference/geom_streamplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions. mask_shape_type character string specifying mask shape type: \"square\", \"diamond\", \"inset_square\", \"circle\". iterations integer specifying number steps perform numerical integration flow. stream_density numeric value controls density streamlines. Higher values produce streamlines. Default 1. arrow Arrow specification, created grid::arrow(). chop logical value indicating whether chop trajectories segments. scale_stream numeric value specifying maximum allowable segment size fraction total range chopping trajectories. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_streamplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"ggplot2 layer can added ggplot object produce stream plot.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"library(ggplot2) # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) } ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3), n = c(15, 15),     iterations = 100, chop = TRUE, scale_stream = 1,     mask_shape_type = \"square\"   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Plot Layer — geom_vector","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector generates ggplot layer visualizes vectors line segments optional arrowheads. vectors defined start (x, y) end (xend, yend) coordinates, can directly provided derived angular (angle) distance (distance) information.","code":""},{"path":"/reference/geom_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"geom_vector(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2,   fun = NULL )  stat_vector(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2 )  StatVector  GeomVector"},{"path":"/reference/geom_vector.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Vector Plot Layer — geom_vector","text":"object class StatVector (inherits Stat, ggproto, gg) length 4. object class GeomVector (inherits Geom, ggproto, gg) length 6.","code":""},{"path":"/reference/geom_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Plot Layer — geom_vector","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. arrow Arrow specification vector arrowheads, created grid::arrow(). controls appearance arrowheads end vectors, including properties like angle, length, type. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). center Logical; TRUE, centers vector specified (x, y) location. FALSE, vector origin specified (x, y) location. centering enabled, vector's midpoint aligns original (x, y) location. normalize Logical; TRUE, normalizes vector unit length applying scaling. Normalization useful avoiding overplotting ensuring visual consistency, especially dense plots. tail_point Logical; TRUE, adds point start vector. tail_point.size Integer; controls size points tail tail_point = TRUE. fun function used calculate vector fields (curl/divergence). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Plot Layer — geom_vector","text":"ggplot2 layer can added ggplot object produce vector plot.","code":""},{"path":"/reference/geom_vector.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector understands following aesthetics (required aesthetics bold): x: x-coordinate start point vector. y: y-coordinate start point vector. xend: x-coordinate end point vector (optional angle distance provided). yend: y-coordinate end point vector (optional angle distance provided). angle: angle vector degrees (optional, used distance). distance: distance/magnitude vector (optional, used angle). length: length vector. default, length = after_stat(norm) automatically maps vector length calculated magnitude (xend - x) (yend - y). turn automatic length mapping, set length = after_stat(NA). allows plot vectors without length scaling. color: color vector line. fill: fill color vector arrowheads points. linewidth: thickness vector line. linetype: type vector line (solid, dashed, etc.). alpha: transparency level vector. arrow: Specification arrowheads end vector.","code":""},{"path":"/reference/geom_vector.html","id":"key-notes","dir":"Reference","previous_headings":"","what":"Key Notes","title":"Create a Vector Plot Layer — geom_vector","text":"Default Length Mapping: default, length mapped length = after_stat(norm), norm magnitude vector. ensures length vector visually reflects magnitude. Disabling Length Mapping: plot vectors without length scaling, set length = after_stat(NA). useful vector directions important, relative magnitudes influence visualization. Custom Length Mapping: can still manually specify length mapping specific column using function. Example: aes(length = 0.5) aes(length = sqrt(dx^2 + dy^2)).","code":""},{"path":"/reference/geom_vector.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed variables","title":"Create a Vector Plot Layer — geom_vector","text":"norm magnitude vector, calculated \\(\\|\\mathbf{v}\\| = \\sqrt{(xend - x)^2 + (yend - y)^2}\\).","code":""},{"path":"/reference/geom_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"# Example using Cartesian input: precomputed dx and dy set.seed(1234) n <- 10 wind_data_polar <- data.frame(   lon = rnorm(n),   lat = rnorm(n),   wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2) )  wind_data_cartesian <- within(wind_data_polar, {   wind_lon_comp <- wind_spd * cos(wind_dir)   wind_lat_comp <- wind_spd * sin(wind_dir)   dx <- wind_lon_comp  # dx represents the change in x (longitude component)   dy <- wind_lat_comp  # dy represents the change in y (latitude component) })   ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy))   # Example using Polar input: angle (wind_dir) and distance (wind_spd) ggplot(wind_data_polar) +   geom_vector(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))   # By default, length = after_stat(norm). # To allow vectors to be the exact length of the data you can disable this option # with length = after_stat(NA) ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(NA)))"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer — geom_vector_field","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"geom_vector_field generates vector field plot layer using user-defined function compute vector displacements (dx, dy) grid point. function automatically generates grid points (specified xlim ylim) evaluates vector field displacements points.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"geom_vector_field(   mapping = NULL,   data = NULL,   stat = StatVector,   geom = GeomVector,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = 16,   center = TRUE,   normalize = TRUE,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_vector_field(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = 16,   center = TRUE,   normalize = TRUE,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes vector (x, y) returns vector (dx, dy), representing displacements point vector field. xlim, ylim Numeric vectors length 2 giving x/y-axis limits grid. n Integer specifying number grid points along axis (resolution grid). center Logical; TRUE, centers vectors respective grid points. normalize Logical; TRUE, normalizes vectors unit length. arrow Arrow specification, created grid::arrow(), add arrowheads vectors. ... arguments passed layer(), aesthetic mappings.","code":""},{"path":"/reference/geom_vector_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"ggplot2 layer can added ggplot object produce vector field plot. layer includes optional calculations :","code":""},{"path":"/reference/geom_vector_field.html","id":"curl-the-curl-of-a-vector-field-represents-the-rotation-or-twisting-","dir":"Reference","previous_headings":"","what":"Curl The curl of a vector field represents the rotation or \"twisting\"","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"vectors around point. formula curl given : $$\\text{curl}(\\mathbf{f})(x, y) = \\frac{\\partial f_2}{\\partial x}(x, y)   - \\frac{\\partial f_1}{\\partial y}(x, y)$$ \\(\\frac{\\partial f_1}{\\partial y}(x, y)\\) partial derivative first component respect \\(y\\), \\(\\frac{\\partial   f_2}{\\partial x}(x, y)\\) partial derivative second component respect \\(x\\).","code":""},{"path":"/reference/geom_vector_field.html","id":"divergence-the-divergence-of-a-vector-field-measures-the-rate-at-which","dir":"Reference","previous_headings":"","what":"Divergence The divergence of a vector field measures the rate at which","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"vectors \"spreading \" point. $$\\text{div}(\\mathbf{f})(x, y) = \\frac{\\partial f_1}{\\partial x}(x, y)   + \\frac{\\partial f_2}{\\partial y}(x, y)$$ \\(\\frac{\\partial f_1}{\\partial x}(x, y)\\) partial derivative first component respect \\(x\\), \\(\\frac{\\partial   f_2}{\\partial y}(x, y)\\) partial derivative second component respect \\(y\\).","code":""},{"path":"/reference/geom_vector_field.html","id":"norm-the-norm-of-a-vector-represents-its-magnitude-or-length-","dir":"Reference","previous_headings":"","what":"Norm The norm of a vector represents its magnitude (or length):","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"$$\\|\\mathbf{f}(x, y)\\| = \\sqrt{dx^2 + dy^2}$$ \\(dx\\) \\(dy\\) displacements x y directions, respectively.","code":""},{"path":"/reference/geom_vector_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"user provides function takes vector (x, y) returns vector displacements (dx, dy) point vector field. layer automatically computes calculus measures divergence, curl, vector norm can mapped aesthetics using after_stat().","code":""},{"path":"/reference/geom_vector_field.html","id":"aesthetic-mappings","dir":"Reference","previous_headings":"","what":"Aesthetic mappings","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"following aesthetics can mapped using after_stat(): divergence: Divergence vector field point. curl: Curl vector field point. norm: Norm (magnitude) vector point. example, map norm color, can use:","code":"aes(color = after_stat(norm))"},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"# Example user-defined vector field function f <- function(v) {   x <- v[1]; y <- v[2]   c(x + y, y - x)  # Return displacements (dx, dy) }  # Create a ggplot with the vector field layer ggplot() +   geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20)   # Example of mapping norm to length ggplot() +   geom_vector_field(     fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20, normalize = FALSE   )    ggplot() +   geom_vector_field(     fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20, normalize = FALSE,     mapping = aes(length = after_stat(norm), color = after_stat(curl))   )"},{"path":"/reference/geom_vector_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smooth Vector Plot Layer — geom_vector_smooth","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth generates ggplot layer visualizes smooth vector field taking raw vector data applying smoothing techniques estimate underlying vector field. similar concept geom_smooth() ggplot2 estimates smooth line, vector data instead scalar data.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"StatVectorSmooth  GeomVectorSmooth  stat_vector_smooth(   mapping = NULL,   data = NULL,   geom = \"vector_smooth\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   scale_factor = 1,   center = TRUE,   normalize = TRUE,   method = \"lm\",   se = TRUE,   se.circle = TRUE,   probs = c(0.95, NA),   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  geom_vector_smooth(   mapping = NULL,   data = NULL,   stat = \"vector_smooth\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   scale_factor = 1,   center = TRUE,   normalize = TRUE,   method = \"lm\",   se = TRUE,   se.circle = TRUE,   probs = c(0.95, NA),   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_vector_smooth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"object class StatVectorSmooth (inherits Stat, ggproto, gg) length 6. object class GeomVectorSmooth (inherits GeomSegment, Geom, ggproto, gg) length 8.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). n integer vector specifying number grid points along axis. scale_factor Numeric; scales length vectors given value. Useful ensuring consistent lengths visualization. center Logical; TRUE, centers vector evaluated x/y location. FALSE, vector origin evaluated x/y location. centering enabled, vector's midpoint aligns original x/y location. normalize Logical; TRUE, normalizes vector's length unit length applying transformations like centering. FALSE, vectors retain original lengths. method Character; specifies smoothing method used. Supported methods \"lm\" (linear modeling) \"boot\" (bootstrapping). \"boot\" generates smoother results calculating angles bootstrapping, prediction intervals determined using quantiles. se Logical; TRUE, plots confidence intervals around smoothed vectors. se.circle Logical; TRUE, draws circles around origin vectors represent radius confidence interval. useful visualizing variability se = TRUE. probs Numeric vector; specifies prediction interval levels plotted se = TRUE. Default probs = 0.95, users can specify multiple levels (e.g., probs = c(0.95, 0.68)). arrow Arrow specification, created grid::arrow(). controls appearance arrowheads end vectors, including properties like angle, length, type. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"ggplot2 layer can added ggplot object produce smooth vector field plot.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"Mathematics Prediction Prediction Intervals: section explains methods computing predictions prediction intervals using x y coordinates.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"linear-model-lm-method","dir":"Reference","previous_headings":"","what":"Linear Model (lm) Method","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"\"lm\" method fits multivariate linear regression predict vector displacements dx dy based x y. Model:   b_0, b_1, b_2, b_3 model coefficients. e residual error. Prediction: new grid point, predicted displacements :   X_i design matrix new grid point. beta vector estimated coefficients. Prediction Intervals: standard error prediction :   V covariance matrix coefficients. prediction interval confidence level (1 - alpha) :","code":"dx, dy = b_0 + b_1 * x + b_2 * y + b_3 * (x * y) + e Z_i = X_i * beta SE(Z_i) = sqrt(diag(X_i * V * t(X_i))) Z_i ± t_(alpha / 2) * SE(Z_i)"},{"path":"/reference/geom_vector_smooth.html","id":"bootstrapping-boot-method","dir":"Reference","previous_headings":"","what":"Bootstrapping (boot) Method","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"\"boot\" method uses resampling estimate angles displacements. Process: Resample original data replacement. Fit models sine cosine vector angle:     Use predicted sine cosine compute:   Prediction Intervals: Based quantiles bootstrapped angles:   Displacements: Using predicted angle theta distance d:","code":"sin(theta) = b_0 + b_1 * x + b_2 * y + e cos(theta) = b_0 + b_1 * x + b_2 * y + e theta = atan2(sin(theta), cos(theta)) Lower Bound = Q_(alpha / 2)(theta)  Upper Bound = Q_(1 - alpha / 2)(theta) dx = d * cos(theta), dy = d * sin(theta)"},{"path":"/reference/geom_vector_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth understands following aesthetics (required aesthetics bold): x: x-coordinate starting point vector. y: y-coordinate starting point vector. dx: x-displacement vector. dy: y-displacement vector. angle: angle vector radians (optional, used distance). distance: magnitude vector (optional, used angle). color: color vector line. linewidth: thickness vector line. linetype: type vector line (solid, dashed, etc.). alpha: transparency level vector. arrow: Specification arrowheads end vector. Additionally, using smoothing: norm: computed variable representing magnitude smoothed vector, available via after_stat().","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"library(ggplot2) library(ggvfields)  # Function to generate random vectors based on (x, y) inputs generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(sin(x) + sin(y) + rnorm(1, 5, 3), sin(x) - sin(y) + rnorm(1, 5, 3)) }  # Set seed for reproducibility set.seed(123)  # Generate sample data sample_points <- data.frame(   x = runif(50, min = -10, max = 10),   y = runif(50, min = -10, max = 10) )  # Apply the generate_vectors function to each row result <- t(apply(sample_points, 1, generate_vectors))  # Create new columns for displacements (dx, dy) and polar coordinates sample_points$xend <- result[, 1] sample_points$yend <- result[, 2] sample_points$dx <- sample_points$xend - sample_points$x sample_points$dy <- sample_points$yend - sample_points$y sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2) sample_points$angle <- atan2(sample_points$dy, sample_points$dx)  # Example 1: Cartesian Coordinates with Linear Model (lm) ggplot(sample_points, aes(x = x, y = y)) +   geom_vector_smooth(aes(dx = dx, dy = dy), method = \"lm\", se = TRUE) +   geom_vector(aes(dx = dx, dy = dy)) +   ggtitle(\"Vector Smoothing with Linear Model (lm)\")  #>                x           y       xend         yend    radius           dx #> 1    -9.85187827 -10.3502158 -9.1635744 -9.624793311 0.7757249  0.688303914 #> 2    -7.87516298 -10.3823528 -7.2616653 -9.592656287 0.7757249  0.613497717 #> 3    -5.88993054 -10.4140821 -5.3682733 -9.560926942 0.7757249  0.521657201 #> 4    -3.89579327 -10.4430949 -3.4837862 -9.531914199 0.7757249  0.412007026 #> 5    -1.89358501 -10.4665873 -1.6073701 -9.508421804 0.7757249  0.286214871 #> 6     0.11429668 -10.4819174  0.2633725 -9.493091653 0.7757249  0.149075868 #> 7     2.12413456 -10.4874884  2.1321590 -9.487520632 0.7757249  0.008024468 #> 8     4.13180296 -10.4833471  4.0031150 -9.491661966 0.7757249 -0.128687967 #> 9     6.13388628 -10.4710764  5.8796560 -9.503932671 0.7757249 -0.254230237 #> 10    8.12836654 -10.4530932  7.7638002 -9.521915832 0.7757249 -0.364566380 #> 11   10.11464344 -10.4318528  9.6561476 -9.543156253 0.7757249 -0.458495825 #> 12   -9.88441204  -8.3476377 -9.1310406 -7.690042527 0.7757249  0.753371470 #> 13   -7.91042423  -8.3835717 -7.2264040 -7.654108590 0.7757249  0.684020208 #> 14   -5.92598260  -8.4211607 -5.3322213 -7.616519510 0.7757249  0.593761321 #> 15   -3.92934143  -8.4577194 -3.4502381 -7.579960869 0.7757249  0.479103343 #> 16   -1.92024703  -8.4891361 -1.5807081 -7.548544115 0.7757249  0.339538910 #> 17    0.09883290  -8.5106731  0.2788363 -7.527007129 0.7757249  0.180003428 #> 18    2.12240887  -8.5188072  2.1338847 -7.518873045 0.7757249  0.011475842 #> 19    4.14351856  -8.5130212  3.9913994 -7.524659040 0.7757249 -0.152119167 #> 20    6.15633942  -8.4959453  5.8572029 -7.541734956 0.7757249 -0.299136506 #> 21    8.15786063  -8.4717754  7.7343061 -7.565904825 0.7757249 -0.423554570 #> 22   10.14776255  -8.4444732  9.6230285 -7.593207004 0.7757249 -0.524734031 #> 23   -9.91797189  -6.3360053 -9.0974807 -5.764346098 0.7757249  0.820491157 #> 24   -7.94904330  -6.3744001 -7.1877850 -5.725951354 0.7757249  0.761258350 #> 25   -5.96830908  -6.4175155 -5.2898948 -5.682835919 0.7757249  0.678414270 #> 26   -3.97178253  -6.4630680 -3.4077970 -5.637283376 0.7757249  0.563985542 #> 27   -1.95642923  -6.5057895 -1.5445259 -5.594561930 0.7757249  0.411903319 #> 28    0.07673851  -6.5374482  0.3009307 -5.562903232 0.7757249  0.224192199 #> 29    2.11989349  -6.5501076  2.1364001 -5.550243829 0.7757249  0.016506608 #> 30    4.16034318  -6.5414725  3.9745748 -5.558878927 0.7757249 -0.185768396 #> 31    6.18726724  -6.5164601  5.8262751 -5.583891280 0.7757249 -0.360992153 #> 32    8.19629528  -6.4830660  7.6958714 -5.617285435 0.7757249 -0.500423869 #> 33   10.18848221  -6.4478420  9.5823089 -5.652509435 0.7757249 -0.606173361 #> 34   -9.95036971  -4.3140340 -9.0650829 -3.848988563 0.7757249  0.885286800 #> 35   -7.98896062  -4.3519566 -7.1478676 -3.811066020 0.7757249  0.841092989 #> 36   -6.01602837  -4.3981940 -5.2421755 -3.764828584 0.7757249  0.773852859 #> 37   -4.02489513  -4.4525967 -3.3546844 -3.710425873 0.7757249  0.670210744 #> 38   -2.00702683  -4.5106762 -1.4939283 -3.652346431 0.7757249  0.513098512 #> 39    0.04287753  -4.5597336  0.3347917 -3.603289032 0.7757249  0.291914158 #> 40    2.11588596  -4.5813609  2.1404076 -3.581661644 0.7757249  0.024521675 #> 41    4.18642185  -4.5671530  3.9484961 -3.595869620 0.7757249 -0.237925743 #> 42    6.23177573  -4.5280233  5.7817666 -3.634999319 0.7757249 -0.450009140 #> 43    8.24683552  -4.4809461  7.6453312 -3.682076530 0.7757249 -0.601504347 #> 44   10.23763444  -4.4363743  9.5331566 -3.726648284 0.7757249 -0.704477805 #> 45   -9.97840760  -2.2815452 -9.0370450 -1.944148553 0.7757249  0.941362575 #> 46   -8.02607124  -2.3142171 -7.1107570 -1.911476652 0.7757249  0.915314222 #> 47   -6.06509531  -2.3576116 -5.1931086 -1.868082123 0.7757249  0.871986728 #> 48   -4.08765648  -2.4156704 -3.2919230 -1.810023384 0.7757249  0.795733448 #> 49   -2.07838972  -2.4903037 -1.4225654 -1.735390098 0.7757249  0.655824298 #> 50   -0.01420556  -2.5697656  0.3918748 -1.655928191 0.7757249  0.406080345 #> 51    2.10850100  -2.6124608  2.1477926 -1.613232987 0.7757249  0.039291588 #> 52    4.23166149  -2.5851154  3.9032565 -1.640578380 0.7757249 -0.328405017 #> 53    6.29834611  -2.5190292  5.7151962 -1.706664594 0.7757249 -0.583149897 #> 54    8.31173615  -2.4538718  7.5804305 -1.771821911 0.7757249 -0.731305600 #> 55   10.29341121  -2.4018507  9.4773799 -1.823843058 0.7757249 -0.816031349 #> 56   -9.99840199  -0.2402937 -9.0170506 -0.048071189 0.7757249  0.981351359 #> 57   -8.05434737  -0.2619487 -7.0824809 -0.026416259 0.7757249  0.971866494 #> 58   -6.10648522  -0.2928607 -5.1517187  0.004495719 0.7757249  0.954766562 #> 59   -4.14995898  -0.3397439 -3.2296205  0.051379004 0.7757249  0.920338440 #> 60   -2.17043688  -0.4155387 -1.3305183  0.127173728 0.7757249  0.839918605 #> 61   -0.12108875  -0.5365439  0.4987580  0.248178988 0.7757249  0.619846719 #> 62    2.09038703  -0.6427546  2.1659066  0.354389695 0.7757249  0.075519526 #> 63    4.32423152  -0.5732138  3.8106864  0.284848838 0.7757249 -0.513545089 #> 64    6.39548812  -0.4586648  5.6180542  0.170299854 0.7757249 -0.777433907 #> 65    8.38538775  -0.3829536  7.5067789  0.094588647 0.7757249 -0.878608798 #> 66   10.34728759  -0.3356393  9.4235035  0.047274390 0.7757249 -0.923784114 #> 67  -10.00737468   1.8057334 -9.0080779  1.843230522 0.7757249  0.999296735 #> 68   -8.06779252   1.7995577 -7.0690357  1.849406165 0.7757249  0.998756794 #> 69   -6.12793939   1.7904056 -5.1302645  1.858558317 0.7757249  0.997674899 #> 70   -4.18738117   1.7754637 -3.1921983  1.873500161 0.7757249  0.995182827 #> 71   -2.24441104   1.7468306 -1.2565441  1.902133294 0.7757249  0.987866931 #> 72   -0.28726716   1.6717498  0.6649364  1.977214078 0.7757249  0.952203541 #> 73    1.98016556   1.3468822  2.2761280  2.302081730 0.7757249  0.295962475 #> 74    4.52058373   1.6131103  3.6143342  2.035853564 0.7757249 -0.906249501 #> 75    6.49381242   1.7113855  5.5197299  1.937578424 0.7757249 -0.974082515 #> 76    8.43975818   1.7452029  7.4524085  1.903760957 0.7757249 -0.987349661 #> 77   10.38148060   1.7620351  9.3893105  1.886928788 0.7757249 -0.992170131 #> 78  -10.00435014   3.8511530 -9.0111025  3.735139681 0.7757249  0.993247653 #> 79   -8.06375212   3.8612659 -7.0730761  3.725026809 0.7757249  0.990675985 #> 80   -6.12216953   3.8761184 -5.1360344  3.710174353 0.7757249  0.986135176 #> 81   -4.17824560   3.8999681 -3.2013339  3.686324601 0.7757249  0.976911689 #> 82   -2.22717515   3.9440086 -1.2737800  3.642284092 0.7757249  0.953395146 #> 83   -0.24227042   4.0464218  0.6199396  3.539870904 0.7757249  0.862210053 #> 84    2.03133949   4.2836852  2.2249541  3.302607528 0.7757249  0.193614617 #> 85    4.46995199   4.0897932  3.6649660  3.496499473 0.7757249 -0.804986024 #> 86    6.48051505   3.9530424  5.5330273  3.633250348 0.7757249 -0.947487763 #> 87    8.43478259   3.8988490  7.4573841  3.687443718 0.7757249 -0.977398489 #> 88   10.37929186   3.8710335  9.3914992  3.715259173 0.7757249 -0.987792663 #> 89   -9.99077319   5.8909065 -9.0246794  5.632715035 0.7757249  0.966093764 #> 90   -8.04460713   5.9142582 -7.0922211  5.609363331 0.7757249  0.952386009 #> 91   -6.09356692   5.9469385 -5.1646370  5.576683031 0.7757249  0.928929963 #> 92   -4.13211994   5.9949288 -3.2474596  5.528692766 0.7757249  0.884660375 #> 93   -2.14556918   6.0682461 -1.3553860  5.455375426 0.7757249  0.790183214 #> 94   -0.09357498   6.1744181  0.4712442  5.349203429 0.7757249  0.564819191 #> 95    2.08687071   6.2601041  2.1694229  5.263517401 0.7757249  0.082552164 #> 96    4.29658082   6.2062241  3.8383371  5.317397473 0.7757249 -0.458243685 #> 97    6.37836568   6.0963515  5.6351766  5.427270024 0.7757249 -0.743189040 #> 98    8.37723196   6.0150120  7.5149347  5.508609514 0.7757249 -0.862297217 #> 99   10.34366551   5.9617823  9.4271256  5.561839201 0.7757249 -0.916539951 #> 100  -9.96970528   7.9217222 -9.0457473  7.539228138 0.7757249  0.923957936 #> 101  -8.01596333   7.9534095 -7.1208649  7.507540878 0.7757249  0.895098417 #> 102  -6.05351025   7.9948189 -5.2046936  7.466131487 0.7757249  0.848816608 #> 103  -4.07512702   8.0490897 -3.3044525  7.411860696 0.7757249  0.770674526 #> 104  -2.06731004   8.1172790 -1.4336451  7.343671379 0.7757249  0.633664943 #> 105  -0.01040258   8.1890649  0.3880718  7.271885454 0.7757249  0.398474377 #> 106   2.10051390   8.2297110  2.1557797  7.231239347 0.7757249  0.055265786 #> 107   4.21912612   8.2069173  3.9157918  7.254033083 0.7757249 -0.303334288 #> 108   6.28981408   8.1426483  5.7237283  7.318302032 0.7757249 -0.566085827 #> 109   8.30813423   8.0753218  7.5840325  7.385628618 0.7757249 -0.724101773 #> 110  10.29304183   8.0199998  9.4777492  7.440950581 0.7757249 -0.815292593 #> 111  -9.94451816   9.9424766 -9.0709345  9.455802633 0.7757249  0.873583701 #> 112  -7.98348235   9.9779197 -7.1533459  9.420359461 0.7757249  0.830136457 #> 113  -6.01170553  10.0210317 -5.2464984  9.377247542 0.7757249  0.765207170 #> 114  -4.02304433  10.0718880 -3.3565352  9.326391174 0.7757249  0.666509149 #> 115  -2.00930520  10.1269342 -1.4916499  9.271344953 0.7757249  0.517655253 #> 116   0.03584412  10.1751584  0.3418251  9.223120787 0.7757249  0.305980978 #> 117   2.10666559  10.1986779  2.1496280  9.199601255 0.7757249  0.042962411 #> 118   4.17967043  10.1863855  3.9552475  9.211893675 0.7757249 -0.224422896 #> 119   6.22989139  10.1465962  5.7836509  9.251683047 0.7757249 -0.446240446 #> 120   8.24916984  10.0968060  7.6429969  9.301473186 0.7757249 -0.606172990 #> 121  10.24260182  10.0490020  9.5281892  9.349277243 0.7757249 -0.714412574 #>              dy xend_lower_outer yend_lower_outer xend_upper_outer #> 1    0.72542244        9.4188104      10.59922507      15.87901303 #> 2    0.78969649        8.1596911      11.45267529      13.70106005 #> 3    0.85315518        6.8411539      12.25526757      11.58252496 #> 4    0.91118067        5.4283756      12.97719538       9.55823108 #> 5    0.95816546        3.8752875      13.57902705       7.67424684 #> 6    0.98882576        2.1450956      14.02926905       5.96736651 #> 7    0.99996780        0.2407509      14.33044742       4.43463888 #> 8    0.99168514       -1.7979115      14.51665830       3.03622904 #> 9    0.96714373       -3.9256121      14.62665817       1.72685738 #> 10   0.93117740       -6.1093109      14.68872721       0.47348384 #> 11   0.88869656       -8.3284557      14.72045667      -0.74444364 #> 12   0.65759519       10.1969736       9.22755219      15.71923276 #> 13   0.72946306        8.8253098       9.96286181      13.56512036 #> 14   0.80464122        7.4041423      10.65579943      11.46051163 #> 15   0.87775850        5.9044793      11.28154985       9.43439847 #> 16   0.94059201        4.2875698      11.80694482       7.52553167 #> 17   0.98366598        2.5214470      12.20462265       5.76587825 #> 18   0.99993415        0.6069270      12.47528187       4.15462208 #> 19   0.98836216       -1.4231805      12.64700559       2.65895335 #> 20   0.95421033       -3.5303404      12.75277737       1.24033701 #> 21   0.90587059       -5.6860537      12.81699051      -0.12972590 #> 22   0.85126623       -7.8724987      12.85489927      -1.46905712 #> 23   0.57165922       10.9159743       7.80523996      15.61861500 #> 24   0.64844871        9.4404161       8.42981296      13.47969303 #> 25   0.73467958        7.9249147       9.02019709      11.38071429 #> 26   0.82578466        6.3459738       9.55628104       9.34517505 #> 27   0.91122755        4.6714281      10.01053343       7.40524054 #> 28   0.97454495        2.8729598      10.35871589       5.58922871 #> 29   0.99986376        0.9483569      10.59893526       3.89935136 #> 30   0.98259356       -1.0763481      10.75347349       2.30957623 #> 31   0.93256885       -3.1684066      10.85036147       0.78715454 #> 32   0.86578054       -5.3029859      10.91085434      -0.69274635 #> 33   0.79533254       -7.4644302      10.94835240      -2.14578214 #> 34   0.46504546       11.5397811       6.30144786      15.61319109 #> 35   0.54089055        9.9744205       6.82734601      13.47536764 #> 36   0.63336542        8.3778208       7.32650557      11.36878319 #> 37   0.74217084        6.7313279       7.78295969       9.31209196 #> 38   0.85832972        5.0082129       8.17383017       7.33202284 #> 39   0.95644452        3.1821826       8.47661162       5.45486911 #> 40   0.99969930        1.2467516       8.68575314       3.68711596 #> 41   0.97128335       -0.7784763       8.81803419       2.00915974 #> 42   0.89302395       -2.8650316       8.89782290       0.39253092 #> 43   0.79886953       -4.9903259       8.94445344      -1.18535884 #> 44   0.70972602       -7.1399513       8.97025816      -2.73891758 #> 45   0.33739665       12.0196080       4.67441803      15.75174718 #> 46   0.40274046       10.3859549       5.12005260      13.59351216 #> 47   0.48952951        8.7277691       5.54468870      11.45980991 #> 48   0.60564699        7.0299699       5.93541823       9.36572105 #> 49   0.75491356        5.2694913       6.27249817       7.33431161 #> 50   0.91383738        3.4201461       6.53351401       5.39176872 #> 51   0.99922779        1.4699207       6.70818273       3.55010612 #> 52   0.94453700       -0.5673609       6.80833691       1.79549970 #> 53   0.81236457       -2.6652683       6.85659927       0.10151904 #> 54   0.68204994       -4.8013317       6.87220261      -1.55430570 #> 55   0.57800764       -6.9610429       6.86756484      -3.18648253 #> 56   0.19222256       12.3158125       2.89021925      16.07392552 #> 57   0.23553242       10.6412585       3.27903552      13.86788755 #> 58   0.29735637        8.9452332       3.64947377      11.68332083 #> 59   0.39112294        7.2140910       3.98985416       9.53387104 #> 60   0.54271239        5.4257289       4.28125800       7.44164112 #> 61   0.78472291        3.5520215       4.49961162       5.43475656 #> 62   0.99714432        1.5753728       4.62985406       3.53081328 #> 63   0.85806261       -0.4941211       4.68062698       1.71971512 #> 64   0.62896464       -2.6291000       4.67534885      -0.02589797 #> 65   0.47754223       -4.8048797       4.63514784      -1.73071027 #> 66   0.38291371       -7.0054947       4.57368933      -3.41068720 #> 67   0.03749715       12.4318444       0.95180406      16.57627660 #> 68   0.04984844       10.7428452       1.30644655      14.29597983 #> 69   0.06815274        9.0310120       1.64154460      12.03851707 #> 70   0.09803643        7.2815267       1.94441480       9.81870646 #> 71   0.15530269        5.4698695       2.19406986       7.66106768 #> 72   0.30546426        3.5638040       2.36291740       5.59783724 #> 73   0.95519957        1.5420016       2.43270149       3.65034372 #> 74   0.42274323       -0.5848026       2.41261079       1.80785193 #> 75   0.22619296       -2.7852456       2.32948985       0.03899906 #> 76   0.15855802       -5.0310759       2.20752033      -1.68446658 #> 77   0.12489368       -7.3042490       2.06214715      -3.38058947 #> 78  -0.11601336       12.4107752      -1.10396093      17.21572874 #> 79  -0.13623910       10.7269895      -0.76666561      14.84151448 #> 80  -0.16594401        9.0154291      -0.45314374      12.49507501 #> 81  -0.21364352        7.2579675      -0.17891037      10.19453673 #> 82  -0.30172453        5.4248700       0.03058350       7.96963432 #> 83  -0.50655091        3.4781792       0.14284870       5.85832525 #> 84  -0.98107766        1.3951413       0.13840948       3.88336325 #> 85  -0.59329377       -0.8087513       0.03052634       2.02925594 #> 86  -0.31979202       -3.0961120      -0.14880020       0.25861675 #> 87  -0.21140528       -5.4346426      -0.37192496      -1.46085250 #> 88  -0.15577437       -7.8040149      -0.62144821      -3.14948009 #> 89  -0.25819148       12.3003345      -3.23622218      17.94455233 #> 90  -0.30489488       10.6343045      -2.90553880      15.46387848 #> 91  -0.37025548        8.9333347      -2.60476168      13.01814444 #> 92  -0.46623601        7.1746831      -2.35335653      10.63009222 #> 93  -0.61287069        5.3217758      -2.18262823       8.33629566 #> 94  -0.82521469        3.3301924      -2.13059792       6.18117528 #> 95  -0.99658674        1.1771597      -2.21675784       4.18750409 #> 96  -0.88882660       -1.1150805      -2.42207063       2.33304052 #> 97  -0.66908150       -3.5021526      -2.70855341       0.57340876 #> 98  -0.50640252       -5.9472963      -3.04474183      -1.12815136 #> 99  -0.39994314       -8.4276078      -3.41103164      -2.79454368 #> 100 -0.38249410       12.1344707      -5.41592210      18.72879905 #> 101 -0.44586862       10.4938612      -5.08529001      16.13400071 #> 102 -0.52868740        8.8098967      -4.79176715      13.58255750 #> 103 -0.63722898        7.0545098      -4.55937726      11.10253662 #> 104 -0.77360761        5.1834714      -4.42597770       8.73816725 #> 105 -0.91717946        3.1455940      -4.43538169       6.54063685 #> 106 -0.99847168        0.9186270      -4.60663433       4.53219603 #> 107 -0.95288421       -1.4677777      -4.91435555       2.68319297 #> 108 -0.82434631       -3.9617479      -5.31414603       0.94175546 #> 109 -0.68969314       -6.5216268      -5.77035004      -0.73377350 #> 110 -0.57904921       -9.1216170      -6.26088689      -2.36919102 #> 111 -0.48667393       11.9338757      -7.62534974      19.54777698 #> 112 -0.55756028       10.3234486      -7.29069307      16.83409229 #> 113 -0.64378412        8.6605489      -7.00094973      14.17288034 #> 114 -0.74549685        6.9114000      -6.78503013      11.59791749 #> 115 -0.85558929        5.0237007      -6.68770086       9.16150503 #> 116 -0.95203763        2.9393330      -6.75870727       6.92176102 #> 117 -0.99907669        0.6366861      -7.01654680       4.90029624 #> 118 -0.97449185       -1.8469980      -7.42934265       3.05986863 #> 119 -0.89491310       -4.4520252      -7.94600044       1.34078410 #> 120 -0.79533283       -7.1314818      -8.52636508      -0.30387102 #> 121 -0.69972471       -9.8564215      -9.14566035      -1.90304304 #>     yend_upper_outer xend_lower_inner yend_lower_inner xend_upper_inner #> 1         16.1287475               NA               NA               NA #> 2         16.1957345               NA               NA               NA #> 3         16.3135795               NA               NA               NA #> 4         16.5120890               NA               NA               NA #> 5         16.8306946               NA               NA               NA #> 6         17.3008898               NA               NA               NA #> 7         17.9201487               NA               NA               NA #> 8         18.6543751               NA               NA               NA #> 9         19.4648125               NA               NA               NA #> 10        20.3231807               NA               NA               NA #> 11        21.2118885               NA               NA               NA #> 12        13.9542547               NA               NA               NA #> 13        14.0198381               NA               NA               NA #> 14        14.1277935               NA               NA               NA #> 15        14.3029361               NA               NA               NA #> 16        14.5784342               NA               NA               NA #> 17        14.9816494               NA               NA               NA #> 18        15.5118832               NA               NA               NA #> 19        16.1410525               NA               NA               NA #> 20        16.8361737               NA               NA               NA #> 21        17.5728536               NA               NA               NA #> 22        18.3358379               NA               NA               NA #> 23        11.8304012               NA               NA               NA #> 24        11.8871770               NA               NA               NA #> 25        11.9781417               NA               NA               NA #> 26        12.1234066               NA               NA               NA #> 27        12.3505030               NA               NA               NA #> 28        12.6836693               NA               NA               NA #> 29        13.1247987               NA               NA               NA #> 30        13.6516093               NA               NA               NA #> 31        14.2360701               NA               NA               NA #> 32        14.8569261               NA               NA               NA #> 33        15.5007768               NA               NA               NA #> 34         9.7880276               NA               NA               NA #> 35         9.8239341               NA               NA               NA #> 36         9.8865791               NA               NA               NA #> 37         9.9919295               NA               NA               NA #> 38        10.1628636               NA               NA               NA #> 39        10.4218867               NA               NA               NA #> 40        10.7745498               NA               NA               NA #> 41        11.2040733               NA               NA               NA #> 42        11.6860892               NA               NA               NA #> 43        12.2012632               NA               NA               NA #> 44        12.7372631               NA               NA               NA #> 45         7.8688918               NA               NA               NA #> 46         7.8655175               NA               NA               NA #> 47         7.8831418               NA               NA               NA #> 48         7.9346726               NA               NA               NA #> 49         8.0398530               NA               NA               NA #> 50         8.2210975               NA               NA               NA #> 51         8.4886891               NA               NA               NA #> 52         8.8307953               NA               NA               NA #> 53         9.2247933               NA               NA               NA #> 54         9.6514503               NA               NA               NA #> 55        10.0983484               NA               NA               NA #> 56         6.1069249               NA               NA               NA #> 57         6.0408247               NA               NA               NA #> 58         5.9931026               NA               NA               NA #> 59         5.9754383               NA               NA               NA #> 60         6.0067506               NA               NA               NA #> 61         6.1111131               NA               NA               NA #> 62         6.3035867               NA               NA               NA #> 63         6.5755299               NA               NA               NA #> 64         6.9035242               NA               NA               NA #> 65         7.2664413               NA               NA               NA #> 66         7.6506159               NA               NA               NA #> 67         4.4991744               NA               NA               NA #> 68         4.3477038               NA               NA               NA #> 69         4.2157776               NA               NA               NA #> 70         4.1160793               NA               NA               NA #> 71         4.0695961               NA               NA               NA #> 72         4.1039204               NA               NA               NA #> 73         4.2373082               NA               NA               NA #> 74         4.4605708               NA               NA               NA #> 75         4.7468636               NA               NA               NA #> 76         5.0720050               NA               NA               NA #> 77         5.4205501               NA               NA               NA #> 78         3.0087737               NA               NA               NA #> 79         2.7551060               NA               NA               NA #> 80         2.5252118               NA               NA               NA #> 81         2.3346061               NA               NA               NA #> 82         2.2087398               NA               NA               NA #> 83         2.1801023               NA               NA               NA #> 84         2.2681692               NA               NA               NA #> 85         2.4596800               NA               NA               NA #> 86         2.7226342               NA               NA               NA #> 87         3.0293866               NA               NA               NA #> 88         3.3625375               NA               NA               NA #> 89         1.5948692               NA               NA               NA #> 90         1.2282693               NA               NA               NA #> 91         0.8915756               NA               NA               NA #> 92         0.6042538               NA               NA               NA #> 93         0.3976090               NA               NA               NA #> 94         0.3096621               NA               NA               NA #> 95         0.3599054               NA               NA               NA #> 96         0.5293016               NA               NA               NA #> 97         0.7798678               NA               NA               NA #> 98         1.0801397               NA               NA               NA #> 99         1.4105129               NA               NA               NA #> 100        0.2284035               NA               NA               NA #> 101       -0.2576894               NA               NA               NA #> 102       -0.7066731               NA               NA               NA #> 103       -1.0945238               NA               NA               NA #> 104       -1.3833842               NA               NA               NA #> 105       -1.5294410               NA               NA               NA #> 106       -1.5136492               NA               NA               NA #> 107       -1.3613887               NA               NA               NA #> 108       -1.1170591               NA               NA               NA #> 109       -0.8163159               NA               NA               NA #> 110       -0.4812398               NA               NA               NA #> 111       -1.1083346               NA               NA               NA #> 112       -1.7179963               NA               NA               NA #> 113       -2.2827447               NA               NA               NA #> 114       -2.7736693               NA               NA               NA #> 115       -3.1460036               NA               NA               NA #> 116       -3.3500023               NA               NA               NA #> 117       -3.3671678               NA               NA               NA #> 118       -3.2293769               NA               NA               NA #> 119       -2.9877242               NA               NA               NA #> 120       -2.6823646               NA               NA               NA #> 121       -2.3380744               NA               NA               NA #>     yend_upper_inner PANEL group  id linewidth linetype alpha   fill  colour #> 1                 NA     1    -1   1       0.5        1     1 grey80 #3366FF #> 2                 NA     1    -1   2       0.5        1     1 grey80 #3366FF #> 3                 NA     1    -1   3       0.5        1     1 grey80 #3366FF #> 4                 NA     1    -1   4       0.5        1     1 grey80 #3366FF #> 5                 NA     1    -1   5       0.5        1     1 grey80 #3366FF #> 6                 NA     1    -1   6       0.5        1     1 grey80 #3366FF #> 7                 NA     1    -1   7       0.5        1     1 grey80 #3366FF #> 8                 NA     1    -1   8       0.5        1     1 grey80 #3366FF #> 9                 NA     1    -1   9       0.5        1     1 grey80 #3366FF #> 10                NA     1    -1  10       0.5        1     1 grey80 #3366FF #> 11                NA     1    -1  11       0.5        1     1 grey80 #3366FF #> 12                NA     1    -1  12       0.5        1     1 grey80 #3366FF #> 13                NA     1    -1  13       0.5        1     1 grey80 #3366FF #> 14                NA     1    -1  14       0.5        1     1 grey80 #3366FF #> 15                NA     1    -1  15       0.5        1     1 grey80 #3366FF #> 16                NA     1    -1  16       0.5        1     1 grey80 #3366FF #> 17                NA     1    -1  17       0.5        1     1 grey80 #3366FF #> 18                NA     1    -1  18       0.5        1     1 grey80 #3366FF #> 19                NA     1    -1  19       0.5        1     1 grey80 #3366FF #> 20                NA     1    -1  20       0.5        1     1 grey80 #3366FF #> 21                NA     1    -1  21       0.5        1     1 grey80 #3366FF #> 22                NA     1    -1  22       0.5        1     1 grey80 #3366FF #> 23                NA     1    -1  23       0.5        1     1 grey80 #3366FF #> 24                NA     1    -1  24       0.5        1     1 grey80 #3366FF #> 25                NA     1    -1  25       0.5        1     1 grey80 #3366FF #> 26                NA     1    -1  26       0.5        1     1 grey80 #3366FF #> 27                NA     1    -1  27       0.5        1     1 grey80 #3366FF #> 28                NA     1    -1  28       0.5        1     1 grey80 #3366FF #> 29                NA     1    -1  29       0.5        1     1 grey80 #3366FF #> 30                NA     1    -1  30       0.5        1     1 grey80 #3366FF #> 31                NA     1    -1  31       0.5        1     1 grey80 #3366FF #> 32                NA     1    -1  32       0.5        1     1 grey80 #3366FF #> 33                NA     1    -1  33       0.5        1     1 grey80 #3366FF #> 34                NA     1    -1  34       0.5        1     1 grey80 #3366FF #> 35                NA     1    -1  35       0.5        1     1 grey80 #3366FF #> 36                NA     1    -1  36       0.5        1     1 grey80 #3366FF #> 37                NA     1    -1  37       0.5        1     1 grey80 #3366FF #> 38                NA     1    -1  38       0.5        1     1 grey80 #3366FF #> 39                NA     1    -1  39       0.5        1     1 grey80 #3366FF #> 40                NA     1    -1  40       0.5        1     1 grey80 #3366FF #> 41                NA     1    -1  41       0.5        1     1 grey80 #3366FF #> 42                NA     1    -1  42       0.5        1     1 grey80 #3366FF #> 43                NA     1    -1  43       0.5        1     1 grey80 #3366FF #> 44                NA     1    -1  44       0.5        1     1 grey80 #3366FF #> 45                NA     1    -1  45       0.5        1     1 grey80 #3366FF #> 46                NA     1    -1  46       0.5        1     1 grey80 #3366FF #> 47                NA     1    -1  47       0.5        1     1 grey80 #3366FF #> 48                NA     1    -1  48       0.5        1     1 grey80 #3366FF #> 49                NA     1    -1  49       0.5        1     1 grey80 #3366FF #> 50                NA     1    -1  50       0.5        1     1 grey80 #3366FF #> 51                NA     1    -1  51       0.5        1     1 grey80 #3366FF #> 52                NA     1    -1  52       0.5        1     1 grey80 #3366FF #> 53                NA     1    -1  53       0.5        1     1 grey80 #3366FF #> 54                NA     1    -1  54       0.5        1     1 grey80 #3366FF #> 55                NA     1    -1  55       0.5        1     1 grey80 #3366FF #> 56                NA     1    -1  56       0.5        1     1 grey80 #3366FF #> 57                NA     1    -1  57       0.5        1     1 grey80 #3366FF #> 58                NA     1    -1  58       0.5        1     1 grey80 #3366FF #> 59                NA     1    -1  59       0.5        1     1 grey80 #3366FF #> 60                NA     1    -1  60       0.5        1     1 grey80 #3366FF #> 61                NA     1    -1  61       0.5        1     1 grey80 #3366FF #> 62                NA     1    -1  62       0.5        1     1 grey80 #3366FF #> 63                NA     1    -1  63       0.5        1     1 grey80 #3366FF #> 64                NA     1    -1  64       0.5        1     1 grey80 #3366FF #> 65                NA     1    -1  65       0.5        1     1 grey80 #3366FF #> 66                NA     1    -1  66       0.5        1     1 grey80 #3366FF #> 67                NA     1    -1  67       0.5        1     1 grey80 #3366FF #> 68                NA     1    -1  68       0.5        1     1 grey80 #3366FF #> 69                NA     1    -1  69       0.5        1     1 grey80 #3366FF #> 70                NA     1    -1  70       0.5        1     1 grey80 #3366FF #> 71                NA     1    -1  71       0.5        1     1 grey80 #3366FF #> 72                NA     1    -1  72       0.5        1     1 grey80 #3366FF #> 73                NA     1    -1  73       0.5        1     1 grey80 #3366FF #> 74                NA     1    -1  74       0.5        1     1 grey80 #3366FF #> 75                NA     1    -1  75       0.5        1     1 grey80 #3366FF #> 76                NA     1    -1  76       0.5        1     1 grey80 #3366FF #> 77                NA     1    -1  77       0.5        1     1 grey80 #3366FF #> 78                NA     1    -1  78       0.5        1     1 grey80 #3366FF #> 79                NA     1    -1  79       0.5        1     1 grey80 #3366FF #> 80                NA     1    -1  80       0.5        1     1 grey80 #3366FF #> 81                NA     1    -1  81       0.5        1     1 grey80 #3366FF #> 82                NA     1    -1  82       0.5        1     1 grey80 #3366FF #> 83                NA     1    -1  83       0.5        1     1 grey80 #3366FF #> 84                NA     1    -1  84       0.5        1     1 grey80 #3366FF #> 85                NA     1    -1  85       0.5        1     1 grey80 #3366FF #> 86                NA     1    -1  86       0.5        1     1 grey80 #3366FF #> 87                NA     1    -1  87       0.5        1     1 grey80 #3366FF #> 88                NA     1    -1  88       0.5        1     1 grey80 #3366FF #> 89                NA     1    -1  89       0.5        1     1 grey80 #3366FF #> 90                NA     1    -1  90       0.5        1     1 grey80 #3366FF #> 91                NA     1    -1  91       0.5        1     1 grey80 #3366FF #> 92                NA     1    -1  92       0.5        1     1 grey80 #3366FF #> 93                NA     1    -1  93       0.5        1     1 grey80 #3366FF #> 94                NA     1    -1  94       0.5        1     1 grey80 #3366FF #> 95                NA     1    -1  95       0.5        1     1 grey80 #3366FF #> 96                NA     1    -1  96       0.5        1     1 grey80 #3366FF #> 97                NA     1    -1  97       0.5        1     1 grey80 #3366FF #> 98                NA     1    -1  98       0.5        1     1 grey80 #3366FF #> 99                NA     1    -1  99       0.5        1     1 grey80 #3366FF #> 100               NA     1    -1 100       0.5        1     1 grey80 #3366FF #> 101               NA     1    -1 101       0.5        1     1 grey80 #3366FF #> 102               NA     1    -1 102       0.5        1     1 grey80 #3366FF #> 103               NA     1    -1 103       0.5        1     1 grey80 #3366FF #> 104               NA     1    -1 104       0.5        1     1 grey80 #3366FF #> 105               NA     1    -1 105       0.5        1     1 grey80 #3366FF #> 106               NA     1    -1 106       0.5        1     1 grey80 #3366FF #> 107               NA     1    -1 107       0.5        1     1 grey80 #3366FF #> 108               NA     1    -1 108       0.5        1     1 grey80 #3366FF #> 109               NA     1    -1 109       0.5        1     1 grey80 #3366FF #> 110               NA     1    -1 110       0.5        1     1 grey80 #3366FF #> 111               NA     1    -1 111       0.5        1     1 grey80 #3366FF #> 112               NA     1    -1 112       0.5        1     1 grey80 #3366FF #> 113               NA     1    -1 113       0.5        1     1 grey80 #3366FF #> 114               NA     1    -1 114       0.5        1     1 grey80 #3366FF #> 115               NA     1    -1 115       0.5        1     1 grey80 #3366FF #> 116               NA     1    -1 116       0.5        1     1 grey80 #3366FF #> 117               NA     1    -1 117       0.5        1     1 grey80 #3366FF #> 118               NA     1    -1 118       0.5        1     1 grey80 #3366FF #> 119               NA     1    -1 119       0.5        1     1 grey80 #3366FF #> 120               NA     1    -1 120       0.5        1     1 grey80 #3366FF #> 121               NA     1    -1 121       0.5        1     1 grey80 #3366FF  # Example 2: Polar Coordinates with Bootstrapping (boot) ggplot(sample_points, aes(x = x, y = y, angle = angle, distance = distance)) +   geom_vector_smooth(method = \"boot\", se = TRUE, probs = c(0.95, 0.68)) +   geom_vector(aes(dx = dx, dy = dy)) +   ggtitle(\"Vector Smoothing with Bootstrapping (boot)\")  #>              x           y       xend       yend    radius        dx        dy #> 1   -9.8119480 -10.3843032 -9.2035046 -9.5907059 0.7757249 0.6084434 0.7935972 #> 2   -7.8714388 -10.3852181 -7.2653895 -9.5897910 0.7757249 0.6060493 0.7954271 #> 3   -5.9329563 -10.3845845 -5.3252476 -9.5904245 0.7757249 0.6077087 0.7941600 #> 4   -3.9960322 -10.3827457 -3.3835473 -9.5922634 0.7757249 0.6124849 0.7904823 #> 5   -2.0543489 -10.3845716 -1.4466062 -9.5904375 0.7757249 0.6077427 0.7941340 #> 6   -0.1147374 -10.3848004  0.4924066 -9.5902086 0.7757249 0.6071440 0.7945918 #> 7    1.8261060 -10.3859658  2.4301876 -9.5890433 0.7757249 0.6040815 0.7969225 #> 8    3.7612573 -10.3827773  4.3736606 -9.5922318 0.7757249 0.6124033 0.7905455 #> 9    5.7039929 -10.3854056  6.3095495 -9.5896034 0.7757249 0.6055566 0.7958022 #> 10   7.6488072 -10.3895330  8.2433595 -9.5854761 0.7757249 0.5945523 0.8040570 #> 11   9.5902323 -10.3910869 10.1805587 -9.5839222 0.7757249 0.5903264 0.8071646 #> 12  -9.8117198  -8.4158137 -9.2037329 -7.6218666 0.7757249 0.6079869 0.7939471 #> 13  -7.8726753  -8.4156085 -7.2641530 -7.6220717 0.7757249 0.6085223 0.7935368 #> 14  -5.9315723  -8.4169754 -5.3266316 -7.6207048 0.7757249 0.6049406 0.7962706 #> 15  -3.9946522  -8.4151467 -3.3849273 -7.6225335 0.7757249 0.6097248 0.7926132 #> 16  -2.0542001  -8.4160209 -1.4467550 -7.6216593 0.7757249 0.6074451 0.7943617 #> 17  -0.1140167  -8.4166857  0.4916859 -7.6209946 0.7757249 0.6057026 0.7956911 #> 18   1.8247643  -8.4162807  2.4315293 -7.6213995 0.7757249 0.6067650 0.7948812 #> 19   3.7634521  -8.4158034  4.3714659 -7.6218769 0.7757249 0.6080138 0.7939265 #> 20   5.7075420  -8.4194171  6.3060003 -7.6182631 0.7757249 0.5984583 0.8011540 #> 21   7.6505153  -8.4221260  8.2416514 -7.6155542 0.7757249 0.5911361 0.8065718 #> 22   9.5900557  -8.4222932 10.1807354 -7.6153870 0.7757249 0.5906797 0.8069061 #> 23  -9.8089753  -6.4492359 -9.2064774 -5.6511155 0.7757249 0.6024979 0.7981205 #> 24  -7.8720771  -6.4474021 -7.2647511 -5.6529493 0.7757249 0.6073260 0.7944527 #> 25  -5.9336172  -6.4467491 -5.3245867 -5.6536023 0.7757249 0.6090305 0.7931468 #> 26  -3.9920884  -6.4484414 -3.3874911 -5.6519100 0.7757249 0.6045972 0.7965314 #> 27  -2.0549840  -6.4467559 -1.4459712 -5.6535955 0.7757249 0.6090128 0.7931604 #> 28  -0.1149190  -6.4473328  0.4925882 -5.6530186 0.7757249 0.6075072 0.7943142 #> 29   1.8238864  -6.4469447  2.4324071 -5.6534067 0.7757249 0.6085207 0.7935380 #> 30   3.7659490  -6.4490388  4.3689690 -5.6513127 0.7757249 0.6030200 0.7977261 #> 31   5.7093234  -6.4520772  6.3042189 -5.6482742 0.7757249 0.5948956 0.8038030 #> 32   7.6492510  -6.4525320  8.2429157 -5.6478194 0.7757249 0.5936647 0.8047125 #> 33   9.5897018  -6.4533694 10.1810893 -5.6469820 0.7757249 0.5913876 0.8063875 #> 34  -9.8136494  -4.4769997 -9.2018033 -3.6860229 0.7757249 0.6118461 0.7909768 #> 35  -7.8715021  -4.4791766 -7.2653261 -3.6838460 0.7757249 0.6061760 0.7953306 #> 36  -5.9319550  -4.4793555 -5.3262489 -3.6836671 0.7757249 0.6057061 0.7956884 #> 37  -3.9928849  -4.4791711 -3.3866946 -3.6838515 0.7757249 0.6061903 0.7953196 #> 38  -2.0523161  -4.4801258 -1.4486391 -3.6828968 0.7757249 0.6036770 0.7972290 #> 39  -0.1129867  -4.4801388  0.4906560 -3.6828838 0.7757249 0.6036427 0.7972550 #> 40   1.8240218  -4.4783841  2.4322718 -3.6846385 0.7757249 0.6082499 0.7937456 #> 41   3.7680127  -4.4819260  4.3669052 -3.6810966 0.7757249 0.5988925 0.8008294 #> 42   5.7080211  -4.4824457  6.3055212 -3.6805769 0.7757249 0.5975000 0.8018689 #> 43   7.6504383  -4.4847407  8.2417284 -3.6782818 0.7757249 0.5912902 0.8064589 #> 44   9.5881256  -4.4835443 10.1826655 -3.6794783 0.7757249 0.5945399 0.8040661 #> 45  -9.8110665  -2.5103198 -9.2043861 -1.7153740 0.7757249 0.6066805 0.7949458 #> 46  -7.8729338  -2.5094169 -7.2638945 -1.7162769 0.7757249 0.6090393 0.7931400 #> 47  -5.9335260  -2.5094903 -5.3246779 -1.7162035 0.7757249 0.6088481 0.7932869 #> 48  -3.9921375  -2.5110753 -3.3874421 -1.7146185 0.7757249 0.6046954 0.7964568 #> 49  -2.0539647  -2.5102076 -1.4469904 -1.7154862 0.7757249 0.6069743 0.7947214 #> 50  -0.1133307  -2.5112137  0.4909999 -1.7144801 0.7757249 0.6043306 0.7967336 #> 51   1.8268090  -2.5118400  2.4294846 -1.7138537 0.7757249 0.6026756 0.7979863 #> 52   3.7680940  -2.5133224  4.3668239 -1.7123714 0.7757249 0.5987299 0.8009510 #> 53   5.7070134  -2.5130285  6.3065289 -1.7126653 0.7757249 0.5995155 0.8003632 #> 54   7.6479289  -2.5142244  8.2442378 -1.7114694 0.7757249 0.5963089 0.8027550 #> 55   9.5877627  -2.5146113 10.1830284 -1.7110824 0.7757249 0.5952658 0.8035289 #> 56  -9.8173873  -0.5367510 -9.1980653  0.2483861 0.7757249 0.6193219 0.7851371 #> 57  -7.8767285  -0.5378095 -7.2600998  0.2494446 0.7757249 0.6166287 0.7872541 #> 58  -5.9351486  -0.5395753 -5.3230553  0.2512103 0.7757249 0.6120932 0.7907856 #> 59  -3.9947515  -0.5404126 -3.3848280  0.2520477 0.7757249 0.6099235 0.7924603 #> 60  -2.0546281  -0.5410357 -1.4463271  0.2526707 0.7757249 0.6083010 0.7937064 #> 61  -0.1132693  -0.5425959  0.4909385  0.2542309 0.7757249 0.6042078 0.7968268 #> 62   1.8254857  -0.5421728  2.4308079  0.2538078 0.7757249 0.6053221 0.7959806 #> 63   3.7652480  -0.5425146  4.3696700  0.2541497 0.7757249 0.6044220 0.7966644 #> 64   5.7052837  -0.5430626  6.3082586  0.2546976 0.7757249 0.6029749 0.7977602 #> 65   7.6459220  -0.5440614  8.2462447  0.2556965 0.7757249 0.6003227 0.7997579 #> 66   9.5857798  -0.5444704 10.1850112  0.2561055 0.7757249 0.5992314 0.8005759 #> 67  -9.8166010   1.4312944 -9.1988516  2.2176695 0.7757249 0.6177494 0.7863750 #> 68  -7.8754233   1.4298361 -7.2614050  2.2191278 0.7757249 0.6140183 0.7892918 #> 69  -5.9337384   1.4280017 -5.3244655  2.2209622 0.7757249 0.6092730 0.7929606 #> 70  -3.9942880   1.4278955 -3.3852915  2.2210684 0.7757249 0.6089965 0.7931729 #> 71  -2.0541957   1.4272978 -1.4467594  2.2216661 0.7757249 0.6074363 0.7943684 #> 72  -0.1131542   1.4259813  0.4908234  2.2229826 0.7757249 0.6039776 0.7970013 #> 73   1.8258757   1.4261953  2.4304178  2.2227685 0.7757249 0.6045421 0.7965732 #> 74   3.7657334   1.4257820  4.3691846  2.2231819 0.7757249 0.6034512 0.7973999 #> 75   5.7026081   1.4276384  6.3109343  2.2213255 0.7757249 0.6083262 0.7936871 #> 76   7.6435999   1.4263566  8.2485668  2.2226073 0.7757249 0.6049668 0.7962507 #> 77   9.5819081   1.4271214 10.1888829  2.2218425 0.7757249 0.6069748 0.7947211 #> 78  -9.8121785   3.3965245 -9.2032742  4.1897682 0.7757249 0.6089043 0.7932437 #> 79  -7.8751878   3.3983174 -7.2616405  4.1879754 0.7757249 0.6135473 0.7896580 #> 80  -5.9348550   3.3975265 -5.3233489  4.1887662 0.7757249 0.6115062 0.7912397 #> 81  -3.9943876   3.3966364 -3.3851919  4.1896563 0.7757249 0.6091957 0.7930199 #> 82  -2.0566111   3.3978208 -1.4443441  4.1884719 0.7757249 0.6122670 0.7906511 #> 83  -0.1130480   3.3945652  0.4907172  4.1917275 0.7757249 0.6037652 0.7971622 #> 84   1.8274362   3.3936803  2.4288574  4.1926125 0.7757249 0.6014211 0.7989322 #> 85   3.7673005   3.3932653  4.3676175  4.1930274 0.7757249 0.6003170 0.7997622 #> 86   5.7046605   3.3947381  6.3088819  4.1915546 0.7757249 0.6042214 0.7968165 #> 87   7.6452305   3.3937874  8.2469362  4.1925053 0.7757249 0.6017057 0.7987179 #> 88   9.5807268   3.3966908 10.1900642  4.1896019 0.7757249 0.6093374 0.7929111 #> 89  -9.8153932   5.3676774 -9.2000594  6.1559441 0.7757249 0.6153338 0.7882667 #> 90  -7.8743323   5.3663186 -7.2624960  6.1573030 0.7757249 0.6118363 0.7909844 #> 91  -5.9349172   5.3662390 -5.3232867  6.1573826 0.7757249 0.6116305 0.7911436 #> 92  -3.9956719   5.3662907 -3.3839076  6.1573308 0.7757249 0.6117644 0.7910401 #> 93  -2.0549560   5.3652091 -1.4459991  6.1584124 0.7757249 0.6089569 0.7932033 #> 94  -0.1130787   5.3632530  0.4907480  6.1603686 0.7757249 0.6038267 0.7971156 #> 95   1.8272680   5.3624714  2.4290256  6.1611502 0.7757249 0.6017576 0.7986788 #> 96   3.7663489   5.3626457  4.3685690  6.1609758 0.7757249 0.6022201 0.7983301 #> 97   5.7060009   5.3623897  6.3075415  6.1612319 0.7757249 0.6015406 0.7988422 #> 98   7.6435545   5.3637200  8.2486122  6.1599016 0.7757249 0.6050578 0.7961816 #> 99   9.5846454   5.3623744 10.1861456  6.1612471 0.7757249 0.6015002 0.7988727 #> 100 -9.8138417   7.3351356 -9.2016109  8.1258148 0.7757249 0.6122307 0.7906792 #> 101 -7.8765376   7.3366987 -7.2602906  8.1242517 0.7757249 0.6162470 0.7875529 #> 102 -5.9348785   7.3348735 -5.3233254  8.1260769 0.7757249 0.6115531 0.7912034 #> 103 -3.9951985   7.3345894 -3.3843810  8.1263609 0.7757249 0.6108174 0.7917715 #> 104 -2.0533478   7.3326441 -1.4476073  8.1283063 0.7757249 0.6057405 0.7956622 #> 105 -0.1125038   7.3314825  0.4901730  8.1294679 0.7757249 0.6026769 0.7979853 #> 106  1.8276948   7.3308146  2.4285988  8.1301358 0.7757249 0.6009041 0.7993212 #> 107  3.7686198   7.3296072  4.3662981  8.1313432 0.7757249 0.5976783 0.8017360 #> 108  5.7077447   7.3297469  6.3057977  8.1312035 0.7757249 0.5980530 0.8014565 #> 109  7.6448320   7.3314168  8.2473347  8.1295336 0.7757249 0.6025028 0.7981168 #> 110  9.5817002   7.3332735 10.1890908  8.1276769 0.7757249 0.6073906 0.7944033 #> 111 -9.8157629   9.3052952 -9.1996897 10.0929840 0.7757249 0.6160733 0.7876889 #> 112 -7.8755799   9.3046156 -7.2612483 10.0936636 0.7757249 0.6143316 0.7890479 #> 113 -5.9347445   9.3034344 -5.3234594 10.0948448 0.7757249 0.6112851 0.7914105 #> 114 -3.9966451   9.3043741 -3.3829344 10.0939051 0.7757249 0.6137107 0.7895310 #> 115 -2.0527507   9.3008546 -1.4482044 10.0974246 0.7757249 0.6045463 0.7965700 #> 116 -0.1119324   9.2997160  0.4896016 10.0985632 0.7757249 0.6015341 0.7988472 #> 117  1.8275137   9.2996152  2.4287799 10.0986640 0.7757249 0.6012662 0.7990488 #> 118  3.7686490   9.2982499  4.3662690 10.1000293 0.7757249 0.5976200 0.8017795 #> 119  5.7082783   9.2980137  6.3052640 10.1002655 0.7757249 0.5969857 0.8022519 #> 120  7.6480293   9.2976875  8.2441374 10.1005917 0.7757249 0.5961081 0.8029042 #> 121  9.5829736   9.3009676 10.1878175 10.0973116 0.7757249 0.6048439 0.7963441 #>     xend_upper_outer yend_upper_outer xend_lower_outer yend_lower_outer #> 1        -11.2196813         8.403085        8.6335177      -6.51765622 #> 2         -8.2385743         7.786119        9.7004279      -5.72864474 #> 3         -5.8744138         7.113142       10.7352040      -5.01741534 #> 4         -3.2511685         6.425195       11.9074889      -4.85973801 #> 5         -0.7270219         5.713888       13.0116729      -4.54139651 #> 6          1.5433229         5.002289       14.1652064      -4.40274033 #> 7          2.9600019         4.355412       15.5433789      -4.84525001 #> 8          4.9572265         3.666708       17.0165571      -5.56595939 #> 9          6.7018283         2.993226       18.5357717      -6.52244934 #> 10         7.7297894         2.326075       20.0616490      -7.77750804 #> 11         8.6707078         1.580529       21.4178851      -8.47206867 #> 12        -9.3819335         9.506207        7.2297223      -2.82260129 #> 13        -6.6589111         8.798235        8.2364025      -2.20085140 #> 14        -3.7850262         8.033388        9.2474593      -1.71308286 #> 15        -1.6395923         7.318697       10.2537398      -1.30904477 #> 16         0.9627404         6.520274       11.3956865      -1.24198578 #> 17         2.9548029         5.813590       12.6810361      -1.46661973 #> 18         4.5938018         5.175167       14.0576554      -1.86675789 #> 19         6.4239992         4.499862       15.6816987      -2.78619087 #> 20         8.0629010         3.859236       17.3629212      -3.97480452 #> 21         8.8556197         3.315603       18.8240030      -4.70708681 #> 22         9.7639081         2.667500       20.3259378      -5.73680259 #> 23        -8.2203110        10.480665        5.9673465      -0.09633207 #> 24        -5.2459053         9.676303        6.8234735       0.70184345 #> 25        -2.6497475         8.868437        7.6879551       1.30492704 #> 26         0.3595963         7.903486        8.5919502       1.71262385 #> 27         2.3417103         7.176771        9.8462013       1.51389531 #> 28         4.0953297         6.518383       11.0674440       1.35828038 #> 29         5.8552562         5.857996       12.4963694       0.89214733 #> 30         7.3937213         5.265021       14.2594088      -0.11537443 #> 31         8.6650121         4.737251       15.9277695      -1.04931477 #> 32         9.3685167         4.278614       17.6281446      -2.18172489 #> 33        10.5267930         3.671117       19.2327487      -3.30392227 #> 34        -7.8794679        11.469775        4.8286582       2.16042752 #> 35        -4.5605125        10.565271        5.5372300       3.11694697 #> 36        -1.7386750         9.646473        6.3615149       3.65270460 #> 37         0.9776457         8.676255        7.1945775       4.04720999 #> 38         3.2272474         7.820408        8.1895298       4.14221529 #> 39         5.0383378         7.131825        9.5305466       3.79179799 #> 40         6.5861842         6.555262       11.0202475       3.26325409 #> 41         8.0596712         6.006651       12.7813049       2.38205320 #> 42         9.1035499         5.600832       14.7582193       1.09052585 #> 43        10.2346047         5.119837       16.6495226      -0.31955875 #> 44        11.0998762         4.632087       18.2297497      -1.29340849 #> 45        -7.3155774        12.414381        3.8468908       4.01088217 #> 46        -4.1635082        11.474882        4.5553549       4.90384707 #> 47        -1.2508940        10.471281        5.2461996       5.58499627 #> 48         1.3543492         9.477241        5.9615667       6.04955408 #> 49         3.8050195         8.474396        6.8033866       6.24087498 #> 50         5.8091453         7.658563        8.0441949       5.97180893 #> 51         7.1949325         7.184809        9.6549039       5.33474654 #> 52         8.0941235         6.936483       11.7026168       4.19657111 #> 53         9.1252065         6.564751       13.7225342       2.93614836 #> 54        10.2445839         6.108984       15.5540658       1.76016340 #> 55        11.3770299         5.597418       17.1914641       0.76717323 #> 56        -7.5243503        13.459080        2.9149643       5.74303207 #> 57        -4.2034298        12.478228        3.6959240       6.47118297 #> 58        -1.2569977        11.437450        4.3962024       7.11823978 #> 59         1.3751895        10.397730        5.1501463       7.51358852 #> 60         3.8311915         9.348057        5.8749824       7.79999797 #> 61         5.9059028         8.456968        6.9673685       7.64787307 #> 62         6.9844675         8.187870        8.7276872       6.88810163 #> 63         7.8834659         7.962768       10.7452891       5.83002314 #> 64         8.8488996         7.628831       12.7142998       4.70416722 #> 65        10.0091692         7.162615       14.5560424       3.59133029 #> 66        11.1854438         6.641019       16.2387692       2.56943705 #> 67        -7.9913372        14.536851        2.3661245       6.61148788 #> 68        -4.7519028        13.611288        3.0578101       7.65070552 #> 69        -2.0109467        12.671764        3.8030538       8.28892435 #> 70         0.5443190        11.706549        4.6649950       8.59061063 #> 71         2.8434462        10.782296        5.6005508       8.70263211 #> 72         4.7886379        10.002948        6.9098501       8.37226419 #> 73         6.1183060         9.554835        8.5013270       7.74582493 #> 74         7.2903241         9.163582       10.1409436       7.05535502 #> 75         8.3622674         8.767514       12.0040892       6.04185535 #> 76         9.6017122         8.262887       13.7325519       5.09724052 #> 77        11.0129758         7.680942       15.3482998       4.21743887 #> 78        -8.5941107        15.615787        1.6987155       7.66938012 #> 79        -5.4280615        14.760284        2.5664614       8.49883587 #> 80        -2.9453780        13.934242        3.4903723       8.97767972 #> 81        -0.5229132        13.074060        4.3289719       9.43796097 #> 82         1.6499873        12.258185        5.5149449       9.30981872 #> 83         3.4667283        11.569155        6.8323446       8.99647913 #> 84         5.0335148        10.983131        8.2346881       8.57302106 #> 85         6.4600709        10.447010        9.7958334       7.93853187 #> 86         7.8210720         9.917160       11.2812545       7.39523718 #> 87         9.1808792         9.361139       12.9404811       6.54691743 #> 88        10.6478945         8.754314       14.4417823       5.89883568 #> 89        -9.1602400        16.669565        1.0272790       8.61023170 #> 90        -6.4062739        15.925023        2.0329034       9.29113863 #> 91        -3.8487246        15.139903        2.9204880      10.00714596 #> 92        -1.5093265        14.351114        4.0685617      10.04416315 #> 93         0.4955097        13.625245        5.2701322       9.95574558 #> 94         2.3570835        12.935341        6.5687006       9.69349557 #> 95         4.0082496        12.307353        7.8827347       9.40373777 #> 96         5.5049966        11.717125        9.3348148       8.89026834 #> 97         7.0434650        11.104676       10.7285834       8.46836521 #> 98         8.6595329        10.466691       12.1761147       7.94165920 #> 99        10.1845160         9.825637       13.6360129       7.35461424 #> 100      -10.0061246        17.686694        0.3047924       9.48807916 #> 101       -7.2282797        17.009082        1.3704988      10.24126563 #> 102       -4.7957366        16.290999        2.4350157      10.72164086 #> 103       -2.6472679        15.578681        3.5981977      10.82343970 #> 104       -0.6105251        14.873382        4.8124789      10.77156237 #> 105        1.3555705        14.175167        6.0929109      10.56547126 #> 106        3.0853463        13.517451        7.3679588      10.36670212 #> 107        4.7139723        12.871743        8.7241349      10.00335624 #> 108        6.4826551        12.203141       10.0703247       9.65887866 #> 109        8.1964088        11.536316       11.4444355       9.24989024 #> 110        9.9318975        10.860348       12.8320710       8.78658497 #> 111      -10.6780645        18.647011       -0.5636604      10.89821383 #> 112       -8.1331522        18.020235        0.6225888      11.26981813 #> 113       -5.6943845        17.355252        1.7913236      11.58530021 #> 114       -3.5146439        16.669483        2.9872637      11.70745340 #> 115       -1.5059591        15.983081        4.2315131      11.63911331 #> 116        0.5652511        15.291336        5.4945849      11.50561703 #> 117        2.4406829        14.610208        6.7456273      11.40065343 #> 118        4.2217490        13.933486        8.0280341      11.20490911 #> 119        6.0635708        13.251996        9.3459065      10.91412394 #> 120        7.8790074        12.567819       10.6513808      10.65579225 #> 121        9.7140680        11.878031       11.9744490      10.34161477 #>     xend_upper_inner yend_upper_inner xend_lower_inner yend_lower_inner PANEL #> 1        -4.24379916         7.716609       6.30818546      -0.44803302     1 #> 2        -2.14791804         6.952655       7.34287248      -0.29192184     1 #> 3         0.03631295         6.149266       8.31903644      -0.09095308     1 #> 4         1.98818184         5.418005       9.46052784      -0.15702957     1 #> 5         3.78744486         4.740448      10.83091020      -0.53817327     1 #> 6         5.47220031         4.105565      12.24116937      -0.97252878     1 #> 7         7.09970487         3.491919      13.76932025      -1.56762830     1 #> 8         8.68447270         2.893194      15.24591836      -2.09629118     1 #> 9        10.06770420         2.361232      16.72278679      -2.62887210     1 #> 10       11.73313868         1.731251      18.25936665      -3.25644202     1 #> 11       13.12654199         1.183432      19.84494967      -3.97899873     1 #> 12       -3.87462121         8.576678       4.99295467       1.82358517     1 #> 13       -1.60485949         7.731628       6.01859223       1.93276669     1 #> 14        0.49363174         6.933978       7.12599606       1.89993619     1 #> 15        2.48096939         6.171477       8.25059973       1.82343951     1 #> 16        4.32106244         5.467590       9.46098218       1.62743139     1 #> 17        6.04234648         4.815609      10.87488445       1.18958154     1 #> 18        7.63409317         4.222314      12.50738568       0.49189959     1 #> 19        9.02876511         3.713876      14.03360078      -0.08491294     1 #> 20       10.49478097         3.169285      15.60830135      -0.73001399     1 #> 21       11.85766792         2.658067      17.23286929      -1.45740329     1 #> 22       13.20757640         2.138705      18.85634221      -2.21067920     1 #> 23       -3.62011373         9.450216       3.85716464       3.76337722     1 #> 24       -1.51632331         8.649769       4.92168250       3.78413557     1 #> 25        0.80699352         7.734534       5.91872228       3.85382862     1 #> 26        2.70316323         6.997136       7.04917023       3.73639320     1 #> 27        4.66851725         6.217450       8.24962937       3.52562678     1 #> 28        6.33861873         5.586384       9.65764010       3.09154662     1 #> 29        7.85553266         5.035533      11.29975366       2.41017400     1 #> 30        9.21720389         4.560095      12.80345779       1.87320946     1 #> 31       10.62506339         4.054585      14.58796460       1.00658969     1 #> 32       11.91063783         3.592932      16.19442229       0.32729456     1 #> 33       13.23346510         3.098887      17.78072726      -0.34240419     1 #> 34       -3.51399927        10.360405       2.73759860       5.64195206     1 #> 35       -1.31918900         9.502409       3.83099192       5.59470956     1 #> 36        0.85044022         8.631023       4.83792754       5.61561620     1 #> 37        2.87763989         7.810269       5.93631707       5.50408348     1 #> 38        4.84573467         7.005572       7.10557212       5.29952322     1 #> 39        6.47206681         6.395968       8.51761866       4.85649401     1 #> 40        7.96111913         5.867934      10.14347293       4.21123133     1 #> 41        9.33556660         5.402993      11.77675536       3.55232955     1 #> 42       10.61124044         4.981417      13.49079250       2.79796817     1 #> 43       11.89007488         4.540964      15.21648565       2.00481704     1 #> 44       13.18251146         4.075130      16.79638915       1.36274543     1 #> 45       -3.79124683        11.421100       1.89977179       7.14538427     1 #> 46       -1.48221534        10.503728       2.87701362       7.22057736     1 #> 47        0.65705874         9.635053       3.88467925       7.21544026     1 #> 48        2.76947785         8.752296       5.01623621       7.05113604     1 #> 49        4.77984799         7.902547       6.07111976       6.93015466     1 #> 50        6.53438002         7.203934       7.41546628       6.53840387     1 #> 51        7.95583603         6.727784       9.08236241       5.87198913     1 #> 52        9.23811347         6.335154      10.86073398       5.09519063     1 #> 53       10.45481552         5.964297      12.58198746       4.35181725     1 #> 54       11.67028804         5.569074      14.27891241       3.61226293     1 #> 55       12.98471917         5.102924      15.95654306       2.86855065     1 #> 56       -3.89160225        12.403394       1.18186820       8.49960752     1 #> 57       -1.78857002        11.570841       2.11335533       8.62574989     1 #> 58        0.37539322        10.681506       3.18813230       8.54522971     1 #> 59        2.40434956         9.838172       4.29677117       8.39986641     1 #> 60        4.38084237         9.002651       5.38351995       8.24412618     1 #> 61        6.22480419         8.236254       6.63740982       7.92306794     1 #> 62        7.62209251         7.781946       8.31576676       7.25313543     1 #> 63        8.86301987         7.424645      10.09412593       6.48634034     1 #> 64       10.08916724         7.055226      11.83316657       5.73378922     1 #> 65       11.37647454         6.629150      13.49605061       5.03688672     1 #> 66       12.70522522         6.162770      15.13804624       4.34343917     1 #> 67       -4.51826584        13.614692       0.52656008       9.77538479     1 #> 68       -2.37196582        12.772470       1.54668841       9.81049647     1 #> 69       -0.27367034        11.927646       2.66311287       9.69809302     1 #> 70        1.72081072        11.114710       3.83307414       9.50494061     1 #> 71        3.62692611        10.335069       4.98728869       9.30439328     1 #> 72        5.36851751         9.648572       6.35379007       8.89829465     1 #> 73        6.87568282         9.114244       7.90214149       8.33145622     1 #> 74        8.24074892         8.667939       9.61897810       7.60634015     1 #> 75        9.52753199         8.255524      11.24718212       6.95206954     1 #> 76       10.86470608         7.797405      12.86736104       6.29384352     1 #> 77       12.26566312         7.292927      14.44032847       5.67443666     1 #> 78       -5.14473698        14.819200      -0.08952020      10.99779213     1 #> 79       -3.08549301        14.028508       1.12183480      10.81730388     1 #> 80       -1.05268058        13.232456       2.22842923      10.74321113     1 #> 81        0.91082383        12.453333       3.36932675      10.60000647     1 #> 82        2.72931497        11.739938       4.66287109      10.28074962     1 #> 83        4.50426107        11.044904       6.08094967       9.83416257     1 #> 84        6.08125992        10.464724       7.59814658       9.29006837     1 #> 85        7.53631435         9.954764       9.15034088       8.70871409     1 #> 86        8.97253119         9.449956      10.77048970       8.04781655     1 #> 87       10.38070200         8.950655      12.29343044       7.48473639     1 #> 88       11.80203109         8.432230      13.82942501       6.89785552     1 #> 89       -5.77296372        16.016146      -0.61817302      12.09234637     1 #> 90       -3.78388107        15.265429       0.60558742      11.91218890     1 #> 91       -1.81792437        14.513570       1.73395650      11.83665476     1 #> 92        0.13410112        13.756085       2.95635494      11.62349305     1 #> 93        1.96185158        13.048556       4.28390457      11.28125666     1 #> 94        3.71620622        12.373806       5.72355317      10.81430780     1 #> 95        5.33527866        11.769574       7.16574091      10.34455660     1 #> 96        6.83779998        11.226012       8.70241600       9.76798824     1 #> 97        8.32248676        10.687093      10.21030645       9.21886721     1 #> 98        9.83548361        10.129312      11.71091321       8.67230225     1 #> 99       11.34727451         9.565370      13.20394386       8.12642296     1 #> 100      -6.48020889        17.228308      -1.07664058      13.04944952     1 #> 101      -4.51127118        16.497579       0.04804698      13.04063093     1 #> 102      -2.45530321        15.724477       1.28704334      12.84359560     1 #> 103      -0.57348185        15.008512       2.52710641      12.63265763     1 #> 104       1.28541165        14.295838       3.85794602      12.29842803     1 #> 105       2.98932507        13.650996       5.25796679      11.87766918     1 #> 106       4.63498241        13.033408       6.68779368      11.42031837     1 #> 107       6.25132396        12.429555       8.13481575      10.94096231     1 #> 108       7.75156071        11.876186       9.60288021      10.43217972     1 #> 109       9.32653188        11.285957      11.05730038       9.93669777     1 #> 110      10.93083581        10.680953      12.49432054       9.46014987     1 #> 111      -7.15620565        18.411455      -1.67199511      14.17523290     1 #> 112      -5.01417744        17.638625      -0.50171595      14.12873735     1 #> 113      -3.12123254        16.933150       0.73467019      13.95621854     1 #> 114      -1.20070839        16.212268       2.01881439      13.70266379     1 #> 115       0.63161433        15.519221       3.34532251      13.38431693     1 #> 116       2.33674429        14.876091       4.71049654      13.01107556     1 #> 117       4.00670950        14.247466       6.13441009      12.55678367     1 #> 118       5.65402610        13.628046       7.52308385      12.15110894     1 #> 119       7.26366938        13.022725       8.91619287      11.73906038     1 #> 120       8.85282780        12.421571      10.36300883      11.24584254     1 #> 121      10.52458082        11.789202      11.74642801      10.84520986     1 #>     group  id linewidth linetype alpha   fill  colour #> 1      -1   1       0.5        1     1 grey80 #3366FF #> 2      -1   2       0.5        1     1 grey80 #3366FF #> 3      -1   3       0.5        1     1 grey80 #3366FF #> 4      -1   4       0.5        1     1 grey80 #3366FF #> 5      -1   5       0.5        1     1 grey80 #3366FF #> 6      -1   6       0.5        1     1 grey80 #3366FF #> 7      -1   7       0.5        1     1 grey80 #3366FF #> 8      -1   8       0.5        1     1 grey80 #3366FF #> 9      -1   9       0.5        1     1 grey80 #3366FF #> 10     -1  10       0.5        1     1 grey80 #3366FF #> 11     -1  11       0.5        1     1 grey80 #3366FF #> 12     -1  12       0.5        1     1 grey80 #3366FF #> 13     -1  13       0.5        1     1 grey80 #3366FF #> 14     -1  14       0.5        1     1 grey80 #3366FF #> 15     -1  15       0.5        1     1 grey80 #3366FF #> 16     -1  16       0.5        1     1 grey80 #3366FF #> 17     -1  17       0.5        1     1 grey80 #3366FF #> 18     -1  18       0.5        1     1 grey80 #3366FF #> 19     -1  19       0.5        1     1 grey80 #3366FF #> 20     -1  20       0.5        1     1 grey80 #3366FF #> 21     -1  21       0.5        1     1 grey80 #3366FF #> 22     -1  22       0.5        1     1 grey80 #3366FF #> 23     -1  23       0.5        1     1 grey80 #3366FF #> 24     -1  24       0.5        1     1 grey80 #3366FF #> 25     -1  25       0.5        1     1 grey80 #3366FF #> 26     -1  26       0.5        1     1 grey80 #3366FF #> 27     -1  27       0.5        1     1 grey80 #3366FF #> 28     -1  28       0.5        1     1 grey80 #3366FF #> 29     -1  29       0.5        1     1 grey80 #3366FF #> 30     -1  30       0.5        1     1 grey80 #3366FF #> 31     -1  31       0.5        1     1 grey80 #3366FF #> 32     -1  32       0.5        1     1 grey80 #3366FF #> 33     -1  33       0.5        1     1 grey80 #3366FF #> 34     -1  34       0.5        1     1 grey80 #3366FF #> 35     -1  35       0.5        1     1 grey80 #3366FF #> 36     -1  36       0.5        1     1 grey80 #3366FF #> 37     -1  37       0.5        1     1 grey80 #3366FF #> 38     -1  38       0.5        1     1 grey80 #3366FF #> 39     -1  39       0.5        1     1 grey80 #3366FF #> 40     -1  40       0.5        1     1 grey80 #3366FF #> 41     -1  41       0.5        1     1 grey80 #3366FF #> 42     -1  42       0.5        1     1 grey80 #3366FF #> 43     -1  43       0.5        1     1 grey80 #3366FF #> 44     -1  44       0.5        1     1 grey80 #3366FF #> 45     -1  45       0.5        1     1 grey80 #3366FF #> 46     -1  46       0.5        1     1 grey80 #3366FF #> 47     -1  47       0.5        1     1 grey80 #3366FF #> 48     -1  48       0.5        1     1 grey80 #3366FF #> 49     -1  49       0.5        1     1 grey80 #3366FF #> 50     -1  50       0.5        1     1 grey80 #3366FF #> 51     -1  51       0.5        1     1 grey80 #3366FF #> 52     -1  52       0.5        1     1 grey80 #3366FF #> 53     -1  53       0.5        1     1 grey80 #3366FF #> 54     -1  54       0.5        1     1 grey80 #3366FF #> 55     -1  55       0.5        1     1 grey80 #3366FF #> 56     -1  56       0.5        1     1 grey80 #3366FF #> 57     -1  57       0.5        1     1 grey80 #3366FF #> 58     -1  58       0.5        1     1 grey80 #3366FF #> 59     -1  59       0.5        1     1 grey80 #3366FF #> 60     -1  60       0.5        1     1 grey80 #3366FF #> 61     -1  61       0.5        1     1 grey80 #3366FF #> 62     -1  62       0.5        1     1 grey80 #3366FF #> 63     -1  63       0.5        1     1 grey80 #3366FF #> 64     -1  64       0.5        1     1 grey80 #3366FF #> 65     -1  65       0.5        1     1 grey80 #3366FF #> 66     -1  66       0.5        1     1 grey80 #3366FF #> 67     -1  67       0.5        1     1 grey80 #3366FF #> 68     -1  68       0.5        1     1 grey80 #3366FF #> 69     -1  69       0.5        1     1 grey80 #3366FF #> 70     -1  70       0.5        1     1 grey80 #3366FF #> 71     -1  71       0.5        1     1 grey80 #3366FF #> 72     -1  72       0.5        1     1 grey80 #3366FF #> 73     -1  73       0.5        1     1 grey80 #3366FF #> 74     -1  74       0.5        1     1 grey80 #3366FF #> 75     -1  75       0.5        1     1 grey80 #3366FF #> 76     -1  76       0.5        1     1 grey80 #3366FF #> 77     -1  77       0.5        1     1 grey80 #3366FF #> 78     -1  78       0.5        1     1 grey80 #3366FF #> 79     -1  79       0.5        1     1 grey80 #3366FF #> 80     -1  80       0.5        1     1 grey80 #3366FF #> 81     -1  81       0.5        1     1 grey80 #3366FF #> 82     -1  82       0.5        1     1 grey80 #3366FF #> 83     -1  83       0.5        1     1 grey80 #3366FF #> 84     -1  84       0.5        1     1 grey80 #3366FF #> 85     -1  85       0.5        1     1 grey80 #3366FF #> 86     -1  86       0.5        1     1 grey80 #3366FF #> 87     -1  87       0.5        1     1 grey80 #3366FF #> 88     -1  88       0.5        1     1 grey80 #3366FF #> 89     -1  89       0.5        1     1 grey80 #3366FF #> 90     -1  90       0.5        1     1 grey80 #3366FF #> 91     -1  91       0.5        1     1 grey80 #3366FF #> 92     -1  92       0.5        1     1 grey80 #3366FF #> 93     -1  93       0.5        1     1 grey80 #3366FF #> 94     -1  94       0.5        1     1 grey80 #3366FF #> 95     -1  95       0.5        1     1 grey80 #3366FF #> 96     -1  96       0.5        1     1 grey80 #3366FF #> 97     -1  97       0.5        1     1 grey80 #3366FF #> 98     -1  98       0.5        1     1 grey80 #3366FF #> 99     -1  99       0.5        1     1 grey80 #3366FF #> 100    -1 100       0.5        1     1 grey80 #3366FF #> 101    -1 101       0.5        1     1 grey80 #3366FF #> 102    -1 102       0.5        1     1 grey80 #3366FF #> 103    -1 103       0.5        1     1 grey80 #3366FF #> 104    -1 104       0.5        1     1 grey80 #3366FF #> 105    -1 105       0.5        1     1 grey80 #3366FF #> 106    -1 106       0.5        1     1 grey80 #3366FF #> 107    -1 107       0.5        1     1 grey80 #3366FF #> 108    -1 108       0.5        1     1 grey80 #3366FF #> 109    -1 109       0.5        1     1 grey80 #3366FF #> 110    -1 110       0.5        1     1 grey80 #3366FF #> 111    -1 111       0.5        1     1 grey80 #3366FF #> 112    -1 112       0.5        1     1 grey80 #3366FF #> 113    -1 113       0.5        1     1 grey80 #3366FF #> 114    -1 114       0.5        1     1 grey80 #3366FF #> 115    -1 115       0.5        1     1 grey80 #3366FF #> 116    -1 116       0.5        1     1 grey80 #3366FF #> 117    -1 117       0.5        1     1 grey80 #3366FF #> 118    -1 118       0.5        1     1 grey80 #3366FF #> 119    -1 119       0.5        1     1 grey80 #3366FF #> 120    -1 120       0.5        1     1 grey80 #3366FF #> 121    -1 121       0.5        1     1 grey80 #3366FF"},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Continuous Scale for Vector Length — scale_length_continuous","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous provides continuous scale controlling length aesthetic ggplot. particularly useful working vector plots vector lengths mapped continuous scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(...)"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"... arguments passed continuous_scale().","code":""}]
