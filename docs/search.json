[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dusty Turner. Author, maintainer. David Kahle. Author. Rodney X. Sturdivant. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Turner D, Kahle D, Sturdivant R (2024). ggvfields: Vector Field Visualizations ggplot2. R package version 0.0.0, https://github.com/dusty-turner/ggvfields.","code":"@Manual{,   title = {ggvfields: Vector Field Visualizations with ggplot2},   author = {Dusty Turner and David Kahle and Rodney X. Sturdivant},   year = {2024},   note = {R package version 0.0.0},   url = {https://github.com/dusty-turner/ggvfields}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Vector Field Visualizations with ggplot2","text":"ggvfields provides tools visualizing vector fields, stream plots, soon complex numbers .","code":"library(\"ggvfields\") #> Loading required package: ggplot2 options(ggplot2.continuous.colour=\"viridis\")"},{"path":[]},{"path":"/index.html","id":"geom_vector-visualizing-individual-vectors","dir":"","previous_headings":"Usage","what":"geom_vector(): Visualizing Individual Vectors","title":"Vector Field Visualizations with ggplot2","text":"geom_vector() designed visualize individual vectors, specified either Cartesian (dx, dy) polar (angle, distance) components. ’s especially useful directional data like wind patterns flow fields. default, length aesthetic mapped after_stat(norm), meaning vector length reflects magnitude. details section: New Feature: Mapping Norm Length Aesthetic.","code":""},{"path":"/index.html","id":"cartesian-example","dir":"","previous_headings":"Usage > geom_vector(): Visualizing Individual Vectors","what":"Cartesian Example","title":"Vector Field Visualizations with ggplot2","text":"","code":"set.seed(1234) n <- 10 wind_data_polar <- data.frame(   lon = rnorm(n),    lat = rnorm(n),    wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2) )  wind_data_cartesian <- within(wind_data_polar, {   wind_lon_comp <- wind_spd * cos(wind_dir)   wind_lat_comp <- wind_spd * sin(wind_dir)   dx <- wind_lon_comp   dy <- wind_lat_comp })  ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy))"},{"path":"/index.html","id":"polar-example","dir":"","previous_headings":"Usage > geom_vector(): Visualizing Individual Vectors","what":"Polar Example","title":"Vector Field Visualizations with ggplot2","text":"polar coordinates, vector defined angle distance:","code":"ggplot(wind_data_cartesian) +   geom_vector(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))"},{"path":"/index.html","id":"new-feature-mapping-norm-to-the-length-aesthetic","dir":"","previous_headings":"Usage","what":"New Feature: Mapping Norm to the Length Aesthetic","title":"Vector Field Visualizations with ggplot2","text":"One innovations ggvfields ability map norm vectors directly length using length aesthetic. feature allows intuitive representation vector magnitudes. length vector directly corresponds computed norm - making easy compare vector magnitudes visually within plot. Traditionally, vector fields represent direction magnitude arrows uniform length. leaves magnitude inferred color gradients external legends. ggvfields, length aesthetic allows users visually intuit vector magnitude simplifying interpretation. particularly important aspect feature vector lengths plot accurately reflected legend. allows viewers match visual representation length directly legend’s magnitude scale. frees color aesthetic use visualizing information vector field.","code":""},{"path":"/index.html","id":"why-use-the-length-aesthetic","dir":"","previous_headings":"Usage > New Feature: Mapping Norm to the Length Aesthetic","what":"Why Use the Length Aesthetic?","title":"Vector Field Visualizations with ggplot2","text":"Clearer Representation: Vectors larger norms appear longer, making magnitude comparison straightforward. Length-Consistent Legends: lengths vectors plot directly tied values shown legend, ensuring consistent accurate visual guide. Enhanced Visuals: Length variations add extra layer information plot, complementing existing aesthetics like color. Flexible Customization: Combine length mapping aesthetics color gradients transparency even richer visualizations.","code":""},{"path":"/index.html","id":"example-mapping-norm-to-length","dir":"","previous_headings":"Usage","what":"Example: Mapping Norm to Length","title":"Vector Field Visualizations with ggplot2","text":"mapping norm vector length aesthetic, users can directly observe differences vector magnitude based vector’s actual size. example, norm wind vectors mapped length:  disable feature, can map length = after_stat(NA).","code":"ggplot(wind_data_cartesian) +   geom_vector(     aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(norm)),     arrow = NULL, tail_point = TRUE   ) ggplot(wind_data_cartesian) +   geom_vector(     aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(NA))   )"},{"path":"/index.html","id":"geom_vector_field-visualizing-vector-fields","dir":"","previous_headings":"Usage","what":"geom_vector_field(): Visualizing Vector Fields","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_field() function creates vector field plot using user-defined function compute vector components. abstraction simplifies mathematical computations involved vector field visualizations. Users longer need manually calculate vector components geom_segment(). Two important options geom_vector_field() normalize center - default TRUE. options help control visual representation vectors: normalize: set TRUE, option scales vector unit length, can help avoid overplotting dense vector fields. especially useful direction vectors important magnitude. However, ’s important note normalize different mapping norm vector length aesthetic. normalization ensures vectors visually uniform length, mapping norm length preserves relative differences magnitude varying vector lengths based actual norms. center: default, center also set TRUE, meaning midpoint vector placed corresponding (x, y) coordinate, effectively “centering” vector point. center FALSE, base vector anchored (x, y) point, vector extends outward . useful vector field meant represent flow starting point, rather centered around . Additionally, geom_vector_field() defaults length = after_stat(norm), maps computed vector norms length aesthetic. means unless specified otherwise, vectors’ lengths automatically proportional calculated magnitudes. using options, can control whether vector lengths uniform reflect actual magnitudes, vectors positioned relative base coordinates, length aesthetic used plot.","code":""},{"path":"/index.html","id":"example-basic-vector-field-plot","dir":"","previous_headings":"Usage > geom_vector_field(): Visualizing Vector Fields","what":"Example: Basic Vector Field Plot","title":"Vector Field Visualizations with ggplot2","text":"function allows user map several characteristics vector field different aesthetic mappings.","code":"f <- function(v) {   x <- v[1]; y <- v[2]   c(-y, x) # = f(x,y) }  ggplot() +   geom_vector_field(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"norm","dir":"","previous_headings":"Usage","what":"Norm","title":"Vector Field Visualizations with ggplot2","text":"norm vector w = (u,v) given : $|\\mathbf{w}| = \\sqrt{u^2 + v^2}$ can visualize norm mapping length aesthetic:","code":"ggplot() +   geom_vector_field(     fun = f, xlim = c(-10, 10), ylim = c(-10, 10),     aes(length = after_stat(norm))   )"},{"path":"/index.html","id":"divergence","dir":"","previous_headings":"Usage","what":"Divergence","title":"Vector Field Visualizations with ggplot2","text":"Divergence operation vector field describes field behaves point—whether vectors “spread ” point “converge” toward . Locally, divergence vector field F ℝ2 particular point measures “outflowing-ness” rate expansion vector field around point. divergence scalar value can indicate sources (positive divergence) sinks (negative divergence). F = ⟨Fx(x,y), Fy(x,y)⟩ vector field, divergence defined : $$ \\text{div} \\, \\mathbf{F} = \\frac{\\partial F_x}{\\partial x} + \\frac{\\partial F_y}{\\partial y} $$ visualize divergence vector field, can map divergence color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(length = after_stat(norm), color = after_stat(divergence)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"curl","dir":"","previous_headings":"Usage","what":"Curl","title":"Vector Field Visualizations with ggplot2","text":"Curl measure rotation swirling behavior vector field given point. two dimensions, curl vector field F ℝ2 scalar value quantifies much vectors tend rotate circulate around point. Positive curl values indicate counterclockwise rotation, negative values represent clockwise rotation. F = ⟨Fx(x,y), Fy(x,y)⟩ vector field, curl defined : $$ \\text{curl} \\, \\mathbf{F} = \\frac{\\partial F_y}{\\partial x} - \\frac{\\partial F_x}{\\partial y} $$ visualize curl vector field, can map curl color aesthetic.","code":"ggplot() +   geom_vector_field(     aes(color = after_stat(curl)),      fun = f, xlim = c(-10, 10), ylim = c(-10, 10)   )"},{"path":"/index.html","id":"geom_streamplot","dir":"","previous_headings":"Usage","what":"geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"geom_streamplot() function generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.  chop parameter (defaulted TRUE) allows chop trajectories segments. can useful better visualization streamlines long complex. may useful break streamlines.  may also useful break streamlines segments. scale_stream parameter (defaults 1) adjusts segmentation streamlines specifying proportion streamline length used divide smaller segments.","code":"f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3)) ggplot() +   geom_streamplot(fun = f, xlim = c(-3, 3), ylim = c(-3, 3), chop = FALSE) ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     chop = TRUE, scale_stream = .9,   )"},{"path":"/index.html","id":"map-calculus-measures-to-aesthetics","dir":"","previous_headings":"Usage","what":"Map Calculus Measures to Aesthetics","title":"Vector Field Visualizations with ggplot2","text":"","code":"ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3),     aes(color = after_stat(log(divergence + abs(min(divergence)))))   ) +   labs(color = \"adjusted\\ndivergence\")"},{"path":"/index.html","id":"animate-geom_streamplot","dir":"","previous_headings":"Usage","what":"Animate geom_streamplot()","title":"Vector Field Visualizations with ggplot2","text":"","code":"# Create stream plot with rownum aesthetic p <- ggplot() +  geom_streamplot(    aes(rownum = after_stat(rownum)),      fun = f, xlim = c(-3, 3), ylim = c(-3, 3),  ) +  coord_fixed() +  theme_bw() # Create an animation transition plot anim <- animation_transition(plot = p) +     gganimate::transition_reveal(rownum) +  gganimate::ease_aes('linear')  # Animate the plot gganimate::animate(   anim, nframes = 25, fps = 5, end_pause = 0, renderer = gganimate::gifski_renderer()   )"},{"path":"/index.html","id":"geom_flow","dir":"","previous_headings":"Usage","what":"geom_flow()","title":"Vector Field Visualizations with ggplot2","text":"geom_flow() function generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field, visualizing trajectory particles time. flow line traces “marble” move vector field dropped specific starting point, making intuitive way visualize dynamic systems. default, color flow line corresponds time (t), meaning color transitions along path represent progression time. flow line evolves, shows particle move time following vector field. can change coloring mapping aesthetics computed measures needed, time remains default. Flows computed using deSolve package’s ODE solver, rk4 method (fourth-order Runge-Kutta method) used numerical integration. solver ensures accurate efficient computation flow lines, abstracting away complex calculations user.  example, flow lines evolve according vector field defined f. color along line show particle moves time (t) within vector field.","code":"ggplot() +   geom_flow(fun = f, xlim = c(-10, 10), ylim = c(-10, 10))"},{"path":"/index.html","id":"adaptive-parameters","dir":"","previous_headings":"Usage > geom_flow()","what":"Adaptive Parameters","title":"Vector Field Visualizations with ggplot2","text":"Several parameters geom_flow() adaptive, meaning adjust automatically based characteristics vector field plot limits. adaptive parameters help optimize flow visualization without requiring manual tuning: threshold_distance: parameter controls minimum distance adjacent flow lines prevent overlapping. specified, calculated automatically half Euclidean distance adjacent grid points. ensures plot remains uncluttered, flow lines spaced appropriately based grid dimensions (n) axis limits (xlim, ylim). T: parameter represents total time span ODE solver trace flow paths. T NULL, automatically computed starting center plot estimating long take particle travel center farthest boundary vector field - assuming vector field cyclic reach sync. ensures trajectories capture significant dynamics vector field without extending unnecessarily. iterations: parameter defines number time steps ODE solver use tracing flow lines. higher number iterations results smoother detailed flows. iterations left NULL, computed adaptively based value T, ensuring longer time spans result iterations smoother paths. adaptive parameters allow geom_flow() create well-balanced plot dynamically adjusting precision spacing flow lines, based underlying vector field plot limits.","code":""},{"path":"/index.html","id":"example-with-custom-parameters","dir":"","previous_headings":"Usage > geom_flow()","what":"Example with Custom Parameters","title":"Vector Field Visualizations with ggplot2","text":"example customize grid size, time span (T), number iterations, threshold distance flow lines:","code":"ggplot() +   geom_flow(     fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 1000, threshold_distance = 0.5, T = 5   )  #> Warning in geom_flow(fun = f, n = c(21, 21), xlim = c(-10, 10), ylim = c(-10, : #> Ignoring unknown parameters: `T`"},{"path":[]},{"path":"/index.html","id":"geom_vector_smooth","dir":"","previous_headings":"In Development","what":"geom_vector_smooth()","title":"Vector Field Visualizations with ggplot2","text":"geom_vector_smooth() function designed provide smoothed estimate vector field based observed vector components. Just geom_smooth() fits regression line data points, geom_vector_smooth() fits smooth vector field individual vector observations. applying statistical smoothing techniques vector components (dx, dy) create smooth representation direction magnitude transitions across field.","code":""},{"path":"/index.html","id":"example-usage","dir":"","previous_headings":"In Development > geom_vector_smooth()","what":"Example Usage","title":"Vector Field Visualizations with ggplot2","text":"function also works polar coordinates method = \"boot\".  example demonstrates geom_vector_smooth() can used fit vector field vector data.","code":"# Create a function to generate random vectors based on (x, y) inputs generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2)   }  # Set seed for reproducibility set.seed(123)  # Generate sample points for the vector field sample_points <- data.frame(   x = runif(50, min = -10, max = 10),     y = runif(50, min = -10, max = 10)    )  # Apply the generate_vectors function to each row to create displacements result <- t(apply(sample_points, 1, generate_vectors))  # Create new columns for the end coordinates (xend, yend) sample_points$xend <- result[, 1] sample_points$yend <- result[, 2]  # Calculate the displacements (dx, dy) sample_points$dx <- sample_points$xend - sample_points$x sample_points$dy <- sample_points$yend - sample_points$y  # Visualize the original and smoothed vectors using `ggplot2` from ggvfields ggplot(sample_points, aes(x = x, y = y)) +   geom_vector_smooth(aes(dx = dx, dy = dy),                       n = 6, center = FALSE, probs = c(.95, .68), method = \"lm\"                      ) +    geom_vector(aes(dx = dx, dy = dy)) +     coord_equal() # Calculate polar coordinates: angle and distance sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2) sample_points$angle <- atan2(sample_points$dy, sample_points$dx)  # Visualize the vector field with smoothing in polar coordinates ggplot(sample_points, aes(x = x, y = y)) +   geom_vector_smooth(aes(angle = angle, distance = distance),                      n = 6, center = FALSE, probs = c(.95), method = \"boot\"                      ) +   geom_vector(aes(dx = dx, dy = dy)) +     coord_fixed()"},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vector Field Visualizations with ggplot2","text":"ggvfields yet CRAN. can install ","code":"remotes::install_github(\"dusty-turner/ggvfields\")"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Vector Field Visualizations with ggplot2","text":"package licensed MIT License.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Vector Field Visualizations with ggplot2","text":"questions issues, please open issue GitHub contact maintainer.","code":""},{"path":"/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related projects","title":"Vector Field Visualizations with ggplot2","text":"creating vector fields, ggquiver package provides quiver plots visualize vector fields, ggarchery package can handling segments arrowheads.","code":""},{"path":"/reference/animation_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Transition a streamplot to an animation ready object — animation_transition","title":"Transition a streamplot to an animation ready object — animation_transition","text":"animation_transition() takes streamline plot alters work gganimate syntax.","code":""},{"path":"/reference/animation_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"animation_transition(plot)"},{"path":"/reference/animation_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transition a streamplot to an animation ready object — animation_transition","text":"plot ggplot object data plot attributes extracted create animation transition.","code":""},{"path":"/reference/animation_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transition a streamplot to an animation ready object — animation_transition","text":"ggplot object animation transition effect applied.","code":""},{"path":"/reference/animation_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transition a streamplot to an animation ready object — animation_transition","text":"","code":"if (FALSE) { library(ggplot2) library(ggvfields) library(gganimate)  # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the stream plot layer p <- ggplot() +   geom_streamplot(     aes(rownum = after_stat(rownum)),     fun = f, xlim = c(-3, 3), ylim = c(-3, 3)   ) +   coord_fixed() +   theme_bw()  # Create an animation transition plot anim <- animation_transition(plot = p) +   transition_reveal(rownum) +   ease_aes('linear')  # Animate the plot anim <- animate(anim, nframes = 25, fps = 20, end_pause = 0, renderer = gifski_renderer()) }"},{"path":"/reference/geom_complex_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Complex Vector Field Geom Layer — geom_complex_function","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"geom_complex_function() generates raster plot layer user-defined complex function. hue color corresponds argument (angle) complex number resulting function, indicating direction vector. lightness color reflects magnitude vector, providing visual representation direction intensity.","code":""},{"path":"/reference/geom_complex_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"fun user-defined function takes complex number input returns complex number. relim numeric vector length 2 giving real-axis limits. imlim numeric vector length 2 giving imaginary-axis limits. n integer specifying number grid points along axis.","code":""},{"path":"/reference/geom_complex_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"ggplot2 layer can added ggplot object produce vector field plot.","code":""},{"path":"/reference/geom_complex_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Complex Vector Field Geom Layer — geom_complex_function","text":"","code":"#library(ggplot2) # Example user-defined function f <- function(z) (z^2 + 1) / (z^2 - 1)  # Create a ggplot with the vector field layer #ggplot() +  # geom_complex_function(fun = f, relim = c(-2, 2), imlim = c(-2, 2), n = 100) +  # labs(x = \"Real\", y = \"Imaginary\")"},{"path":"/reference/geom_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Flow Plot Geom Layer — geom_flow","title":"Create a Flow Plot Geom Layer — geom_flow","text":"geom_flow() generates flow plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"geom_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_flow(   mapping = NULL,   data = NULL,   stat = \"flow\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   iterations = 100,   threshold_distance = 0.5,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Flow Plot Geom Layer — geom_flow","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length, representing vector field. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions starting points flows. iterations numeric value specifying number time steps ODE solver used flow generation. determines granularity flow paths; higher values result smoother, detailed flows. threshold_distance numeric value specifying minimum distance flows avoid overlap. provided, defaults half Euclidean distance adjacent grid points. arrow Arrow specification, created grid::arrow(), adding arrows flows. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Flow Plot Geom Layer — geom_flow","text":"ggplot2 layer can added ggplot object produce flow plot.","code":""},{"path":"/reference/geom_flow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Flow Plot Geom Layer — geom_flow","text":"flows computed using deSolve package's ODE solver. rk4 method (fourth-order Runge-Kutta method) used default numerical integration flows.","code":""},{"path":"/reference/geom_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Flow Plot Geom Layer — geom_flow","text":"","code":"library(ggplot2) # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) }  # Create a ggplot with the flow plot layer ggplot() +   geom_flow(     fun = f, n = c(11, 11),     xlim = c(-10, 10), ylim = c(-10, 10),     iterations = 100, threshold_distance = 0,     arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\")   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_streamplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Stream Plot Geom Layer — geom_streamplot","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"geom_streamplot() generates stream plot layer user-defined vector field function. lines plot represent flow data points vector field.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"geom_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )  stat_streamplot(   mapping = NULL,   data = NULL,   stat = \"streamplot\",   position = \"identity\",   na.rm = FALSE,   show.legend = TRUE,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = c(21, 21),   mask_shape_type = \"square\",   iterations = 100,   stream_density = 1,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   chop = TRUE,   scale_stream = 1,   ... )"},{"path":"/reference/geom_streamplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes numeric vector input returns numeric vector length. xlim numeric vector length 2 giving x-axis limits. ylim numeric vector length 2 giving y-axis limits. n numeric vector length 2 specifying grid dimensions. mask_shape_type character string specifying mask shape type: \"square\", \"diamond\", \"inset_square\", \"circle\". iterations integer specifying number steps perform numerical integration flow. stream_density numeric value controls density streamlines. Higher values produce streamlines. Default 1. arrow Arrow specification, created grid::arrow(). chop logical value indicating whether chop trajectories segments. scale_stream numeric value specifying maximum allowable segment size fraction total range chopping trajectories. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/geom_streamplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"ggplot2 layer can added ggplot object produce stream plot.","code":""},{"path":"/reference/geom_streamplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Stream Plot Geom Layer — geom_streamplot","text":"","code":"library(ggplot2) # Example user-defined function f <- function(v) {   x <- v[1]   y <- v[2]   c(-1 - x^2 + y, 1 + x - y^2) } ggplot() +   geom_streamplot(     fun = f, xlim = c(-3, 3), ylim = c(-3, 3), n = c(15, 15),     iterations = 100, chop = TRUE, scale_stream = 1,     mask_shape_type = \"square\"   ) +   coord_fixed() +   theme_minimal()"},{"path":"/reference/geom_vector.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Plot Layer — geom_vector","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector generates ggplot layer visualizes vectors line segments optional arrowheads. Vectors defined start (x, y) directional components (dx, dy), indicate change position. Alternatively, vectors can defined angular (angle) distance (distance) information.","code":""},{"path":"/reference/geom_vector.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"geom_vector(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2,   fun = NULL )  stat_vector(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   arrow = grid::arrow(angle = 25, length = unit(0.025, \"npc\"), type = \"closed\"),   inherit.aes = TRUE,   center = TRUE,   normalize = TRUE,   tail_point = FALSE,   tail_point.size = 2 )  StatVector  GeomVector"},{"path":"/reference/geom_vector.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Vector Plot Layer — geom_vector","text":"object class StatVector (inherits Stat, ggproto, gg) length 4. object class GeomVector (inherits Geom, ggproto, gg) length 6.","code":""},{"path":"/reference/geom_vector.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Plot Layer — geom_vector","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. arrow Arrow specification vector arrowheads, created grid::arrow(). Controls appearance arrowheads, including angle, length, type. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). center Logical; TRUE, centers vector specified (x, y) location. FALSE, vector starts specified (x, y) point. centering enabled, vector's midpoint aligns original (x, y) location. normalize Logical; TRUE, normalizes vector unit length applying scaling. prevents overplotting ensures consistent visual presentation dense plots. tail_point Logical; TRUE, adds point mark tail vector. tail_point.size Integer; sets size tail point tail_point = TRUE. fun function applied vector data additional transformations needed. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Plot Layer — geom_vector","text":"ggplot2 layer can added ggplot object produce vector plot.","code":""},{"path":"/reference/geom_vector.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Vector Plot Layer — geom_vector","text":"geom_vector understands following aesthetics (required aesthetics bold): x: x-coordinate start point vector. y: y-coordinate start point vector. dx: Change x-direction (length component along x-axis). dy: Change y-direction (length component along y-axis). angle: angle vector degrees (optional, used distance). distance: magnitude vector (optional, used angle). length: Length vector (default: after_stat(NA)). can also manually scale vector length using aes(length = after_stat(norm)). Alternatively, use geom_vector2() map vector magnitude (norm) length automatically. color: default, color = after_stat(norm) reflect vector magnitude. fill: Fill color arrowheads points. linewidth: Thickness vector line. linetype: Type line (solid, dashed, etc.). alpha: Transparency level vector. arrow: Arrowhead specification vector.","code":""},{"path":"/reference/geom_vector.html","id":"key-notes","dir":"Reference","previous_headings":"","what":"Key Notes","title":"Create a Vector Plot Layer — geom_vector","text":"Default Color Mapping: default behavior maps vector's magnitude (norm) color aesthetic. ensures vector strength visually emphasized color. override behavior, can set aes(color = \"black\") another fixed color. Scaling Length: default, vector length scaled (length = after_stat(NA)). can manually enable length scaling using aes(length = after_stat(norm)). Alternatively, use geom_vector2() function automatic length scaling based magnitude.","code":""},{"path":"/reference/geom_vector.html","id":"computed-variables","dir":"Reference","previous_headings":"","what":"Computed Variables","title":"Create a Vector Plot Layer — geom_vector","text":"norm magnitude vector, calculated \\(\\|\\mathbf{v}\\| = \\sqrt{dx^2 + dy^2}\\).","code":""},{"path":[]},{"path":"/reference/geom_vector.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Plot Layer — geom_vector","text":"","code":"set.seed(1234) n <- 10 wind_data <- data.frame(   lon = rnorm(n),   lat = rnorm(n),   wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2),   dx = rchisq(n, df = 2) * cos(runif(n, -pi, pi)),   dy = rchisq(n, df = 2) * sin(runif(n, -pi, pi)) )  ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy))   # Example using Polar coordinates: angle and distance ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))   # To scale vector length by magnitude, use geom_vector2(): ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, dx = dx, dy = dy))   # Or manually set length mapping with after_stat(): ggplot(wind_data) +   geom_vector(aes(x = lon, y = lat, dx = dx, dy = dy, length = after_stat(norm)))"},{"path":"/reference/geom_vector2.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"geom_vector2 stat_vector2 extensions geom_vector stat_vector. functions provide identical functionality change default behavior map vector norm (magnitude) length aesthetic instead color.","code":""},{"path":"/reference/geom_vector2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"","code":"geom_vector2(   mapping = NULL,   data = NULL,   stat = StatVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   tail_point = TRUE,   arrow = NULL )  stat_vector2(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   center = FALSE,   tail_point = TRUE,   arrow = NULL )"},{"path":"/reference/geom_vector2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"mapping Aesthetic mappings created aes() aes_(). functions ensure length = after_stat(norm) mapped default, color set NULL unless otherwise specified. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed geom_vector() stat_vector(). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). center Logical; TRUE, centers vector specified (x, y) location. Default FALSE, meaning vector starts specified (x, y) point. tail_point Logical; TRUE, adds point mark tail vector. Default TRUE geom_vector2, providing small marker tail. arrow Arrow specification vector arrowheads, created grid::arrow(). Controls appearance arrowheads, including angle, length, type. Default NULL. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation.","code":""},{"path":"/reference/geom_vector2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"ggplot2 layer can added ggplot object.","code":""},{"path":"/reference/geom_vector2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"useful want vector's magnitude visually emphasized length rather color. functions also disable default color mapping, setting vectors black unless otherwise specified. default, geom_vector2 stat_vector2 length = after_stat(norm) mapped, color set NULL, tail_point set TRUE, adds small marker tail vector. Additionally, center set FALSE, meaning vectors start specified (x, y) coordinates rather centering . arrow parameter set NULL default, allowing users specify custom arrow types desired.","code":""},{"path":[]},{"path":"/reference/geom_vector2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Plot Layer with Norm Mapped to Length — geom_vector2","text":"","code":"set.seed(1234) n <- 10 wind_data <- data.frame(   lon = rnorm(n),   lat = rnorm(n),   wind_dir = runif(n, -pi, pi),   wind_spd = rchisq(n, df = 2),   dx = rchisq(n, df = 2) * cos(runif(n, -pi, pi)),   dy = rchisq(n, df = 2) * sin(runif(n, -pi, pi)) )  ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, dx = dx, dy = dy))   # Example with Polar Coordinates ggplot(wind_data) +   geom_vector2(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd))"},{"path":"/reference/geom_vector_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer — geom_vector_field","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"geom_vector_field generates vector field plot layer using user-defined function compute vector displacements (dx, dy) grid point. function automatically generates grid points (specified xlim ylim) evaluates vector displacements points.","code":""},{"path":"/reference/geom_vector_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"geom_vector_field(   mapping = NULL,   data = NULL,   stat = StatVector,   geom = GeomVector,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = 16,   center = TRUE,   normalize = TRUE,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )  stat_vector_field(   mapping = NULL,   data = NULL,   geom = GeomVector,   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   fun,   xlim = c(-10, 10),   ylim = c(-10, 10),   n = 16,   center = TRUE,   normalize = TRUE,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   ... )"},{"path":"/reference/geom_vector_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). fun user-defined function takes vector (x, y) returns vector (dx, dy), representing displacements point vector field. xlim, ylim Numeric vectors length 2 specifying x/y-axis limits grid. n Integer specifying number grid points along axis (resolution grid). center Logical; TRUE, centers vectors respective grid points. normalize Logical; TRUE, normalizes vectors unit length. Set FALSE view original lengths vectors. arrow Arrow specification, created grid::arrow(), add arrowheads vectors. ... arguments passed layer(), aesthetic mappings.","code":""},{"path":"/reference/geom_vector_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"ggplot2 layer can added ggplot object create vector field plot. following mathematical measures available:","code":""},{"path":"/reference/geom_vector_field.html","id":"curl","dir":"Reference","previous_headings":"","what":"Curl","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"curl represents rotation \"twisting\" vectors around point: $$\\text{curl}(\\mathbf{f})(x, y) = \\frac{\\partial f_2}{\\partial x} - \\frac{\\partial f_1}{\\partial y}$$","code":""},{"path":"/reference/geom_vector_field.html","id":"divergence","dir":"Reference","previous_headings":"","what":"Divergence","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"divergence measures rate vectors \"spread \" point: $$\\text{div}(\\mathbf{f})(x, y) = \\frac{\\partial f_1}{\\partial x} + \\frac{\\partial f_2}{\\partial y}$$","code":""},{"path":"/reference/geom_vector_field.html","id":"norm","dir":"Reference","previous_headings":"","what":"Norm","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"norm (magnitude) vector: $$\\|\\mathbf{f}(x, y)\\| = \\sqrt{dx^2 + dy^2}$$","code":""},{"path":"/reference/geom_vector_field.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"user must provide function takes vector (x, y) returns displacements (dx, dy) point vector field. Optionally, layer can compute divergence, curl, vector norm, can mapped aesthetics using after_stat(). Default Behavior: magnitude vector (norm) mapped color aesthetic default. Vector lengths scaled 90% grid spacing. Vectors normalized unit length scaling grid spacing. see original lengths vectors, set normalize = FALSE. Arrowheads included default indicate direction.","code":""},{"path":"/reference/geom_vector_field.html","id":"aesthetic-mappings","dir":"Reference","previous_headings":"","what":"Aesthetic mappings","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"can map following measures using after_stat(): norm: Magnitude (norm) vector point. divergence: Divergence vector field point. curl: Curl vector field point. example, map curl color:","code":"aes(color = after_stat(curl))"},{"path":"/reference/geom_vector_field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer — geom_vector_field","text":"","code":"# Example user-defined vector field function f <- function(v) {   x <- v[1]; y <- v[2]   c(x + y, y - x)  # Return displacements (dx, dy) }  # Create a ggplot with the vector field layer ggplot() +   geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20)   # Example of mapping norm to length ggplot() +   geom_vector_field(     aes(length = after_stat(norm)),     fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20,   )   # Example with both length and curl mapped ggplot() +   geom_vector_field(     fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20, normalize = FALSE,     mapping = aes(length = after_stat(norm), color = after_stat(curl))   )"},{"path":"/reference/geom_vector_field2.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"geom_vector_field2 stat_vector_field2 extensions geom_vector_field stat_vector_field, providing identical functionality different default aesthetics. functions particularly useful vector field visualizations vector length mapped vector's magnitude.","code":""},{"path":"/reference/geom_vector_field2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"","code":"geom_vector_field2(   mapping = NULL,   data = NULL,   stat = StatVector,   geom = GeomVector,   position = \"identity\",   center = FALSE,   tail_point = TRUE,   arrow = NULL,   ... )  stat_vector_field2(   mapping = NULL,   data = NULL,   geom = GeomVector,   center = center,   tail_point = tail_point,   position = \"identity\",   ... )"},{"path":"/reference/geom_vector_field2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"mapping Aesthetic mappings created aes() aes_(). functions ensure length = after_stat(norm) mapped default, color set \"black\" unless otherwise specified. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. center Logical; TRUE, centers vectors respective grid points. tail_point Logical; TRUE, adds small point tail vector help indicate starting point. arrow Arrow specification, created grid::arrow(), add arrowheads vectors. ... arguments passed geom_vector_field() stat_vector_field().","code":""},{"path":"/reference/geom_vector_field2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"ggplot2 layer can added ggplot object create vector field plot.","code":""},{"path":"/reference/geom_vector_field2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"Default Behavior: Length automatically mapped vector norm (length = after_stat(norm)), meaning vector magnitude emphasized length vector plot. Color set \"black\" default, ensuring uniform appearance across vectors. Users can override wish map another variable color. Additional Parameters: center set FALSE default, vectors start specified (x, y) coordinates. tail_point set TRUE, adding small point tail vector help indicate starting point. arrow set NULL, users can specify arrow using grid::arrow() add custom arrowheads.","code":""},{"path":[]},{"path":"/reference/geom_vector_field2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector Field Plot Layer with Length Mapped to Norm — geom_vector_field2","text":"","code":"# Example user-defined vector field function f <- function(v) {   x <- v[1]; y <- v[2]   c(x + y, y - x) }  # Create a vector field plot with geom_vector_field2 ggplot() +   geom_vector_field2(fun = f, xlim = c(-5, 5), ylim = c(-5, 5))"},{"path":"/reference/geom_vector_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Smooth Vector Plot Layer — geom_vector_smooth","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth generates ggplot layer visualizes smooth vector field taking raw vector data applying smoothing techniques estimate underlying vector field. similar concept geom_smooth() ggplot2 estimates smooth line, vector data instead scalar data.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"StatVectorSmooth  GeomVectorSmooth  stat_vector_smooth(   mapping = NULL,   data = NULL,   geom = \"vector_smooth\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   scale_factor = 1,   method = \"lm\",   se = TRUE,   se.circle = TRUE,   probs = c(0.95, NA),   default_formula = cbind(dx, dy) ~ x * y,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   eval_points = NULL,   ... )  geom_vector_smooth(   mapping = NULL,   data = NULL,   stat = \"vector_smooth\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   n = c(11, 11),   scale_factor = 1,   method = \"lm\",   se = TRUE,   se.circle = TRUE,   probs = c(0.95, NA),   default_formula = cbind(dx, dy) ~ x * y,   arrow = grid::arrow(angle = 20, length = unit(0.015, \"npc\"), type = \"closed\"),   eval_points = NULL,   ... )"},{"path":"/reference/geom_vector_smooth.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"object class StatVectorSmooth (inherits Stat, ggproto, gg) length 6. object class GeomVectorSmooth (inherits GeomSegment, Geom, ggproto, gg) length 8.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). n integer vector specifying number grid points along axis. scale_factor Numeric; scales length vectors given value. Useful ensuring consistent lengths visualization. method Character; specifies smoothing method used. Supported methods \"lm\" (linear modeling) \"boot\" (bootstrapping). \"boot\" generates smoother results calculating angles bootstrapping, prediction intervals determined using quantiles. se Logical; TRUE, plots confidence intervals around smoothed vectors. se.circle Logical; TRUE, draws circles around origin vectors represent radius confidence interval. useful visualizing variability se = TRUE. probs Numeric vector; specifies prediction interval levels plotted se = TRUE. Default probs = 0.95, users can specify multiple levels (e.g., probs = c(0.95, 0.68)). default_formula formula specifying model fit smoothing. Defaults cbind(dx, dy) ~ x * y. arrow Arrow specification, created grid::arrow(). controls appearance arrowheads end vectors, including properties like angle, length, type. eval_points Number points function evaluated smoothing. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"ggplot2 layer can added ggplot object produce smooth vector field plot.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"Mathematics Prediction Prediction Intervals: section explains methods computing predictions prediction intervals using x y coordinates.","code":""},{"path":"/reference/geom_vector_smooth.html","id":"linear-model-lm-method","dir":"Reference","previous_headings":"","what":"Linear Model (lm) Method","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"\"lm\" method fits multivariate linear regression predict vector displacements dx dy based x y. Model:   b_0, b_1, b_2, b_3 model coefficients. e residual error. Prediction: new grid point, predicted displacements :   X_i design matrix new grid point. beta vector estimated coefficients. Prediction Intervals: standard error prediction :   V covariance matrix coefficients. prediction interval confidence level (1 - alpha) :","code":"dx, dy = b_0 + b_1 * x + b_2 * y + b_3 * (x * y) + e Z_i = X_i * beta SE(Z_i) = sqrt(diag(X_i * V * t(X_i))) Z_i ± t_(alpha / 2) * SE(Z_i)"},{"path":"/reference/geom_vector_smooth.html","id":"bootstrapping-boot-method","dir":"Reference","previous_headings":"","what":"Bootstrapping (boot) Method","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"\"boot\" method uses resampling estimate angles displacements. Process: Resample original data replacement. Fit models sine cosine vector angle:     Use predicted sine cosine compute:   Prediction Intervals: Based quantiles bootstrapped angles:   Displacements: Using predicted angle theta distance d:","code":"sin(theta) = b_0 + b_1 * x + b_2 * y + e cos(theta) = b_0 + b_1 * x + b_2 * y + e theta = atan2(sin(theta), cos(theta)) Lower Bound = Q_(alpha / 2)(theta)  Upper Bound = Q_(1 - alpha / 2)(theta) dx = d * cos(theta), dy = d * sin(theta)"},{"path":"/reference/geom_vector_smooth.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"geom_vector_smooth understands following aesthetics (required aesthetics bold): x: x-coordinate starting point vector. y: y-coordinate starting point vector. dx: x-displacement vector. dy: y-displacement vector. angle: angle vector radians (optional, used distance). distance: magnitude vector (optional, used angle). color: color vector line. linewidth: thickness vector line. linetype: type vector line (solid, dashed, etc.). alpha: transparency level vector. arrow: Specification arrowheads end vector. Additionally, using smoothing: norm: computed variable representing magnitude smoothed vector, available via after_stat().","code":""},{"path":"/reference/geom_vector_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Smooth Vector Plot Layer — geom_vector_smooth","text":"","code":"library(ggvfields)  # Function to generate random vectors based on (x, y) inputs generate_vectors <- function(v) {   x <- v[1]   y <- v[2]   c(sin(x) + sin(y) + rnorm(1, 5, 3), sin(x) - sin(y) + rnorm(1, 5, 3)) }  # Set seed for reproducibility set.seed(123)  # Generate sample data sample_points <- data.frame(   x = runif(50, min = -10, max = 10),   y = runif(50, min = -10, max = 10) )  # Apply the generate_vectors function to each row result <- t(apply(sample_points, 1, generate_vectors))  # Create new columns for displacements (dx, dy) and polar coordinates sample_points$xend <- result[, 1] sample_points$yend <- result[, 2] sample_points$dx <- sample_points$xend - sample_points$x sample_points$dy <- sample_points$yend - sample_points$y sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2) sample_points$angle <- atan2(sample_points$dy, sample_points$dx)  # Example 1: Cartesian Coordinates with Linear Model (lm) ggplot(sample_points, aes(x = x, y = y)) +   geom_vector_smooth(aes(dx = dx, dy = dy), method = \"lm\", se = TRUE) +   geom_vector(aes(dx = dx, dy = dy), color = \"black\") +   ggtitle(\"Vector Smoothing with Linear Model (lm)\") #> ~cbind(dx, dy)x * y   # Example 2: Polar Coordinates with Bootstrapping (boot) ggplot(sample_points, aes(x = x, y = y, angle = angle, distance = distance)) +   geom_vector_smooth(method = \"boot\", se = TRUE, probs = c(0.95, 0.68)) +   geom_vector(aes(dx = dx, dy = dy), color = \"black\") +   ggtitle(\"Vector Smoothing with Bootstrapping (boot)\") #> Warning: Computation failed in `stat_vector_smooth()`. #> Caused by error in `$<-.data.frame`: #> ! replacement has 0 rows, data has 121"},{"path":"/reference/ggvfields.html","id":null,"dir":"Reference","previous_headings":"","what":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","title":"ggvfields: Vector Field Visualizations with ggplot2 — ggvfields","text":"ggplot2 extension visualizing vector fields two-dimensional space. Provides functions create vector field layers using user-defined vector field functions.","code":""},{"path":[]},{"path":"/reference/scale_length_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Continuous Scale for Vector Length — scale_length_continuous","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"scale_length_continuous provides continuous scale controlling length aesthetic ggplot. particularly useful working vector plots vector lengths mapped continuous scale.","code":""},{"path":"/reference/scale_length_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"","code":"scale_length_continuous(...)"},{"path":"/reference/scale_length_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Continuous Scale for Vector Length — scale_length_continuous","text":"... arguments passed continuous_scale().","code":""}]
