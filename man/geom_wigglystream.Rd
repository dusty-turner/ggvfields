% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_wiggly_stream.R
\docType{data}
\name{geom_wigglystream}
\alias{geom_wigglystream}
\alias{stat_wigglystream}
\alias{StatWigglyStream}
\alias{GeomWigglyStream}
\title{Add a Wiggly Stream Geom Layer}
\usage{
geom_wigglystream(
  mapping = NULL,
  data = NULL,
  stat = "wigglystream",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = TRUE,
  inherit.aes = TRUE,
  fun,
  xlim = c(-1, 1),
  ylim = c(-1, 1),
  n = 11,
  max_it = 1000,
  dt = 0.0025,
  L = NULL,
  center = FALSE,
  method = "rk4",
  arrow = grid::arrow(angle = 30, length = unit(0.02, "npc"), type = "closed")
)

stat_wigglystream(
  mapping = NULL,
  data = NULL,
  stat = "wigglystream",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = TRUE,
  inherit.aes = TRUE,
  fun,
  xlim = c(-1, 1),
  ylim = c(-1, 1),
  n = 11,
  max_it = 1000,
  dt = 0.0025,
  L = NULL,
  center = FALSE,
  method = "rk4",
  arrow = grid::arrow(angle = 30, length = unit(0.02, "npc"), type = "closed")
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Additional arguments passed on to the underlying \code{geom_path()}. These are often aesthetics, used to set aesthetic attributes to fixed values, such as \code{color = "red"} or \code{size = 1.5}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A function that defines the stream's dynamics. It should accept two arguments (\code{x} and \code{y}) and return a list with components \code{dx} and \code{dy}, representing the derivatives in the x and y directions, respectively.}

\item{xlim}{Numeric vector of length two. The x-axis limits for the stream computation. Default is \code{c(-1, 1)}.}

\item{ylim}{Numeric vector of length two. The y-axis limits for the stream computation. Default is \code{c(-1, 1)}.}

\item{n}{Integer. Number of initial stream points to generate across the grid. Default is \code{11}.}

\item{max_it}{Integer. Maximum number of iterations for the numerical integration. Controls how far each streamline is computed. Default is \code{1000}.}

\item{dt}{Numeric. Time step size for the numerical integration. Smaller values lead to more precise integrations but increase computation time. Default is \code{0.0025}.}

\item{L}{Numeric. Maximum arc length for each streamline. Determines how long each streamline can grow before stopping. Default is \code{1}.}

\item{center}{Logical. If \code{TRUE}, centers the streamlines around the midpoint of the initial grid. Useful for symmetric visualizations. Default is \code{FALSE}.}

\item{method}{Character. Integration method to use (e.g., \code{"rk4"} for Runge-Kutta 4). Determines the numerical solver's accuracy and stability. Default is \code{"rk4"}.}

\item{arrow}{A \code{grid::arrow} object specifying arrow properties for stream ends. Defaults to a closed arrow with a 30-degree angle and length of \code{0.02} npc units. Customize to change the appearance of stream arrows.}
}
\value{
A \code{ggplot2} layer object that can be added to a ggplot. It renders wiggly streamlines based on the provided data and parameters.
}
\description{
\code{geom_wigglystream()} creates a geom layer that visualizes stream-like data with wiggly paths. This is useful for representing flows, trajectories, or any data that benefits from a dynamic, flow-based visualization.
}
\details{
The \code{geom_wigglystream} function integrates seamlessly with \code{ggplot2}, allowing users to add dynamic and visually appealing streamlines to their plots. It leverages the \code{StatWigglyStream} for computing the stream data and \code{GeomWigglyStream} for rendering the paths with optional arrows indicating flow direction.

Users can customize the behavior and appearance of the streamlines through various parameters:
\itemize{
\item \strong{Stream Dynamics (\code{fun}):} Define how the stream evolves by specifying a function that calculates the derivatives at each point.
\item \strong{Integration Parameters (\code{dt}, \code{max_it}, \code{method}):} Control the numerical integration's precision and computational effort.
\item \strong{Visual Parameters (\code{color}, \code{size}, \code{arrow}):} Enhance the plot's aesthetics by adjusting colors, line widths, and arrow properties.
}

\strong{Example Use Cases:}
\itemize{
\item \strong{Fluid Flow Visualization:} Representing the flow of liquids or gases in a confined space.
\item \strong{Trajectory Mapping:} Showing the paths of moving objects or agents over time.
\item \strong{Gradient Fields:} Visualizing vector fields in mathematical or physical contexts.
}
}
\examples{

f <- efield_maker()
f <- function(u) c(-u[2], u[1])
ggplot() + geom_vector_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))
ggplot() + geom_wigglystream(fun = f, xlim = c(-2,2), ylim = c(-2,2), center = TRUE)
ggplot() +
  geom_vector_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +
  geom_wigglystream(fun = f, xlim = c(-2,2), ylim = c(-2,2), center = TRUE)

}
\seealso{
\itemize{
\item \verb{\code{\link{StatWigglyStream}}}: Statistical transformation used by \code{geom_wigglystream}.
\item \verb{\code{\link{GeomWigglyStream}}}: Geometric object responsible for rendering the streamlines.
\item \verb{\code{\link[ggplot2]{geom_path}}}: Base geom that \code{geom_wigglystream} builds upon.
}
}
\keyword{datasets}
