% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_gradient_field.R
\name{geom_gradient_field}
\alias{geom_gradient_field}
\alias{stat_gradient_field}
\alias{geom_gradient_field2}
\alias{stat_gradient_field2}
\title{Create a Gradient Field Plot Layer}
\usage{
geom_gradient_field(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  geom = "vector",
  ...,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = grid::arrow(angle = 25, length = unit(0.025, "npc"), type = "closed")
)

stat_gradient_field(
  mapping = NULL,
  data = NULL,
  geom = "vector",
  ...,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = grid::arrow(angle = 25, length = unit(0.025, "npc"), type = "closed")
)

geom_gradient_field2(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  geom = "vector",
  ...,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = NULL
)

stat_gradient_field2(
  mapping = NULL,
  data = NULL,
  geom = "vector",
  ...,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = NULL
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{...}{Other arguments passed to \code{geom_vector_field} or \code{geom_vector_field2}.}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A user-defined scalar function that takes a numeric vector \verb{(x, y)}
and returns a single numeric value, representing the scalar field.}

\item{xlim, ylim}{Numeric vectors of length 2 specifying the x/y-axis limits for
the grid.}

\item{n}{Integer specifying the number of grid points along each axis
(resolution of the grid).}

\item{center}{Logical; if \code{TRUE}, centers vectors on their grid points.}

\item{normalize}{Logical; if \code{TRUE}, normalizes vectors before scaling.}

\item{arrow}{Arrow specification created by \code{grid::arrow()}.}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to create a
gradient field plot. Both \code{geom_gradient_field} and \code{geom_gradient_field2} wrap their
respective \code{geom_vector_field} functions, inheriting their functionalities.
}
\description{
\code{geom_gradient_field} generates a vector field plot layer by computing the gradient
of a user-defined scalar function at each grid point. This function wraps
\code{geom_vector_field} and inherits its features and capabilities, while automatically
converting a scalar field into its gradient vector field for visualization.
}
\details{
\code{geom_gradient_field2} is an enhanced version of \code{geom_gradient_field} that
works in conjunction with \code{geom_vector_field2}. It includes additional features
and improvements for advanced use cases, providing more flexibility and customization.

The gradient is calculated using \code{numDeriv::grad()} at grid points defined by
the \code{xlim} and \code{ylim} parameters, with the grid resolution controlled by \code{n}.
The resulting vectors are scaled, normalized, and visualized as arrows on the plot.

\strong{Default Behavior}:
\itemize{
\item The \strong{magnitude of each gradient vector (\code{norm}) is mapped to the \code{color} aesthetic} by default.
\item \strong{Vectors are normalized to unit length} by default. Set \code{normalize = FALSE} to view
original vector lengths.
\item \strong{Arrowheads} are included by default to indicate direction.
}
}
\examples{

paraboloid_field <- function(v) {
  x <- v[1]
  y <- v[2]
  x^2 + y^2
}

saddle_field <- function(v) {
  x <- v[1]
  y <- v[2]
  x^3 - 3 * x * y^2
}

# Visualizing a paraboloid scalar field with geom_gradient_field
ggplot() +
  geom_gradient_field(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10))

# Visualizing a paraboloid scalar field with geom_gradient_field2
ggplot() +
  geom_gradient_field2(fun = paraboloid_field, xlim = c(-10, 10), ylim = c(-10, 10))

# Visualizing a saddle scalar field with geom_gradient_field
ggplot() +
  geom_gradient_field(fun = saddle_field, xlim = c(-10, 10), ylim = c(-10, 10))

# Visualizing a saddle scalar field with geom_gradient_field2
ggplot() +
  geom_gradient_field2(fun = saddle_field, xlim = c(-10, 10), ylim = c(-10, 10))


}
