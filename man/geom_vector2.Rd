% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_vector2.R
\name{geom_vector2}
\alias{geom_vector2}
\title{Create a Vector Plot Layer with Norm Mapped to Color}
\usage{
geom_vector2(
  mapping = NULL,
  data = NULL,
  stat = StatVector,
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{aes()} or \code{aes_()}.
This function ensures that \code{color = after_stat(norm)} is mapped by default.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Other arguments passed on to \code{geom_vector()}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to produce a vector plot
with \code{norm} mapped to \code{color}.
}
\description{
\code{geom_vector2} creates a ggplot2 layer that visualizes vectors as line segments with
optional arrowheads. By default, it maps the vector norm (magnitude) to the \code{color} aesthetic.
}
\details{
This function is a wrapper around \code{geom_vector()} and behaves identically, except for
the default aesthetic mapping of \code{color = after_stat(norm)}.
}
\examples{

# Example 1: Basic Cartesian Vector Plot with Magnitude Mapped to Color
set.seed(1234)
n <- 10
wind_data <- data.frame(
  lon = rnorm(n),                     # Longitude coordinates
  lat = rnorm(n),                     # Latitude coordinates
  wind_dir = runif(n, -pi, pi),       # Wind direction in radians
  wind_spd = rchisq(n, df = 2)        # Wind speed (magnitude)
)

# Add Cartesian components (dx, dy)
wind_data$dx <- wind_data$wind_spd * cos(wind_data$wind_dir)  # x-component
wind_data$dy <- wind_data$wind_spd * sin(wind_data$wind_dir)  # y-component

# Plot with geom_vector2 (color mapped to vector norm by default)
ggplot(wind_data) +
  geom_vector2(aes(x = lon, y = lat, dx = dx, dy = dy)) +
  scale_color_viridis_c() +
  theme_minimal() +
  labs(color = "Vector Magnitude")

# Example 2: Polar Coordinates with Angle and Distance
ggplot(wind_data) +
  geom_vector2(aes(x = lon, y = lat, angle = wind_dir, distance = wind_spd)) +
  scale_color_viridis_c() +
  theme_minimal() +
  labs(color = "Vector Magnitude")

# Example 3: Customizing Arrow Appearance
ggplot(wind_data) +
  geom_vector2(
    aes(x = lon, y = lat, dx = dx, dy = dy),
    arrow = grid::arrow(angle = 15, length = unit(0.02, "npc"), type = "closed")
  ) +
  scale_color_viridis_c() +
  theme_minimal() +
  labs(color = "Vector Magnitude")

# Example 4: Disabling Length Mapping and Using Custom Lengths
wind_data$length_custom <- runif(n, 0.5, 1.5)  # Custom lengths for each vector
ggplot(wind_data) +
  geom_vector2(
    aes(x = lon, y = lat, dx = dx, dy = dy, length = length_custom)
  ) +
  scale_color_viridis_c() +
  theme_minimal() +
  labs(color = "Vector Magnitude")

}
