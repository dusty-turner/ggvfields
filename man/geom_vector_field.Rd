% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_vector_field.R
\name{geom_vector_field}
\alias{geom_vector_field}
\alias{stat_vector_field}
\title{Create a Vector Field Plot Layer}
\usage{
geom_vector_field(
  mapping = NULL,
  data = NULL,
  stat = StatVector,
  geom = GeomVector,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = c(-10, 10),
  ylim = c(-10, 10),
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)

stat_vector_field(
  mapping = NULL,
  data = NULL,
  geom = GeomVector,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = c(-10, 10),
  ylim = c(-10, 10),
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)

geom_vector_field(
  mapping = NULL,
  data = NULL,
  stat = StatVector,
  geom = GeomVector,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = c(-10, 10),
  ylim = c(-10, 10),
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)

stat_vector_field(
  mapping = NULL,
  data = NULL,
  geom = GeomVector,
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = c(-10, 10),
  ylim = c(-10, 10),
  n = 16,
  center = TRUE,
  normalize = TRUE,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A user-defined function that takes a vector (x, y) and returns a vector (dx, dy),
representing the displacements at that point in the vector field.}

\item{xlim, ylim}{Numeric vectors of length 2 giving the x/y-axis limits for the grid.}

\item{n}{Integer specifying the number of grid points along each axis (resolution of the grid).}

\item{center}{Logical; if \code{TRUE}, centers the vectors on their respective grid points.}

\item{normalize}{Logical; if \code{TRUE}, normalizes the vectors to unit length.}

\item{arrow}{Arrow specification, as created by \code{grid::arrow()}, to add arrowheads to vectors.}

\item{...}{Other arguments passed to \code{layer()}, such as aesthetic mappings.}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to produce a
vector field plot. The layer includes optional calculations of:
\subsection{Curl}{

The curl of a vector field represents the rotation or "twisting" of the vectors around a point.

The formula for the curl is given by:

\deqn{\text{curl}(\mathbf{f})(x, y) = \frac{\partial f_2}{\partial x}(x, y) - \frac{\partial f_1}{\partial y}(x, y)}

where \eqn{\frac{\partial f_1}{\partial y}(x, y)} is the partial derivative of the first component with respect to \eqn{y}, and \eqn{\frac{\partial f_2}{\partial x}(x, y)} is the partial derivative of the second component with respect to \eqn{x}.
}

\subsection{Divergence}{

The divergence of a vector field measures the rate at which vectors are "spreading out" from a point.

\deqn{\text{div}(\mathbf{f})(x, y) = \frac{\partial f_1}{\partial x}(x, y) + \frac{\partial f_2}{\partial y}(x, y)}

where \eqn{\frac{\partial f_1}{\partial x}(x, y)} is the partial derivative of the first component with respect to \eqn{x}, and \eqn{\frac{\partial f_2}{\partial y}(x, y)} is the partial derivative of the second component with respect to \eqn{y}.
}

\subsection{Norm}{

The norm of a vector represents its magnitude (or length):

\deqn{\|\mathbf{f}(x, y)\| = \sqrt{dx^2 + dy^2}}

where \eqn{dx} and \eqn{dy} are the displacements in the x and y directions, respectively.
}

A \code{ggplot2} layer that can be added to a ggplot object to produce a
vector field plot. The layer includes optional calculations of:
\subsection{Curl}{

The curl of a vector field represents the rotation or "twisting" of the vectors around a point.

The formula for the curl is given by:

\deqn{\text{curl}(\mathbf{f})(x, y) = \frac{\partial f_2}{\partial x}(x, y) - \frac{\partial f_1}{\partial y}(x, y)}

where \eqn{\frac{\partial f_1}{\partial y}(x, y)} is the partial derivative of the first component with respect to \eqn{y}, and \eqn{\frac{\partial f_2}{\partial x}(x, y)} is the partial derivative of the second component with respect to \eqn{x}.
}

\subsection{Divergence}{

The divergence of a vector field measures the rate at which vectors are "spreading out" from a point.

\deqn{\text{div}(\mathbf{f})(x, y) = \frac{\partial f_1}{\partial x}(x, y) + \frac{\partial f_2}{\partial y}(x, y)}

where \eqn{\frac{\partial f_1}{\partial x}(x, y)} is the partial derivative of the first component with respect to \eqn{x}, and \eqn{\frac{\partial f_2}{\partial y}(x, y)} is the partial derivative of the second component with respect to \eqn{y}.
}

\subsection{Norm}{

The norm of a vector represents its magnitude (or length):

\deqn{\|\mathbf{f}(x, y)\| = \sqrt{dx^2 + dy^2}}

where \eqn{dx} and \eqn{dy} are the displacements in the x and y directions, respectively.
}
}
\description{
\code{geom_vector_field} generates a vector field plot layer using a
user-defined function to compute the vector displacements (\code{dx}, \code{dy}) at each grid
point. The function automatically generates a grid of points
(specified by \code{xlim} and \code{ylim}) and evaluates the vector field displacements
at those points.

\code{geom_vector_field} generates a vector field plot layer using a
user-defined function to compute the vector displacements (\code{dx}, \code{dy}) at each grid
point. The function automatically generates a grid of points
(specified by \code{xlim} and \code{ylim}) and evaluates the vector field displacements
at those points.
}
\details{
The user provides a function that takes a vector \verb{(x, y)} and returns the vector
\strong{displacements} \verb{(dx, dy)} at that point in the vector field. The layer automatically
computes calculus measures such as divergence, curl, and vector norm that can be mapped to
aesthetics using \code{after_stat()}.

The user provides a function that takes a vector \verb{(x, y)} and returns the vector
\strong{displacements} \verb{(dx, dy)} at that point in the vector field. The layer automatically
computes calculus measures such as divergence, curl, and vector norm that can be mapped to
aesthetics using \code{after_stat()}.
}
\section{Aesthetic mappings}{

The following aesthetics can be mapped using \code{after_stat()}:
\itemize{
\item \code{divergence}: Divergence of the vector field at each point.
\item \code{curl}: Curl of the vector field at each point.
\item \code{norm}: Norm (magnitude) of the vector at each point.
}

For example, to map \code{norm} to color, you can use:

\if{html}{\out{<div class="sourceCode">}}\preformatted{aes(color = after_stat(norm))
}\if{html}{\out{</div>}}


The following aesthetics can be mapped using \code{after_stat()}:
\itemize{
\item \code{divergence}: Divergence of the vector field at each point.
\item \code{curl}: Curl of the vector field at each point.
\item \code{norm}: Norm (magnitude) of the vector at each point.
}

For example, to map \code{norm} to color, you can use:

\if{html}{\out{<div class="sourceCode">}}\preformatted{aes(color = after_stat(norm))
}\if{html}{\out{</div>}}
}

\examples{

# Example user-defined vector field function
f <- function(v) {
  x <- v[1]; y <- v[2]
  c(x + y, y - x)  # Return displacements (dx, dy)
}

# Create a ggplot with the vector field layer
ggplot() +
  geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20)

# Example of mapping norm to length
ggplot() +
  geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5),
                    n = 20, normalize = FALSE,
                    aes(length = after_stat(norm),
                        color = after_stat(curl)))


# Example user-defined vector field function
f <- function(v) {
  x <- v[1]; y <- v[2]
  c(x + y, y - x)  # Return displacements (dx, dy)
}

# Create a ggplot with the vector field layer
ggplot() +
  geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5), n = 20)

# Example of mapping norm to length
ggplot() +
  geom_vector_field(fun = f, xlim = c(-5, 5), ylim = c(-5, 5),
                    n = 20, normalize = FALSE,
                    aes(length = after_stat(norm),
                        color = after_stat(curl)))

}
