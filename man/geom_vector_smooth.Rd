% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_vector_smooth.R
\docType{data}
\name{geom_vector_smooth}
\alias{geom_vector_smooth}
\alias{stat_vector_smooth}
\alias{StatVectorSmooth}
\alias{GeomVectorSmooth}
\title{Create a Smooth Vector Plot Layer}
\format{
An object of class \code{StatVectorSmooth} (inherits from \code{Stat}, \code{ggproto}, \code{gg}) of length 5.

An object of class \code{GeomVectorSmooth} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 6.
}
\usage{
stat_vector_smooth(
  mapping = NULL,
  data = NULL,
  geom = "vector_smooth",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  n = c(11, 11),
  method = "lm",
  se = TRUE,
  se.circle = TRUE,
  conf_level = c(0.95, NA),
  pi_type = "ellipse",
  formula = cbind(dx, dy) ~ x * y,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  eval_points = NULL
)

geom_vector_smooth(
  mapping = NULL,
  data = NULL,
  stat = "vector_smooth",
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  n = c(11, 11),
  method = "lm",
  se = TRUE,
  se.circle = TRUE,
  pi_type = "ellipse",
  conf_level = c(0.95, NA),
  formula = cbind(dx, dy) ~ x * y,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  eval_points = NULL
)

StatVectorSmooth

GeomVectorSmooth
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{n}{An integer vector specifying the number of grid points along each
axis for smoothing.}

\item{method}{Character; specifies the smoothing method to use. The only
supported method is \code{"lm"}, which fits a multivariate linear model to predict
the vector displacements \code{dx} and \code{dy} based on the coordinates \code{x} and \code{y}.}

\item{se}{Logical; if \code{TRUE}, confidence intervals are plotted around the
smoothed vectors.}

\item{se.circle}{Logical; if \code{TRUE}, circles are drawn around the origin of
the vectors to represent the radius of the confidence interval. This feature
is useful when \code{se = TRUE}.}

\item{conf_level}{Numeric vector; specifies the confidence levels for the
prediction intervals when \code{se = TRUE}. \strong{Default is \code{conf_level = 0.95}}.}

\item{pi_type}{Character; determines how prediction intervals are displayed
around the smoothed vectors. Two options are available:
\itemize{
\item \code{"wedge"}: Displays angular wedges that indicate uncertainty in both the
direction and magnitude of the vectors. Wedges show the range of possible
vector orientations and lengths.
\item \code{"ellipse"}: Uses ellipses to depict prediction intervals, reflecting
the covariance between the vector components (\code{dx} and \code{dy}). Ellipses
provide a visual representation of joint uncertainty in vector directions.
The default is \code{"wedge"}. If \code{pi_type} is set to \code{"ellipse"} and \code{eval_points}
is \code{NULL}, the function switches \code{pi_type} to \code{"wedge"} to ensure proper
interval representation.
}}

\item{formula}{A formula specifying the multivariate linear model used
for smoothing. The default formula is \code{cbind(dx, dy) ~ x * y}.}

\item{arrow}{Arrow specification created by \code{grid::arrow()}. This parameter
controls the appearance of arrowheads at the ends of vectors, including
angle, length, and type.}

\item{eval_points}{Data frame of evaluation points, or \code{NULL}. When provided,
it specifies the grid points where the smoothing model is evaluated. If
\code{NULL}, the function generates a grid based on \code{n}.}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to create a
smooth vector field plot.
}
\description{
\code{geom_vector_smooth} generates a ggplot layer that visualizes a smooth vector
field. It uses raw vector data and applies smoothing techniques to estimate
the underlying vector field. This functionality is similar to \code{geom_smooth()}
in ggplot2, but is designed specifically for vector data rather than scalar data.
}
\details{
\strong{Multivariate Linear Model}:

The \code{"lm"} method fits a multivariate linear model to predict vector displacements
\code{dx} and \code{dy} based on the input coordinates \code{x} and \code{y}. This model includes
interaction terms (\code{x * y}) to capture more complex relationships in the vector field.

\strong{Prediction Intervals}:

Two types of prediction intervals are supported:
\itemize{
\item \strong{Ellipse}: Ellipses are used to represent the covariance of predicted \code{dx}
and \code{dy} values. The size and orientation of the ellipses illustrate both
the uncertainty in vector magnitude and the correlation between vector components.
\item \strong{Wedge}: Wedges are angular sectors that indicate the range of possible
directions and lengths for the vectors. This type of prediction interval
provides an intuitive visualization of uncertainty in vector orientation.
}

The intervals are computed using the confidence level specified by the \code{conf_level}
parameter.
}
\section{Aesthetics}{

\code{geom_vector_smooth} supports the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}: The x-coordinate of the vector's starting point.
\item \strong{\code{y}}: The y-coordinate of the vector's starting point.
\item \strong{\code{dx}}: The vector's displacement along the x-axis.
\item \strong{\code{dy}}: The vector's displacement along the y-axis.
\item \code{color}: The color of the vector line.
\item \code{linewidth}: The thickness of the vector line.
\item \code{linetype}: The type of the vector line (e.g., solid or dashed).
\item \code{alpha}: The transparency level of the vector.
\item \code{arrow}: Specifies arrowheads for the vectors.
}
}

\examples{
# Function to generate vectors
generate_vectors <- function(v) {
  x <- v[1]
  y <- v[2]
  c(
    sin(x) + sin(y) + rnorm(1, 5, 1),
    sin(x) - sin(y) - rnorm(1, 5, 1)
  )
}

# Set seed for reproducibility
set.seed(123)

# Create sample points and compute vectors
sample_points <- data.frame(
  x = runif(30, 0, 10),
  y = runif(30, 0, 10)
)

result <- t(apply(sample_points, 1, generate_vectors))

sample_points$xend <- result[, 1]
sample_points$yend <- result[, 2]
sample_points$dx <- sample_points$xend - sample_points$x
sample_points$dy <- sample_points$yend - sample_points$y
sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2)
sample_points$angle <- atan2(sample_points$dy, sample_points$dx)

# Define evaluation points
eval_points <- data.frame(
  x = c(0, 7.5),
  y = c(10, 5)
)

# Example 1:
ggplot(sample_points, aes(x = x, y = y)) +
  geom_vector(aes(dx = dx, dy = dy, color = NULL), center = FALSE, alpha = 0.2) +
  geom_vector_smooth(aes(dx = dx, dy = dy), n = 5) +
  ggtitle("Smoothed Vector Field")

# Example 2: Ellipse with eval_points
ggplot(sample_points, aes(x = x, y = y)) +
  geom_vector(aes(dx = dx, dy = dy, color = NULL), center = FALSE, alpha = 0.2) +
  geom_vector_smooth(aes(dx = dx, dy = dy), eval_points = eval_points, conf_level = c(0.9)) +
  ggtitle("Smoothed Vector Field with Ellipse Intervals")

# Example 3: Wedge with eval_points
ggplot(sample_points, aes(x = x, y = y)) +
  geom_vector(aes(dx = dx, dy = dy, color = NULL), center = FALSE, alpha = 0.2) +
  geom_vector_smooth(aes(dx = dx, dy = dy), eval_points = eval_points, pi_type = "ellipse") +
  ggtitle("Smoothed Vector Field with Wedge Intervals")

}
\keyword{datasets}
