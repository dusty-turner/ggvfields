% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_vector_smooth.R
\docType{data}
\name{geom_vector_smooth}
\alias{geom_vector_smooth}
\alias{StatVectorSmooth}
\alias{GeomVectorSmooth}
\alias{stat_vector_smooth}
\title{Create a Smooth Vector Plot Layer}
\format{
An object of class \code{StatVectorSmooth} (inherits from \code{Stat}, \code{ggproto}, \code{gg}) of length 4.

An object of class \code{GeomVectorSmooth} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 5.
}
\usage{
StatVectorSmooth

GeomVectorSmooth

stat_vector_smooth(
  mapping = NULL,
  data = NULL,
  geom = "vector_smooth",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  n = c(11, 11),
  scale_length = 1,
  center = TRUE,
  normalize,
  method = "lm",
  se = TRUE,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)

geom_vector_smooth(
  mapping = NULL,
  data = NULL,
  stat = "vector_smooth",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  n = c(11, 11),
  scale_length = 1,
  center = TRUE,
  normalize,
  method = "lm",
  se = TRUE,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{n}{An integer vector specifying the number of grid points along each
axis.}

\item{center}{Logical; if \code{TRUE}, centers the vector on the evaluated x/y
location. If \code{FALSE}, the vector origin is at the evaluated x/y location.
When centering is enabled, the vector's midpoint aligns with the original
x/y location.}

\item{normalize}{Logical; if \code{TRUE}, normalizes the vector's length to a unit
length before applying other transformations like centering. If \code{FALSE},
vectors retain their original lengths.}

\item{method}{Character; specifies the smoothing method to be used.
Accepts \code{"lm"} for linear modeling or \code{"loess"} for locally estimated
scatterplot smoothing.}

\item{se}{Logical; if \code{TRUE}, plots the confidence intervals around the smoothed vectors.}

\item{arrow}{Arrow specification, as created by \code{grid::arrow()}. This
controls the appearance of the arrowheads at the end of the vectors,
including properties like angle, length, and type.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to produce a
smooth vector field plot.
}
\description{
\code{geom_vector_smooth} generates a ggplot layer that visualizes a smooth vector
field by taking in raw vector data and applying smoothing techniques to
estimate the underlying vector field. This is similar in concept to how
\code{geom_smooth()} in ggplot2 estimates a smooth line, but for vector data
instead of scalar data.
}
\section{Aesthetics}{

\code{geom_vector_smooth} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}: x-coordinate of the start point of the vector.
\item \strong{\code{y}}: y-coordinate of the start point of the vector.
\item \code{xend}: x-coordinate of the end point of the vector (optional if \code{angle} and \code{distance} are provided).
\item \code{yend}: y-coordinate of the end point of the vector (optional if \code{angle} and \code{distance} are provided).
\item \code{angle}: The angle of the vector in degrees (optional, used with \code{distance}).
\item \code{distance}: The distance/magnitude of the vector (optional, used with \code{angle}).
\item \code{color}: The color of the vector line.
\item \code{linewidth}: The thickness of the vector line.
\item \code{linetype}: The type of the vector line (solid, dashed, etc.).
\item \code{alpha}: The transparency level of the vector.
\item \code{arrow}: Specification for arrowheads at the end of the vector.
}

Additionally, when using smoothing:
\itemize{
\item \code{norm}: A computed variable representing the magnitude of each smoothed vector.
}
}

\examples{
# Define the function
f <- function(v) {
  x <- v[1]
  y <- v[2]
  c(-1 - x^2 + y, 1 + x - y^2)
}

# Generate sample points
set.seed(123)
sample_points <- data.frame(
  x = runif(10, min = -10, max = 10),
  y = runif(10, min = -10, max = 10)
)

# Apply the function to each point
result <- t(apply(sample_points, 1, f))
sample_points$xend <- result[, 1]
sample_points$yend <- result[, 2]

# Load ggplot2 library
library(ggplot2)

# Plot the vectors
sample_points |>
  ggplot(aes(x = x, y = y, xend = xend, yend = yend)) +
    geom_vector_smooth(normalize = TRUE, center = TRUE, se = TRUE, arrow = grid::arrow()) +
    geom_vector(color = "red")
}
\keyword{datasets}
