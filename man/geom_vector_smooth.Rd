% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_vector_smooth.R
\docType{data}
\name{geom_vector_smooth}
\alias{geom_vector_smooth}
\alias{StatVectorSmooth}
\alias{GeomVectorSmooth}
\alias{stat_vector_smooth}
\title{Create a Smooth Vector Plot Layer}
\format{
An object of class \code{StatVectorSmooth} (inherits from \code{Stat}, \code{ggproto}, \code{gg}) of length 6.

An object of class \code{GeomVectorSmooth} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 8.
}
\usage{
StatVectorSmooth

GeomVectorSmooth

stat_vector_smooth(
  mapping = NULL,
  data = NULL,
  geom = "vector_smooth",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  n = c(11, 11),
  scale_factor = 1,
  method = "lm",
  se = TRUE,
  se.circle = TRUE,
  probs = c(0.95, NA),
  default_formula = cbind(dx, dy) ~ x * y,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  eval_points = NULL,
  ...
)

geom_vector_smooth(
  mapping = NULL,
  data = NULL,
  stat = "vector_smooth",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  n = c(11, 11),
  scale_factor = 1,
  method = "lm",
  se = TRUE,
  se.circle = TRUE,
  probs = c(0.95, NA),
  default_formula = cbind(dx, dy) ~ x * y,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  eval_points = NULL,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{n}{An integer vector specifying the number of grid points along each
axis.}

\item{scale_factor}{Numeric; scales the length of the vectors to a given
value. Useful for ensuring consistent lengths for visualization.}

\item{method}{Character; specifies the smoothing method to be used.
Supported methods are \code{"lm"} (linear modeling) and \code{"boot"} (bootstrapping).
\code{"boot"} generates smoother results by calculating angles with bootstrapping,
and the prediction intervals are determined using quantiles.}

\item{se}{Logical; if \code{TRUE}, plots the confidence intervals around the
smoothed vectors.}

\item{se.circle}{Logical; if \code{TRUE}, draws circles around the origin of the
vectors to represent the radius of the confidence interval. This is useful
for visualizing variability when \code{se = TRUE}.}

\item{probs}{Numeric vector; specifies the prediction interval levels to be
plotted when \code{se = TRUE}. \strong{Default is \code{probs = 0.95}}, but users can specify
multiple levels (e.g., \code{probs = c(0.95, 0.68)}).}

\item{default_formula}{A formula specifying the model to fit for smoothing.
Defaults to \code{cbind(dx, dy) ~ x * y}.}

\item{arrow}{Arrow specification, as created by \code{grid::arrow()}. This
controls the appearance of the arrowheads at the end of the vectors,
including properties like angle, length, and type.}

\item{eval_points}{Number of points at which the function is evaluated for smoothing.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to produce a
smooth vector field plot.
}
\description{
\code{geom_vector_smooth} generates a ggplot layer that visualizes a smooth vector
field by taking in raw vector data and applying smoothing techniques to
estimate the underlying vector field. This is similar in concept to how
\code{geom_smooth()} in ggplot2 estimates a smooth line, but for vector data
instead of scalar data.
}
\details{
\strong{Mathematics of Prediction and Prediction Intervals}:

This section explains the methods for computing predictions and prediction
intervals using the \strong{x} and \strong{y} coordinates.
\subsection{Linear Model (lm) Method}{

The \code{"lm"} method fits a multivariate linear regression to predict the vector
displacements \emph{dx} and \emph{dy} based on \strong{x} and \strong{y}.

\strong{Model:}

\if{html}{\out{<div class="sourceCode">}}\preformatted{dx, dy = b_0 + b_1 * x + b_2 * y + b_3 * (x * y) + e
}\if{html}{\out{</div>}}
\itemize{
\item \emph{b_0}, \emph{b_1}, \emph{b_2}, and \emph{b_3} are the model coefficients.
\item \emph{e} is the residual error.
}

\strong{Prediction:}
For a new grid point, the predicted displacements are:

\if{html}{\out{<div class="sourceCode">}}\preformatted{Z_i = X_i * beta
}\if{html}{\out{</div>}}
\itemize{
\item \emph{X_i} is the design matrix for the new grid point.
\item \emph{beta} is the vector of estimated coefficients.
}

\strong{Prediction Intervals:}
The standard error of the prediction is:

\if{html}{\out{<div class="sourceCode">}}\preformatted{SE(Z_i) = sqrt(diag(X_i * V * t(X_i)))
}\if{html}{\out{</div>}}
\itemize{
\item \emph{V} is the covariance matrix of the coefficients.
}

The prediction interval at confidence level (1 - alpha) is:

\if{html}{\out{<div class="sourceCode">}}\preformatted{Z_i ± t_(alpha / 2) * SE(Z_i)
}\if{html}{\out{</div>}}
}

\subsection{Bootstrapping (boot) Method}{

The \code{"boot"} method uses resampling to estimate angles and displacements.

\strong{Process:}
\itemize{
\item Resample the original data with replacement.
\item Fit models for the sine and cosine of the vector angle:

\if{html}{\out{<div class="sourceCode">}}\preformatted{sin(theta) = b_0 + b_1 * x + b_2 * y + e
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{cos(theta) = b_0 + b_1 * x + b_2 * y + e
}\if{html}{\out{</div>}}
\item Use the predicted sine and cosine to compute:

\if{html}{\out{<div class="sourceCode">}}\preformatted{theta = atan2(sin(theta), cos(theta))
}\if{html}{\out{</div>}}
}

\strong{Prediction Intervals:}
Based on quantiles from bootstrapped angles:

\if{html}{\out{<div class="sourceCode">}}\preformatted{Lower Bound = Q_(alpha / 2)(theta)
Upper Bound = Q_(1 - alpha / 2)(theta)
}\if{html}{\out{</div>}}

\strong{Displacements:}
Using predicted angle \emph{theta} and distance \emph{d}:

\if{html}{\out{<div class="sourceCode">}}\preformatted{dx = d * cos(theta), dy = d * sin(theta)
}\if{html}{\out{</div>}}
}
}
\section{Aesthetics}{

\code{geom_vector_smooth} understands the following aesthetics (required aesthetics are in bold):
\itemize{
\item \strong{\code{x}}: x-coordinate of the starting point of the vector.
\item \strong{\code{y}}: y-coordinate of the starting point of the vector.
\item \strong{\code{dx}}: x-displacement of the vector.
\item \strong{\code{dy}}: y-displacement of the vector.
\item \code{angle}: The angle of the vector in radians (optional, used with \code{distance}).
\item \code{distance}: The magnitude of the vector (optional, used with \code{angle}).
\item \code{color}: The color of the vector line.
\item \code{linewidth}: The thickness of the vector line.
\item \code{linetype}: The type of the vector line (solid, dashed, etc.).
\item \code{alpha}: The transparency level of the vector.
\item \code{arrow}: Specification for arrowheads at the end of the vector.

Additionally, when using smoothing:
\item \code{norm}: A computed variable representing the magnitude of the smoothed vector,
available via \code{after_stat()}.
}
}

\examples{
library(ggvfields)

# Function to generate random vectors based on (x, y) inputs
generate_vectors <- function(v) {
  x <- v[1]
  y <- v[2]
  c(sin(x) + sin(y) + rnorm(1, 5, 3), sin(x) - sin(y) + rnorm(1, 5, 3))
}

# Set seed for reproducibility
set.seed(123)

# Generate sample data
sample_points <- data.frame(
  x = runif(50, min = -10, max = 10),
  y = runif(50, min = -10, max = 10)
)

# Apply the generate_vectors function to each row
result <- t(apply(sample_points, 1, generate_vectors))

# Create new columns for displacements (dx, dy) and polar coordinates
sample_points$xend <- result[, 1]
sample_points$yend <- result[, 2]
sample_points$dx <- sample_points$xend - sample_points$x
sample_points$dy <- sample_points$yend - sample_points$y
sample_points$distance <- sqrt(sample_points$dx^2 + sample_points$dy^2)
sample_points$angle <- atan2(sample_points$dy, sample_points$dx)

# Example 1: Cartesian Coordinates with Linear Model (lm)
ggplot(sample_points, aes(x = x, y = y)) +
  geom_vector_smooth(aes(dx = dx, dy = dy), method = "lm", se = TRUE) +
  geom_vector(aes(dx = dx, dy = dy), color = "black") +
  ggtitle("Vector Smoothing with Linear Model (lm)")

# Example 2: Polar Coordinates with Bootstrapping (boot)
ggplot(sample_points, aes(x = x, y = y, angle = angle, distance = distance)) +
  geom_vector_smooth(method = "boot", se = TRUE, probs = c(0.95, 0.68)) +
  geom_vector(aes(dx = dx, dy = dy), color = "black") +
  ggtitle("Vector Smoothing with Bootstrapping (boot)")

}
\keyword{datasets}
