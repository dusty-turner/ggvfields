% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_stream_field.R
\docType{data}
\name{geom_stream_field}
\alias{geom_stream_field}
\alias{stat_stream_field}
\alias{StatStreamField}
\title{Create a Stream Field Layer in ggplot2}
\usage{
geom_stream_field(
  mapping = NULL,
  data = NULL,
  stat = StatStreamField,
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = TRUE,
  inherit.aes = TRUE,
  fun,
  xlim = c(-1, 1),
  ylim = c(-1, 1),
  n = 11,
  max_it = 1000,
  dt = 0.0025,
  L = NULL,
  center = FALSE,
  method = "rk4",
  arrow = grid::arrow(angle = 30, length = unit(0.02, "npc"), type = "closed")
)

stat_stream_field(
  mapping = NULL,
  data = NULL,
  geom = GeomStream,
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = TRUE,
  inherit.aes = TRUE,
  fun,
  xlim = c(-1, 1),
  ylim = c(-1, 1),
  n = 11,
  max_it = 1000,
  dt = 0.0025,
  L = NULL,
  center = FALSE,
  method = "rk4",
  arrow = grid::arrow(angle = 30, length = unit(0.02, "npc"), type = "closed")
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{ggplot2::layer()}} and the
underlying geometry/stat. Often used to set aesthetics like \code{color = "red"}
or \code{size = 1.5}.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A function of two variables, \code{fun(x, y)}, returning a
two-element vector \((dx, dy)\). This defines the local "flow" direction.}

\item{xlim, ylim}{Numeric vectors of length two specifying the domain limits
in the \(\,x\)- and \(\,y\)-directions, respectively. Defaults to
\code{c(-1, 1)} for both.}

\item{n}{Integer. Grid resolution (the number of seed points along each axis).
Defaults to 11.}

\item{max_it}{Integer. Maximum number of integration steps per streamline.
Controls how far each streamline can propagate. Defaults to 1000.}

\item{dt}{Numeric. Time-step size for integration. Smaller values produce more
precise streamlines at the expense of computation time. Default \code{0.0025}.}

\item{L}{Numeric. Maximum arc length for each streamline. A streamline stops
once its length exceeds this value. If \code{NULL}, a suitable default is derived
from the grid spacing. Default \code{NULL}.}

\item{center}{Logical. If \code{TRUE}, center the seed points around the midpoint
of the domain (useful for symmetric flows). Default \code{FALSE}.}

\item{method}{Character. Integration method (e.g., \code{"rk4"} for Runge-Kutta 4,
or \code{"euler"}). Defaults to \code{"rk4"}.}

\item{arrow}{A \code{\link[grid:arrow]{grid::arrow()}} specification for adding arrowheads to each
streamline. By default, a closed arrow with 30-degree angle and length
\code{0.02} npc is used.}

\item{geom}{The geometric object used to draw the streamline. Defaults to
\link[ggplot2:ggplot2-ggproto]{ggplot2::GeomPath} in \code{geom_stream()}, or \link{GeomStream} in \code{stat_stream()}.}
}
\value{
A ggplot2 \strong{Layer} object that can be added to a plot. It computes
the streamlines over the specified domain and draws them, optionally with
arrowheads, to represent the direction of the flow.
}
\description{
\code{geom_stream_field()} creates a ggplot2 layer that evaluates a user-defined
function \eqn{f(x, y) \to (dx, dy)} over a grid of \((x, y)\) values, then
numerically integrates those derivatives to form streamlines. The resulting
coordinates are passed to \link{GeomStream} for plotting, producing a streamlined
visualization of vector fields.
}
\details{
\itemize{
\item \strong{Domain & Grid}: The domain is defined by \code{xlim} and \code{ylim}, and a regular
2D grid of \eqn{x \times y} seed points is placed there (optionally centered).
\item \strong{Integration}: Each seed point is advanced using the chosen \code{method} and
\code{dt}. Streamlines terminate upon exceeding \code{max_it} steps or length \code{L}.
\item \strong{Visualization}: The integrated (x, y) path is passed to a specialized
geometry (\link{GeomStream} by default), allowing you to visualize vector fields,
flow patterns, or trajectories.
}

This approach can be used to illustrate fluid flows, gradient fields, or any
continuous mapping from \((x, y)\) to \((dx, dy)\).
}
\section{See Also}{

\itemize{
\item \link{StatStreamField} for the underlying statistical transformation.
\item \link{GeomStream} for the geometry that renders the resulting paths.
\item \link[ggplot2:geom_path]{ggplot2::geom_path} as the base geometry on which \code{GeomStream} is built.
}
}

\examples{

# Define a function that returns (dx, dy)
f <- function(u) {
   x <- u[1]
   y <- u[2]
   c(-x^2 + y - 1, x - y^2 + 1)
   }

ggplot() +
  geom_stream_field(fun = f)

}
\keyword{datasets}
