% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_stream_field.R
\docType{data}
\name{geom_stream_field}
\alias{geom_stream_field}
\alias{stat_stream_field}
\alias{StatStreamField}
\title{Create a Stream Field Layer in ggplot2}
\usage{
stat_stream_field(
  mapping = NULL,
  data = NULL,
  geom = GeomStream,
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 11,
  args = list(),
  max_it = 1000,
  dt = 0.0025,
  L = NULL,
  center = TRUE,
  normalize = TRUE,
  tail_point = FALSE,
  method = "rk4",
  arrow = grid::arrow(angle = 30, length = unit(0.02, "npc"), type = "closed")
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object used to draw the streamline. Defaults to
\link{GeomStream}.}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Other arguments passed to \code{\link[ggplot2:layer]{ggplot2::layer()}} and the underlying
geometry/stat.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A function of two variables, \code{fun(x, y)}, returning a two-element
vector \eqn{(dx, dy)}. This defines the local "flow" direction at any point
in the domain.}

\item{xlim, ylim}{Numeric vectors of length two specifying the domain limits
in the \eqn{x}- and \eqn{y}-directions, respectively. Defaults to
\eqn{c(-1, 1)} for both.}

\item{n}{Integer. Grid resolution (the number of seed points along each
axis). Defaults to 11, resulting in an \eqn{n \times n} grid of seed
points.}

\item{args}{List of additional arguments passed on to the function defined by
\code{fun}.}

\item{max_it}{Integer. Maximum number of integration steps per streamline.
This controls how far each streamline can propagate. Defaults to 1000.}

\item{dt}{Numeric. Time-step size for integration. Smaller values produce
more precise streamlines but increase computation time. Default is
\code{0.0025}.}

\item{L}{Numeric. Maximum arc length for each streamline. A streamline stops
once its length exceeds this value. If \code{NULL}, a suitable default is
derived from the grid spacing. Default is \code{NULL}.}

\item{center}{Logical. If \code{TRUE}, centers the seed points or the resulting
streamlines so that the original (x, y) becomes the midpoint. Default is
\code{TRUE}.}

\item{normalize}{Logical. If \code{TRUE}, stream lengths are normalized based on
grid spacing. If \code{FALSE}, a default arc length is used. Default is \code{TRUE}.}

\item{tail_point}{Logical. If \code{TRUE}, a point is drawn at the tail (i.e. the
starting point) of each streamline. This can help to indicate the origin of
the computed path. Default is \code{FALSE}.}

\item{method}{Character. Integration method, e.g., \code{"rk4"} for Runge-Kutta 4
or \code{"euler"} for Euler's method. Defaults to \code{"rk4"}.}

\item{arrow}{A \code{\link[grid:arrow]{grid::arrow()}} specification for adding arrowheads to each
streamline. By default, a closed arrow with a 30Â° angle and a length of
\code{0.02} npc is used.}
}
\value{
A ggplot2 layer that computes the streamlines over the specified
domain and draws them, optionally with arrowheads and with points at the
tail and/or evaluation positions.
}
\description{
\code{\link[=geom_stream_field]{geom_stream_field()}} creates a ggplot2 layer that integrates a user-defined
vector field function \eqn{f(x, y) \to (dx, dy)} over a grid of seed points
within a specified domain \eqn{(x, y)}, producing streamlines that visualize
the flow of the vector field. This is useful for visualizing vector fields,
flow patterns, or trajectories in a variety of contexts such as fluid flows
or gradient fields.
}
\details{
The streamlines are generated by numerically integrating the vector
field defined by \code{fun(x, y)}. The computed streamlines are then passed to
\link{GeomStream} for rendering. When \code{tail_point = TRUE}, a point is drawn at
the start of each streamline. When \code{eval_point = TRUE}, a point is drawn at
the original (untransformed) seed point, allowing you to see the location
before centering or normalization is applied.
}
\section{See Also}{

\itemize{
\item \link{StatStreamField} for the underlying statistical transformation.
\item \link{GeomStream} for the geometry that renders the resulting paths.
\item \link[ggplot2:geom_path]{ggplot2::geom_path} as the base geometry on which \link{GeomStream} is built.
}
}

\examples{

f <- efield_maker()
ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))
ggplot() + geom_vector_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))

# Define a simple rotational vector field function
rotational_field <- function(u) {
  x <- u[1]
  y <- u[2]
  c(-y, x)
}

# Create a stream field layer
ggplot() + geom_stream_field(fun = rotational_field)
ggplot() + geom_vector_field(fun = rotational_field)

# Create a stream field layer with tail points
ggplot() +
  geom_stream_field(fun = rotational_field, tail_point = TRUE)

# Create a stream field with centered streams
ggplot() +
  geom_stream_field(fun = rotational_field, center = TRUE)

}
\keyword{datasets}
