% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_stream_field.R
\docType{data}
\name{geom_stream_field}
\alias{geom_stream_field}
\alias{stat_stream_field}
\alias{StatStreamField}
\title{Create a Stream Field Layer in ggplot2}
\usage{
stat_stream_field(
  mapping = NULL,
  data = NULL,
  geom = GeomStream,
  position = "identity",
  ...,
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 11,
  args = list(),
  max_it = 1000,
  T = NULL,
  L = NULL,
  center = TRUE,
  type = "stream",
  normalize = TRUE,
  tail_point = FALSE,
  method = "rk4",
  arrow = grid::arrow(angle = 30, length = unit(0.02, "npc"), type = "closed")
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{geom}{The geometric object used to render the streamline. Defaults to
\link{GeomStream}.}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{...}{Other arguments passed to \code{\link[ggplot2:layer]{ggplot2::layer()}} and the underlying
geometry/stat.}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A function of two variables, \code{fun(x, y)}, returning a two-element
vector \eqn{(dx, dy)}. This defines the local "flow" direction at any point
in the domain.}

\item{xlim, ylim}{Numeric vectors of length two specifying the domain limits
in the \eqn{x}- and \eqn{y}-directions, respectively. Defaults to
\eqn{c(-1, 1)} if not provided.}

\item{n}{Integer or two-element numeric vector. Grid resolution specifying
the number of seed points along each axis. Defaults to \code{11}, resulting in
an \eqn{11 \times 11} grid.}

\item{args}{List of additional arguments passed on to the function defined by
\code{fun}.}

\item{max_it}{Integer. Maximum number of integration steps per streamline.
Defaults to \code{1000}.}

\item{T}{Numeric. Maximum integration time for each streamline. When
\code{normalize = FALSE}, the integration runs until time \code{T} is reached.
Defaults to \code{NULL}, in which case a default value of \code{1} is used when
needed.}

\item{L}{Numeric. Maximum arc length for each streamline. When \code{normalize = TRUE}, the integration is halted once the cumulative arc length reaches
\code{L}. Defaults to \code{NULL}, in which case a suitable default is computed from
the grid spacing.}

\item{center}{Logical. If \code{TRUE} (default), centers the seed points or the
resulting streamlines so that the original (x, y) becomes the midpoint.}

\item{type}{Character. Either \code{"stream"} (default) or \code{"vector"}.
\itemize{
\item \code{"stream"} computes a full streamline by integrating in both directions (when \code{center = TRUE}).
\item \code{"vector"} computes a single vector representing the field at the seed point.
}}

\item{normalize}{Logical. If \code{TRUE} (default), streamlines are normalized
based on grid spacing, using the \code{L} parameter to control maximum arc
length. If \code{FALSE}, streamlines are computed for a fixed time determined by
the \code{T} parameter.}

\item{tail_point}{Logical. If \code{TRUE}, draws a point at the tail (starting
point) of each streamline. Defaults to \code{FALSE}.}

\item{method}{Character. Integration method, e.g., \code{"rk4"} for Runge-Kutta 4
or \code{"euler"} for Euler's method. Defaults to \code{"rk4"}.}

\item{arrow}{A \code{\link[grid:arrow]{grid::arrow()}} specification for adding arrowheads to the
streamline. By default, a closed arrow with a 30Â° angle and a length of
\code{0.02} npc is used.}
}
\value{
A ggplot2 layer that computes and renders streamlines over the
specified domain, optionally with arrowheads and tail points.
}
\description{
\code{\link[=geom_stream_field]{geom_stream_field()}} creates a ggplot2 layer that integrates a user-defined
vector field function \eqn{f(x, y) \to (dx, dy)} over a grid of seed points
within a specified domain \eqn{(x, y)}, producing streamlines that visualize
the flow of the vector field. This is useful for visualizing vector fields,
flow patterns, or trajectories in a variety of contexts such as fluid flows
or gradient fields.
}
\details{
The streamlines are generated by numerically integrating the vector
field defined by \code{fun(x, y)}. The integration halts either when the
cumulative arc length reaches \code{L} (if \code{normalize = TRUE}) or when the
integration time reaches \code{T} (if \code{normalize = FALSE}). The computed
streamlines are then passed to \link{GeomStream} for rendering.
}
\section{See Also}{

\itemize{
\item \link{StatStreamField} for the underlying statistical transformation.
\item \link{GeomStream} for the geometry that renders the resulting paths.
\item \link[ggplot2:geom_path]{ggplot2::geom_path} as the base geometry on which \link{GeomStream} is built.
}
}

\examples{

f <- function(u) c(-u[2], u[1])

# the basic usage involves you providing a fun, xlim, and ylim
ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))

# if unspecified, xlim and ylim default to c(-1,1). we use this in what
# follows to focus on other parts of the code
ggplot() + geom_stream_field(fun = f)
ggplot() + geom_stream_field(fun = f, center = FALSE)

ggplot() + geom_stream_field(fun = f, normalize = FALSE)
ggplot() + geom_stream_field(fun = f, normalize = FALSE, center = FALSE)

# run systems until specified lengths
ggplot() + geom_stream_field(fun = f, normalize = TRUE, L = .08)

# run systems for specified times
ggplot() + geom_stream_field(fun = f, normalize = FALSE, T = .1)

# tail and eval points
ggplot() + geom_stream_field(fun = f, tail_point = TRUE)
ggplot() + geom_stream_field(fun = f, eval_point = TRUE)




f <- efield_maker()
ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))
ggplot() +
  geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2)) +
  scale_color_viridis_c(trans = "log10") +
  coord_equal()

f <- function(u) u
ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))

f <- function(u) c(2,1)
ggplot() + geom_stream_field(fun = f, xlim = c(-1,1), ylim = c(-1,1))

# bug here with alpha
ggplot() +
  geom_stream_field(fun = f, aes(alpha = after_stat(t)), xlim = c(-2,2), ylim = c(-2,2)) +
  scale_alpha(range  = c(0,1))

ggplot() +
  geom_stream_field(
    fun = f, xlim = c(-1,1), ylim = c(-1,1),
    linewidth = .75, arrow = arrow(length = unit(0.015, "npc"))
  )

# neat examples

f <- function(u) {
  x <- u[1]; y <- u[2]
  c(y, y*(-x^2 - 2*y^2 + 1) - x)
}
ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))
ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2), type = "vector")

f <- function(u) {
  x <- u[1]; y <- u[2]
  c(y, x - x^3)
}
ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))

f <- function(u) {
  x <- u[1]; y <- u[2]
  c(x^2 - y^2, x^2 + y^2 - 2)
}
ggplot() + geom_stream_field(fun = f, xlim = c(-2,2), ylim = c(-2,2))


}
\keyword{datasets}
