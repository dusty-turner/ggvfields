% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_gradient_field2.R
\name{geom_gradient_field2}
\alias{geom_gradient_field2}
\alias{stat_gradient_field2}
\title{Create a Gradient Field Plot Layer with Length Mapped to Norm}
\usage{
geom_gradient_field2(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  geom = "vector",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 16,
  center = FALSE,
  normalize = TRUE,
  tail_point = TRUE,
  arrow = NULL,
  ...
)

stat_gradient_field2(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  geom = "vector",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  fun,
  xlim = NULL,
  ylim = NULL,
  n = 16,
  center = FALSE,
  normalize = TRUE,
  tail_point = TRUE,
  arrow = NULL,
  ...
)
}
\arguments{
\item{mapping}{Aesthetic mappings created by \code{aes()} or \code{aes_()}.
These functions ensure that \code{length = after_stat(norm)} is mapped by default, and \code{color} is set to \code{"black"} unless otherwise specified.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{fun}{A user-defined scalar function that takes a numeric vector \verb{(x, y)}
and returns a single numeric value, representing the scalar field.}

\item{xlim, ylim}{Numeric vectors of length 2 specifying the x/y-axis limits for
the grid.}

\item{n}{Integer specifying the number of grid points along each axis
(resolution of the grid).}

\item{center}{Logical; if \code{TRUE}, centers the vectors on their respective
grid points.}

\item{normalize}{Logical; if \code{TRUE}, normalizes the vectors to unit length.
Set to \code{FALSE} to view the original lengths of the vectors.}

\item{tail_point}{Logical; if \code{TRUE}, adds a small point at the tail of each vector to help indicate the starting point.}

\item{arrow}{Arrow specification, created by \code{grid::arrow()}, to add
arrowheads to vectors.}

\item{...}{Other arguments passed on to \code{geom_gradient_field()} or \code{stat_gradient_field()}.}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to create a gradient field plot.
}
\description{
\code{geom_gradient_field2} and \code{stat_gradient_field2} are extensions of \code{geom_gradient_field} and \code{stat_gradient_field},
providing identical functionality but with different default aesthetics. These functions are particularly useful
for gradient field visualizations where vector length is mapped to the vector's magnitude.
}
\details{
\strong{Default Behavior:}
\itemize{
\item \strong{Length} is automatically mapped to the vector norm (\code{length = after_stat(norm)}), emphasizing the vector
magnitude through the length of each vector in the plot.
\item \strong{Color} is set to \code{"black"} by default, ensuring a uniform appearance across vectors. Users can override
this if they wish to map another variable to \code{color}.
}

\strong{Additional Parameters:}
\itemize{
\item \strong{center} is set to \code{FALSE} by default, so vectors start from the specified (\code{x}, \code{y}) coordinates.
\item \strong{tail_point} is set to \code{TRUE} by default, adding a small point at the tail of each vector to help indicate the starting point.
\item \strong{arrow} is set to \code{NULL}, but users can specify an arrow using \code{grid::arrow()} to add custom arrowheads.
}
}
\examples{
library(ggplot2)

paraboloid_field <- function(v) {
  x <- v[1]
  y <- v[2]
  x^2 + y^2
}

saddle_field <- function(v) {
  x <- v[1]
  y <- v[2]
  x^3 - 3 * x * y^2
}

ggplot() +
  geom_gradient_field2(fun = paraboloid_field)

ggplot() +
  geom_gradient_field2(fun = saddle_field)

}
\seealso{
Use \code{\link[=geom_gradient_field]{geom_gradient_field()}} if you prefer to map vector magnitude using a different aesthetic such as \code{color}.
}
