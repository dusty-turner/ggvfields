% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geom_vector.R
\docType{data}
\name{geom_vector}
\alias{geom_vector}
\alias{stat_vector}
\alias{StatVector}
\alias{GeomVector}
\title{Create a Vector Plot Layer}
\format{
An object of class \code{StatVector} (inherits from \code{Stat}, \code{ggproto}, \code{gg}) of length 3.

An object of class \code{GeomVector} (inherits from \code{GeomSegment}, \code{Geom}, \code{ggproto}, \code{gg}) of length 5.
}
\usage{
geom_vector(
  mapping = NULL,
  data = NULL,
  stat = "vector",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  center = TRUE,
  normalize = TRUE,
  scale_length = 1,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)

stat_vector(
  mapping = NULL,
  data = NULL,
  geom = "segment",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  center = TRUE,
  normalize = TRUE,
  scale_length = 1,
  arrow = grid::arrow(angle = 20, length = unit(0.015, "npc"), type = "closed"),
  ...
)

StatVector

GeomVector
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by \code{\link[ggplot2:aes]{aes()}}. If specified and
\code{inherit.aes = TRUE} (the default), it is combined with the default mapping
at the top level of the plot. You must supply \code{mapping} if there is no plot
mapping.}

\item{data}{The data to be displayed in this layer. There are three
options:

If \code{NULL}, the default, the data is inherited from the plot
data as specified in the call to \code{\link[ggplot2:ggplot]{ggplot()}}.

A \code{data.frame}, or other object, will override the plot
data. All objects will be fortified to produce a data frame. See
\code{\link[ggplot2:fortify]{fortify()}} for which variables will be created.

A \code{function} will be called with a single argument,
the plot data. The return value must be a \code{data.frame}, and
will be used as the layer data. A \code{function} can be created
from a \code{formula} (e.g. \code{~ head(.x, 10)}).}

\item{stat}{The statistical transformation to use on the data for this layer.
When using a \verb{geom_*()} function to construct a layer, the \code{stat}
argument can be used the override the default coupling between geoms and
stats. The \code{stat} argument accepts the following:
\itemize{
\item A \code{Stat} ggproto subclass, for example \code{StatCount}.
\item A string naming the stat. To give the stat as a string, strip the
function name of the \code{stat_} prefix. For example, to use \code{stat_count()},
give the stat as \code{"count"}.
\item For more information and other ways to specify the stat, see the
\link[ggplot2:layer_stats]{layer stat} documentation.
}}

\item{position}{A position adjustment to use on the data for this layer. This
can be used in various ways, including to prevent overplotting and
improving the display. The \code{position} argument accepts the following:
\itemize{
\item The result of calling a position function, such as \code{position_jitter()}.
This method allows for passing extra arguments to the position.
\item A string naming the position adjustment. To give the position as a
string, strip the function name of the \code{position_} prefix. For example,
to use \code{position_jitter()}, give the position as \code{"jitter"}.
\item For more information and other ways to specify the position, see the
\link[ggplot2:layer_positions]{layer position} documentation.
}}

\item{na.rm}{If \code{FALSE}, the default, missing values are removed with
a warning. If \code{TRUE}, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends?
\code{NA}, the default, includes if any aesthetics are mapped.
\code{FALSE} never includes, and \code{TRUE} always includes.
It can also be a named logical vector to finely select the aesthetics to
display.}

\item{inherit.aes}{If \code{FALSE}, overrides the default aesthetics,
rather than combining with them. This is most useful for helper functions
that define both data and aesthetics and shouldn't inherit behaviour from
the default plot specification, e.g. \code{\link[ggplot2:borders]{borders()}}.}

\item{center}{Logical; if \code{TRUE}, centers the vector on the specified (\code{x},
\code{y}) location. If \code{FALSE}, the vector origin is at the specified (\code{x}, \code{y})
location. When centering is enabled, the vector's midpoint aligns with the
original (\code{x}, \code{y}) location.}

\item{normalize}{Logical; if \code{TRUE}, normalizes each vector to a unit length
before applying any scaling. This ensures that all vectors have the same
length, which is then adjusted by \code{scale_length}. Normalization is useful
for avoiding overplotting and ensuring visual consistency, especially in
dense plots.}

\item{scale_length}{Numeric; a scaling factor applied to the vectors to
adjust their length. Defaults to \code{1}. This value is applied after
normalization (if \code{normalize = TRUE}), allowing you to control the final
vector lengths.}

\item{arrow}{Arrow specification, as created by \code{grid::arrow()}. This
controls the appearance of the arrowheads at the end of the vectors,
including properties like angle, length, and type.}

\item{...}{Other arguments passed on to \code{\link[ggplot2:layer]{layer()}}'s \code{params} argument. These
arguments broadly fall into one of 4 categories below. Notably, further
arguments to the \code{position} argument, or aesthetics that are required
can \emph{not} be passed through \code{...}. Unknown arguments that are not part
of the 4 categories below are ignored.
\itemize{
\item Static aesthetics that are not mapped to a scale, but are at a fixed
value and apply to the layer as a whole. For example, \code{colour = "red"}
or \code{linewidth = 3}. The geom's documentation has an \strong{Aesthetics}
section that lists the available options. The 'required' aesthetics
cannot be passed on to the \code{params}. Please note that while passing
unmapped aesthetics as vectors is technically possible, the order and
required length is not guaranteed to be parallel to the input data.
\item When constructing a layer using
a \verb{stat_*()} function, the \code{...} argument can be used to pass on
parameters to the \code{geom} part of the layer. An example of this is
\code{stat_density(geom = "area", outline.type = "both")}. The geom's
documentation lists which parameters it can accept.
\item Inversely, when constructing a layer using a
\verb{geom_*()} function, the \code{...} argument can be used to pass on parameters
to the \code{stat} part of the layer. An example of this is
\code{geom_area(stat = "density", adjust = 0.5)}. The stat's documentation
lists which parameters it can accept.
\item The \code{key_glyph} argument of \code{\link[ggplot2:layer]{layer()}} may also be passed on through
\code{...}. This can be one of the functions described as
\link[ggplot2:draw_key]{key glyphs}, to change the display of the layer in the legend.
}}

\item{geom}{The geometric object to use to display the data for this layer.
When using a \verb{stat_*()} function to construct a layer, the \code{geom} argument
can be used to override the default coupling between stats and geoms. The
\code{geom} argument accepts the following:
\itemize{
\item A \code{Geom} ggproto subclass, for example \code{GeomPoint}.
\item A string naming the geom. To give the geom as a string, strip the
function name of the \code{geom_} prefix. For example, to use \code{geom_point()},
give the geom as \code{"point"}.
\item For more information and other ways to specify the geom, see the
\link[ggplot2:layer_geoms]{layer geom} documentation.
}}
}
\value{
A \code{ggplot2} layer that can be added to a ggplot object to produce a
vector plot.
}
\description{
\code{geom_vector} generates a ggplot layer that visualizes vectors as line
segments with optional arrowheads. The vectors are defined by start (\code{x},
\code{y}) and end (\code{xend}, \code{yend}) coordinates, which can be directly provided or
derived from angular (\code{angle}) and distance (\code{distance}) information.
}
\section{Computed variables}{


\describe{
\item{norm}{The magnitude of each vector, calculated as \eqn{\|\mathbf{v}\| = \sqrt{(xend - x)^2 + (yend - y)^2}}.}
}
}

\examples{

# Example using Cartesian input: precomputed xend and yend
set.seed(1234)
n <- 10
wind_data_polar <- data.frame(
  lon = rnorm(n),
  lat = rnorm(n),
  wind_dir = runif(n, -pi, pi),
  wind_spd = rchisq(n, df = 2)
)

wind_data_cartesian <- within(wind_data_polar, {
  wind_lon_comp <- wind_spd * cos(wind_dir)
  wind_lat_comp <- wind_spd * sin(wind_dir)
  xend <- lon + wind_lon_comp
  yend <- lat + wind_lat_comp
})

ggplot(wind_data_cartesian) +
  geom_vector(aes(x = lon, y = lat, xend = xend, yend = yend)) +
  labs(title = "Wind Vectors (Cartesian Input)",
       x = "Longitude", y = "Latitude")

# Example using Polar input: angle (wind_dir) and distance (wind_spd)
ggplot(wind_data_polar) +
  geom_vector(aes(x = lon, y = lat, angle = wind_dir * 180 / pi, distance = wind_spd)) +
  labs(title = "Wind Vectors (Polar Input)",
       x = "Longitude", y = "Latitude")


}
\keyword{datasets}
